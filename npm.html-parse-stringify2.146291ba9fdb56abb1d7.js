(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{108:function(e,n,t){e.exports={parse:t(163),stringify:t(166)}},163:function(e,n,t){var r=/(?:<!--[\S\s]*?-->|<(?:"[^"]*"['"]*|'[^']*'['"]*|[^'">])+>)/g,c=t(164),i=Object.create?Object.create(null):{};function o(e,n,t,r,c){var i=n.indexOf("<",r),o=n.slice(r,-1===i?void 0:i);/^\s*$/.test(o)&&(o=" "),(!c&&i>-1&&t+e.length>=0||" "!==o)&&e.push({type:"text",content:o})}e.exports=function(e,n){n||(n={}),n.components||(n.components=i);var t,a=[],s=-1,u=[],p={},h=!1;return e.replace(r,(function(r,i){if(h){if(r!=="</"+t.name+">")return;h=!1}var l,d="/"!==r.charAt(1),f=0===r.indexOf("\x3c!--"),g=i+r.length,m=e.charAt(g);d&&!f&&(s++,"tag"===(t=c(r)).type&&n.components[t.name]&&(t.type="component",h=!0),t.voidElement||h||!m||"<"===m||o(t.children,e,s,g,n.ignoreWhitespace),p[t.tagName]=t,0===s&&a.push(t),(l=u[s-1])&&l.children.push(t),u[s]=t),(f||!d||t.voidElement)&&(f||s--,!h&&"<"!==m&&m&&o(l=-1===s?a:u[s].children,e,s,g,n.ignoreWhitespace))})),!a.length&&e.length&&o(a,e,0,0,n.ignoreWhitespace),a}},164:function(e,n,t){var r=/([\w-]+)|=|(['"])([.\s\S]*?)\2/g,c=t(165);e.exports=function(e){var n,t=0,i=!0,o={type:"tag",name:"",voidElement:!1,attrs:{},children:[]};return e.replace(r,(function(r){if("="===r)return i=!0,void t++;i?0===t?((c[r]||"/"===e.charAt(e.length-2))&&(o.voidElement=!0),o.name=r):(o.attrs[n]=r.replace(/^['"]|['"]$/g,""),n=void 0):(n&&(o.attrs[n]=n),n=r),t++,i=!1})),o}},166:function(e,n){function t(e,n){switch(n.type){case"text":return e+n.content;case"tag":return e+="<"+n.name+(n.attrs?function(e){var n=[];for(var t in e)n.push(t+'="'+e[t]+'"');return n.length?" "+n.join(" "):""}(n.attrs):"")+(n.voidElement?"/>":">"),n.voidElement?e:e+n.children.reduce(t,"")+"</"+n.name+">"}}e.exports=function(e){return e.reduce((function(e,n){return e+t("",n)}),"")}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,