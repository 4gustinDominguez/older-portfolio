(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{111:function(e,t,n){"use strict";var i=n(14),a=n(6),o=n(11),r=n(12),s=n(39),l=n(46),u=n(22),c=n(47),g=n(118),f=n(73),p={type:"logger",log:function(e){this.output("log",e)},warn:function(e){this.output("warn",e)},error:function(e){this.output("error",e)},output:function(e,t){var n;console&&console[e]&&(n=console)[e].apply(n,Object(g.a)(t))}},h=new(function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Object(o.a)(this,e),this.init(t,n)}return Object(r.a)(e,[{key:"init",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.prefix=t.prefix||"i18next:",this.logger=e||p,this.options=t,this.debug=t.debug}},{key:"setDebug",value:function(e){this.debug=e}},{key:"log",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"log","",!0)}},{key:"warn",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"warn","",!0)}},{key:"error",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"error","")}},{key:"deprecate",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"warn","WARNING DEPRECATED: ",!0)}},{key:"forward",value:function(e,t,n,i){return i&&!this.debug?null:("string"==typeof e[0]&&(e[0]="".concat(n).concat(this.prefix," ").concat(e[0])),this.logger[t](e))}},{key:"create",value:function(t){return new e(this.logger,Object(a.a)({},{prefix:"".concat(this.prefix,":").concat(t,":")},this.options))}}]),e}()),d=function(){function e(){Object(o.a)(this,e),this.observers={}}return Object(r.a)(e,[{key:"on",value:function(e,t){var n=this;return e.split(" ").forEach((function(e){n.observers[e]=n.observers[e]||[],n.observers[e].push(t)})),this}},{key:"off",value:function(e,t){this.observers[e]&&(t?this.observers[e]=this.observers[e].filter((function(e){return e!==t})):delete this.observers[e])}},{key:"emit",value:function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];if(this.observers[e]){var a=[].concat(this.observers[e]);a.forEach((function(e){e.apply(void 0,n)}))}if(this.observers["*"]){var o=[].concat(this.observers["*"]);o.forEach((function(t){t.apply(t,[e].concat(n))}))}}}]),e}();function v(){var e,t,n=new Promise((function(n,i){e=n,t=i}));return n.resolve=e,n.reject=t,n}function y(e){return null==e?"":""+e}function b(e,t,n){function i(e){return e&&e.indexOf("###")>-1?e.replace(/###/g,"."):e}function a(){return!e||"string"==typeof e}for(var o="string"!=typeof t?[].concat(t):t.split(".");o.length>1;){if(a())return{};var r=i(o.shift());!e[r]&&n&&(e[r]=new n),e=e[r]}return a()?{}:{obj:e,k:i(o.shift())}}function m(e,t,n){var i=b(e,t,Object);i.obj[i.k]=n}function k(e,t){var n=b(e,t),i=n.obj,a=n.k;if(i)return i[a]}function x(e,t,n){var i=k(e,n);return void 0!==i?i:k(t,n)}function O(e,t,n){for(var i in t)i in e?"string"==typeof e[i]||e[i]instanceof String||"string"==typeof t[i]||t[i]instanceof String?n&&(e[i]=t[i]):O(e[i],t[i],n):e[i]=t[i];return e}function j(e){return e.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&")}var w={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;"};function S(e){return"string"==typeof e?e.replace(/[&<>"'\/]/g,(function(e){return w[e]})):e}var L=function(e){function t(e){var n,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{ns:["translation"],defaultNS:"translation"};return Object(o.a)(this,t),n=Object(s.a)(this,Object(l.a)(t).call(this)),d.call(Object(u.a)(n)),n.data=e||{},n.options=i,void 0===n.options.keySeparator&&(n.options.keySeparator="."),n}return Object(c.a)(t,e),Object(r.a)(t,[{key:"addNamespaces",value:function(e){this.options.ns.indexOf(e)<0&&this.options.ns.push(e)}},{key:"removeNamespaces",value:function(e){var t=this.options.ns.indexOf(e);t>-1&&this.options.ns.splice(t,1)}},{key:"getResource",value:function(e,t,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},a=void 0!==i.keySeparator?i.keySeparator:this.options.keySeparator,o=[e,t];return n&&"string"!=typeof n&&(o=o.concat(n)),n&&"string"==typeof n&&(o=o.concat(a?n.split(a):n)),e.indexOf(".")>-1&&(o=e.split(".")),k(this.data,o)}},{key:"addResource",value:function(e,t,n,i){var a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{silent:!1},o=this.options.keySeparator;void 0===o&&(o=".");var r=[e,t];n&&(r=r.concat(o?n.split(o):n)),e.indexOf(".")>-1&&(i=t,t=(r=e.split("."))[1]),this.addNamespaces(t),m(this.data,r,i),a.silent||this.emit("added",e,t,n,i)}},{key:"addResources",value:function(e,t,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{silent:!1};for(var a in n)"string"!=typeof n[a]&&"[object Array]"!==Object.prototype.toString.apply(n[a])||this.addResource(e,t,a,n[a],{silent:!0});i.silent||this.emit("added",e,t,n)}},{key:"addResourceBundle",value:function(e,t,n,i,o){var r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{silent:!1},s=[e,t];e.indexOf(".")>-1&&(i=n,n=t,t=(s=e.split("."))[1]),this.addNamespaces(t);var l=k(this.data,s)||{};i?O(l,n,o):l=Object(a.a)({},l,n),m(this.data,s,l),r.silent||this.emit("added",e,t,n)}},{key:"removeResourceBundle",value:function(e,t){this.hasResourceBundle(e,t)&&delete this.data[e][t],this.removeNamespaces(t),this.emit("removed",e,t)}},{key:"hasResourceBundle",value:function(e,t){return void 0!==this.getResource(e,t)}},{key:"getResourceBundle",value:function(e,t){return t||(t=this.options.defaultNS),"v1"===this.options.compatibilityAPI?Object(a.a)({},{},this.getResource(e,t)):this.getResource(e,t)}},{key:"getDataByLanguage",value:function(e){return this.data[e]}},{key:"toJSON",value:function(){return this.data}}]),t}(d),R={processors:{},addPostProcessor:function(e){this.processors[e.name]=e},handle:function(e,t,n,i,a){var o=this;return e.forEach((function(e){o.processors[e]&&(t=o.processors[e].process(t,n,i,a))})),t}},N={},C=function(e){function t(e){var n,i,a,r,c=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object(o.a)(this,t),n=Object(s.a)(this,Object(l.a)(t).call(this)),d.call(Object(u.a)(n)),i=["resourceStore","languageUtils","pluralResolver","interpolator","backendConnector","i18nFormat","utils"],a=e,r=Object(u.a)(n),i.forEach((function(e){a[e]&&(r[e]=a[e])})),n.options=c,void 0===n.options.keySeparator&&(n.options.keySeparator="."),n.logger=h.create("translator"),n}return Object(c.a)(t,e),Object(r.a)(t,[{key:"changeLanguage",value:function(e){e&&(this.language=e)}},{key:"exists",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{interpolation:{}},n=this.resolve(e,t);return n&&void 0!==n.res}},{key:"extractFromKey",value:function(e,t){var n=t.nsSeparator||this.options.nsSeparator;void 0===n&&(n=":");var i=void 0!==t.keySeparator?t.keySeparator:this.options.keySeparator,a=t.ns||this.options.defaultNS;if(n&&e.indexOf(n)>-1){var o=e.split(n);(n!==i||n===i&&this.options.ns.indexOf(o[0])>-1)&&(a=o.shift()),e=o.join(i)}return"string"==typeof a&&(a=[a]),{key:e,namespaces:a}}},{key:"translate",value:function(e,t){var n=this;if("object"!==Object(i.a)(t)&&this.options.overloadTranslationOptionHandler&&(t=this.options.overloadTranslationOptionHandler(arguments)),t||(t={}),null==e)return"";Array.isArray(e)||(e=[String(e)]);var o=void 0!==t.keySeparator?t.keySeparator:this.options.keySeparator,r=this.extractFromKey(e[e.length-1],t),s=r.key,l=r.namespaces,u=l[l.length-1],c=t.lng||this.language,g=t.appendNamespaceToCIMode||this.options.appendNamespaceToCIMode;if(c&&"cimode"===c.toLowerCase()){if(g){var f=t.nsSeparator||this.options.nsSeparator;return u+f+s}return s}var p=this.resolve(e,t),h=p&&p.res,d=p&&p.usedKey||s,v=p&&p.exactUsedKey||s,y=Object.prototype.toString.apply(h),b=["[object Number]","[object Function]","[object RegExp]"],m=void 0!==t.joinArrays?t.joinArrays:this.options.joinArrays,k=!this.i18nFormat||this.i18nFormat.handleAsObject,x="string"!=typeof h&&"boolean"!=typeof h&&"number"!=typeof h;if(k&&h&&x&&b.indexOf(y)<0&&("string"!=typeof m||"[object Array]"!==y)){if(!t.returnObjects&&!this.options.returnObjects)return this.logger.warn("accessing an object - but returnObjects options is not enabled!"),this.options.returnedObjectHandler?this.options.returnedObjectHandler(d,h,t):"key '".concat(s," (").concat(this.language,")' returned an object instead of string.");if(o){var O="[object Array]"===y,j=O?[]:{},w=O?v:d;for(var S in h)if(Object.prototype.hasOwnProperty.call(h,S)){var L="".concat(w).concat(o).concat(S);j[S]=this.translate(L,Object(a.a)({},t,{joinArrays:!1,ns:l})),j[S]===L&&(j[S]=h[S])}h=j}}else if(k&&"string"==typeof m&&"[object Array]"===y)(h=h.join(m))&&(h=this.extendTranslation(h,e,t));else{var R=!1,N=!1;if(!this.isValidLookup(h)&&void 0!==t.defaultValue){if(R=!0,void 0!==t.count){var C=this.pluralResolver.getSuffix(c,t.count);h=t["defaultValue".concat(C)]}h||(h=t.defaultValue)}this.isValidLookup(h)||(N=!0,h=s);var P=t.defaultValue&&t.defaultValue!==h&&this.options.updateMissing;if(N||R||P){this.logger.log(P?"updateKey":"missingKey",c,u,s,P?t.defaultValue:h);var E=[],F=this.languageUtils.getFallbackCodes(this.options.fallbackLng,t.lng||this.language);if("fallback"===this.options.saveMissingTo&&F&&F[0])for(var V=0;V<F.length;V++)E.push(F[V]);else"all"===this.options.saveMissingTo?E=this.languageUtils.toResolveHierarchy(t.lng||this.language):E.push(t.lng||this.language);var T=function(e,i){n.options.missingKeyHandler?n.options.missingKeyHandler(e,u,i,P?t.defaultValue:h,P,t):n.backendConnector&&n.backendConnector.saveMissing&&n.backendConnector.saveMissing(e,u,i,P?t.defaultValue:h,P,t),n.emit("missingKey",e,u,i,h)};if(this.options.saveMissing){var A=void 0!==t.count&&"string"!=typeof t.count;this.options.saveMissingPlurals&&A?E.forEach((function(e){n.pluralResolver.getPluralFormsOfKey(e,s).forEach((function(t){return T([e],t)}))})):T(E,s)}}h=this.extendTranslation(h,e,t,p),N&&h===s&&this.options.appendNamespaceToMissingKey&&(h="".concat(u,":").concat(s)),N&&this.options.parseMissingKeyHandler&&(h=this.options.parseMissingKeyHandler(h))}return h}},{key:"extendTranslation",value:function(e,t,n,i){var o=this;if(this.i18nFormat&&this.i18nFormat.parse)e=this.i18nFormat.parse(e,n,i.usedLng,i.usedNS,i.usedKey,{resolved:i});else if(!n.skipInterpolation){n.interpolation&&this.interpolator.init(Object(a.a)({},n,{interpolation:Object(a.a)({},this.options.interpolation,n.interpolation)}));var r=n.replace&&"string"!=typeof n.replace?n.replace:n;this.options.interpolation.defaultVariables&&(r=Object(a.a)({},this.options.interpolation.defaultVariables,r)),e=this.interpolator.interpolate(e,r,n.lng||this.language,n),!1!==n.nest&&(e=this.interpolator.nest(e,(function(){return o.translate.apply(o,arguments)}),n)),n.interpolation&&this.interpolator.reset()}var s=n.postProcess||this.options.postProcess,l="string"==typeof s?[s]:s;return null!=e&&l&&l.length&&!1!==n.applyPostProcessor&&(e=R.handle(l,e,t,this.options&&this.options.postProcessPassResolved?Object(a.a)({i18nResolved:i},n):n,this)),e}},{key:"resolve",value:function(e){var t,n,i,a,o,r=this,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"string"==typeof e&&(e=[e]),e.forEach((function(e){if(!r.isValidLookup(t)){var l=r.extractFromKey(e,s),u=l.key;n=u;var c=l.namespaces;r.options.fallbackNS&&(c=c.concat(r.options.fallbackNS));var g=void 0!==s.count&&"string"!=typeof s.count,f=void 0!==s.context&&"string"==typeof s.context&&""!==s.context,p=s.lngs?s.lngs:r.languageUtils.toResolveHierarchy(s.lng||r.language,s.fallbackLng);c.forEach((function(e){r.isValidLookup(t)||(o=e,!N["".concat(p[0],"-").concat(e)]&&r.utils&&r.utils.hasLoadedNamespace&&!r.utils.hasLoadedNamespace(o)&&(N["".concat(p[0],"-").concat(e)]=!0,r.logger.warn('key "'.concat(n,'" for namespace "').concat(o,'" for languages "').concat(p.join(", "),"\" won't get resolved as namespace was not yet loaded"),"This means something IS WRONG in your application setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!")),p.forEach((function(n){if(!r.isValidLookup(t)){a=n;var o,l,c=u,p=[c];if(r.i18nFormat&&r.i18nFormat.addLookupKeys)r.i18nFormat.addLookupKeys(p,u,n,e,s);else g&&(o=r.pluralResolver.getSuffix(n,s.count)),g&&f&&p.push(c+o),f&&p.push(c+="".concat(r.options.contextSeparator).concat(s.context)),g&&p.push(c+=o);for(;l=p.pop();)r.isValidLookup(t)||(i=l,t=r.getResource(n,e,l,s))}})))}))}})),{res:t,usedKey:n,exactUsedKey:i,usedLng:a,usedNS:o}}},{key:"isValidLookup",value:function(e){return!(void 0===e||!this.options.returnNull&&null===e||!this.options.returnEmptyString&&""===e)}},{key:"getResource",value:function(e,t,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return this.i18nFormat&&this.i18nFormat.getResource?this.i18nFormat.getResource(e,t,n,i):this.resourceStore.getResource(e,t,n,i)}}]),t}(d);function P(e){return e.charAt(0).toUpperCase()+e.slice(1)}var E=function(){function e(t){Object(o.a)(this,e),this.options=t,this.whitelist=this.options.whitelist||!1,this.logger=h.create("languageUtils")}return Object(r.a)(e,[{key:"getScriptPartFromCode",value:function(e){if(!e||e.indexOf("-")<0)return null;var t=e.split("-");return 2===t.length?null:(t.pop(),this.formatLanguageCode(t.join("-")))}},{key:"getLanguagePartFromCode",value:function(e){if(!e||e.indexOf("-")<0)return e;var t=e.split("-");return this.formatLanguageCode(t[0])}},{key:"formatLanguageCode",value:function(e){if("string"==typeof e&&e.indexOf("-")>-1){var t=["hans","hant","latn","cyrl","cans","mong","arab"],n=e.split("-");return this.options.lowerCaseLng?n=n.map((function(e){return e.toLowerCase()})):2===n.length?(n[0]=n[0].toLowerCase(),n[1]=n[1].toUpperCase(),t.indexOf(n[1].toLowerCase())>-1&&(n[1]=P(n[1].toLowerCase()))):3===n.length&&(n[0]=n[0].toLowerCase(),2===n[1].length&&(n[1]=n[1].toUpperCase()),"sgn"!==n[0]&&2===n[2].length&&(n[2]=n[2].toUpperCase()),t.indexOf(n[1].toLowerCase())>-1&&(n[1]=P(n[1].toLowerCase())),t.indexOf(n[2].toLowerCase())>-1&&(n[2]=P(n[2].toLowerCase()))),n.join("-")}return this.options.cleanCode||this.options.lowerCaseLng?e.toLowerCase():e}},{key:"isWhitelisted",value:function(e){return("languageOnly"===this.options.load||this.options.nonExplicitWhitelist)&&(e=this.getLanguagePartFromCode(e)),!this.whitelist||!this.whitelist.length||this.whitelist.indexOf(e)>-1}},{key:"getFallbackCodes",value:function(e,t){if(!e)return[];if("string"==typeof e&&(e=[e]),"[object Array]"===Object.prototype.toString.apply(e))return e;if(!t)return e.default||[];var n=e[t];return n||(n=e[this.getScriptPartFromCode(t)]),n||(n=e[this.formatLanguageCode(t)]),n||(n=e.default),n||[]}},{key:"toResolveHierarchy",value:function(e,t){var n=this,i=this.getFallbackCodes(t||this.options.fallbackLng||[],e),a=[],o=function(e){e&&(n.isWhitelisted(e)?a.push(e):n.logger.warn("rejecting non-whitelisted language code: ".concat(e)))};return"string"==typeof e&&e.indexOf("-")>-1?("languageOnly"!==this.options.load&&o(this.formatLanguageCode(e)),"languageOnly"!==this.options.load&&"currentOnly"!==this.options.load&&o(this.getScriptPartFromCode(e)),"currentOnly"!==this.options.load&&o(this.getLanguagePartFromCode(e))):"string"==typeof e&&o(this.formatLanguageCode(e)),i.forEach((function(e){a.indexOf(e)<0&&o(n.formatLanguageCode(e))})),a}}]),e}(),F=[{lngs:["ach","ak","am","arn","br","fil","gun","ln","mfe","mg","mi","oc","pt","pt-BR","tg","ti","tr","uz","wa"],nr:[1,2],fc:1},{lngs:["af","an","ast","az","bg","bn","ca","da","de","dev","el","en","eo","es","et","eu","fi","fo","fur","fy","gl","gu","ha","hi","hu","hy","ia","it","kn","ku","lb","mai","ml","mn","mr","nah","nap","nb","ne","nl","nn","no","nso","pa","pap","pms","ps","pt-PT","rm","sco","se","si","so","son","sq","sv","sw","ta","te","tk","ur","yo"],nr:[1,2],fc:2},{lngs:["ay","bo","cgg","fa","id","ja","jbo","ka","kk","km","ko","ky","lo","ms","sah","su","th","tt","ug","vi","wo","zh"],nr:[1],fc:3},{lngs:["be","bs","cnr","dz","hr","ru","sr","uk"],nr:[1,2,5],fc:4},{lngs:["ar"],nr:[0,1,2,3,11,100],fc:5},{lngs:["cs","sk"],nr:[1,2,5],fc:6},{lngs:["csb","pl"],nr:[1,2,5],fc:7},{lngs:["cy"],nr:[1,2,3,8],fc:8},{lngs:["fr"],nr:[1,2],fc:9},{lngs:["ga"],nr:[1,2,3,7,11],fc:10},{lngs:["gd"],nr:[1,2,3,20],fc:11},{lngs:["is"],nr:[1,2],fc:12},{lngs:["jv"],nr:[0,1],fc:13},{lngs:["kw"],nr:[1,2,3,4],fc:14},{lngs:["lt"],nr:[1,2,10],fc:15},{lngs:["lv"],nr:[1,2,0],fc:16},{lngs:["mk"],nr:[1,2],fc:17},{lngs:["mnk"],nr:[0,1,2],fc:18},{lngs:["mt"],nr:[1,2,11,20],fc:19},{lngs:["or"],nr:[2,1],fc:2},{lngs:["ro"],nr:[1,2,20],fc:20},{lngs:["sl"],nr:[5,1,2,3],fc:21},{lngs:["he"],nr:[1,2,20,21],fc:22}],V={1:function(e){return Number(e>1)},2:function(e){return Number(1!=e)},3:function(e){return 0},4:function(e){return Number(e%10==1&&e%100!=11?0:e%10>=2&&e%10<=4&&(e%100<10||e%100>=20)?1:2)},5:function(e){return Number(0===e?0:1==e?1:2==e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5)},6:function(e){return Number(1==e?0:e>=2&&e<=4?1:2)},7:function(e){return Number(1==e?0:e%10>=2&&e%10<=4&&(e%100<10||e%100>=20)?1:2)},8:function(e){return Number(1==e?0:2==e?1:8!=e&&11!=e?2:3)},9:function(e){return Number(e>=2)},10:function(e){return Number(1==e?0:2==e?1:e<7?2:e<11?3:4)},11:function(e){return Number(1==e||11==e?0:2==e||12==e?1:e>2&&e<20?2:3)},12:function(e){return Number(e%10!=1||e%100==11)},13:function(e){return Number(0!==e)},14:function(e){return Number(1==e?0:2==e?1:3==e?2:3)},15:function(e){return Number(e%10==1&&e%100!=11?0:e%10>=2&&(e%100<10||e%100>=20)?1:2)},16:function(e){return Number(e%10==1&&e%100!=11?0:0!==e?1:2)},17:function(e){return Number(1==e||e%10==1?0:1)},18:function(e){return Number(0==e?0:1==e?1:2)},19:function(e){return Number(1==e?0:0===e||e%100>1&&e%100<11?1:e%100>10&&e%100<20?2:3)},20:function(e){return Number(1==e?0:0===e||e%100>0&&e%100<20?1:2)},21:function(e){return Number(e%100==1?1:e%100==2?2:e%100==3||e%100==4?3:0)},22:function(e){return Number(1===e?0:2===e?1:(e<0||e>10)&&e%10==0?2:3)}};var T=function(){function e(t){var n,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Object(o.a)(this,e),this.languageUtils=t,this.options=i,this.logger=h.create("pluralResolver"),this.rules=(n={},F.forEach((function(e){e.lngs.forEach((function(t){n[t]={numbers:e.nr,plurals:V[e.fc]}}))})),n)}return Object(r.a)(e,[{key:"addRule",value:function(e,t){this.rules[e]=t}},{key:"getRule",value:function(e){return this.rules[e]||this.rules[this.languageUtils.getLanguagePartFromCode(e)]}},{key:"needsPlural",value:function(e){var t=this.getRule(e);return t&&t.numbers.length>1}},{key:"getPluralFormsOfKey",value:function(e,t){var n=this,i=[],a=this.getRule(e);return a?(a.numbers.forEach((function(a){var o=n.getSuffix(e,a);i.push("".concat(t).concat(o))})),i):i}},{key:"getSuffix",value:function(e,t){var n=this,i=this.getRule(e);if(i){var a=i.noAbs?i.plurals(t):i.plurals(Math.abs(t)),o=i.numbers[a];this.options.simplifyPluralSuffix&&2===i.numbers.length&&1===i.numbers[0]&&(2===o?o="plural":1===o&&(o=""));var r=function(){return n.options.prepend&&o.toString()?n.options.prepend+o.toString():o.toString()};return"v1"===this.options.compatibilityJSON?1===o?"":"number"==typeof o?"_plural_".concat(o.toString()):r():"v2"===this.options.compatibilityJSON?r():this.options.simplifyPluralSuffix&&2===i.numbers.length&&1===i.numbers[0]?r():this.options.prepend&&a.toString()?this.options.prepend+a.toString():a.toString()}return this.logger.warn("no plural rule found for: ".concat(e)),""}}]),e}(),A=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Object(o.a)(this,e),this.logger=h.create("interpolator"),this.options=t,this.format=t.interpolation&&t.interpolation.format||function(e){return e},this.init(t)}return Object(r.a)(e,[{key:"init",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};e.interpolation||(e.interpolation={escapeValue:!0});var t=e.interpolation;this.escape=void 0!==t.escape?t.escape:S,this.escapeValue=void 0===t.escapeValue||t.escapeValue,this.useRawValueToEscape=void 0!==t.useRawValueToEscape&&t.useRawValueToEscape,this.prefix=t.prefix?j(t.prefix):t.prefixEscaped||"{{",this.suffix=t.suffix?j(t.suffix):t.suffixEscaped||"}}",this.formatSeparator=t.formatSeparator?t.formatSeparator:t.formatSeparator||",",this.unescapePrefix=t.unescapeSuffix?"":t.unescapePrefix||"-",this.unescapeSuffix=this.unescapePrefix?"":t.unescapeSuffix||"",this.nestingPrefix=t.nestingPrefix?j(t.nestingPrefix):t.nestingPrefixEscaped||j("$t("),this.nestingSuffix=t.nestingSuffix?j(t.nestingSuffix):t.nestingSuffixEscaped||j(")"),this.maxReplaces=t.maxReplaces?t.maxReplaces:1e3,this.resetRegExp()}},{key:"reset",value:function(){this.options&&this.init(this.options)}},{key:"resetRegExp",value:function(){var e="".concat(this.prefix,"(.+?)").concat(this.suffix);this.regexp=new RegExp(e,"g");var t="".concat(this.prefix).concat(this.unescapePrefix,"(.+?)").concat(this.unescapeSuffix).concat(this.suffix);this.regexpUnescape=new RegExp(t,"g");var n="".concat(this.nestingPrefix,"(.+?)").concat(this.nestingSuffix);this.nestingRegexp=new RegExp(n,"g")}},{key:"interpolate",value:function(e,t,n,i){var a,o,r,s=this,l=this.options&&this.options.interpolation&&this.options.interpolation.defaultVariables||{};function u(e){return e.replace(/\$/g,"$$$$")}var c=function(e){if(e.indexOf(s.formatSeparator)<0)return x(t,l,e);var i=e.split(s.formatSeparator),a=i.shift().trim(),o=i.join(s.formatSeparator).trim();return s.format(x(t,l,a),o,n)};this.resetRegExp();var g=i&&i.missingInterpolationHandler||this.options.missingInterpolationHandler;for(r=0;a=this.regexpUnescape.exec(e);){if(void 0===(o=c(a[1].trim())))if("function"==typeof g){var f=g(e,a,i);o="string"==typeof f?f:""}else this.logger.warn("missed to pass in variable ".concat(a[1]," for interpolating ").concat(e)),o="";else"string"==typeof o||this.useRawValueToEscape||(o=y(o));if(e=e.replace(a[0],u(o)),this.regexpUnescape.lastIndex=0,++r>=this.maxReplaces)break}for(r=0;a=this.regexp.exec(e);){if(void 0===(o=c(a[1].trim())))if("function"==typeof g){var p=g(e,a,i);o="string"==typeof p?p:""}else this.logger.warn("missed to pass in variable ".concat(a[1]," for interpolating ").concat(e)),o="";else"string"==typeof o||this.useRawValueToEscape||(o=y(o));if(o=this.escapeValue?u(this.escape(o)):u(o),e=e.replace(a[0],o),this.regexp.lastIndex=0,++r>=this.maxReplaces)break}return e}},{key:"nest",value:function(e,t){var n,i,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=Object(a.a)({},o);function s(e,t){if(e.indexOf(",")<0)return e;var n=e.split(",");e=n.shift();var i=n.join(",");i=(i=this.interpolate(i,r)).replace(/'/g,'"');try{r=JSON.parse(i),t&&(r=Object(a.a)({},t,r))}catch(t){this.logger.error("failed parsing options string in nesting for key ".concat(e),t)}return delete r.defaultValue,e}for(r.applyPostProcessor=!1,delete r.defaultValue;n=this.nestingRegexp.exec(e);){if((i=t(s.call(this,n[1].trim(),r),r))&&n[0]===e&&"string"!=typeof i)return i;"string"!=typeof i&&(i=y(i)),i||(this.logger.warn("missed to resolve ".concat(n[1]," for nesting ").concat(e)),i=""),e=e.replace(n[0],i),this.regexp.lastIndex=0}return e}}]),e}();var U=function(e){function t(e,n,i){var a,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return Object(o.a)(this,t),a=Object(s.a)(this,Object(l.a)(t).call(this)),d.call(Object(u.a)(a)),a.backend=e,a.store=n,a.services=i,a.languageUtils=i.languageUtils,a.options=r,a.logger=h.create("backendConnector"),a.state={},a.queue=[],a.backend&&a.backend.init&&a.backend.init(i,r.backend,r),a}return Object(c.a)(t,e),Object(r.a)(t,[{key:"queueLoad",value:function(e,t,n,i){var a=this,o=[],r=[],s=[],l=[];return e.forEach((function(e){var i=!0;t.forEach((function(t){var s="".concat(e,"|").concat(t);!n.reload&&a.store.hasResourceBundle(e,t)?a.state[s]=2:a.state[s]<0||(1===a.state[s]?r.indexOf(s)<0&&r.push(s):(a.state[s]=1,i=!1,r.indexOf(s)<0&&r.push(s),o.indexOf(s)<0&&o.push(s),l.indexOf(t)<0&&l.push(t)))})),i||s.push(e)})),(o.length||r.length)&&this.queue.push({pending:r,loaded:{},errors:[],callback:i}),{toLoad:o,pending:r,toLoadLanguages:s,toLoadNamespaces:l}}},{key:"loaded",value:function(e,t,n){var i=e.split("|"),a=Object(f.a)(i,2),o=a[0],r=a[1];t&&this.emit("failedLoading",o,r,t),n&&this.store.addResourceBundle(o,r,n),this.state[e]=t?-1:2;var s={};this.queue.forEach((function(n){var i,a,l,u,c,g;i=n.loaded,a=r,u=b(i,[o],Object),c=u.obj,g=u.k,c[g]=c[g]||[],l&&(c[g]=c[g].concat(a)),l||c[g].push(a),function(e,t){for(var n=e.indexOf(t);-1!==n;)e.splice(n,1),n=e.indexOf(t)}(n.pending,e),t&&n.errors.push(t),0!==n.pending.length||n.done||(Object.keys(n.loaded).forEach((function(e){s[e]||(s[e]=[]),n.loaded[e].length&&n.loaded[e].forEach((function(t){s[e].indexOf(t)<0&&s[e].push(t)}))})),n.done=!0,n.errors.length?n.callback(n.errors):n.callback())})),this.emit("loaded",s),this.queue=this.queue.filter((function(e){return!e.done}))}},{key:"read",value:function(e,t,n){var i=this,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:250,r=arguments.length>5?arguments[5]:void 0;return e.length?this.backend[n](e,t,(function(s,l){s&&l&&a<5?setTimeout((function(){i.read.call(i,e,t,n,a+1,2*o,r)}),o):r(s,l)})):r(null,{})}},{key:"prepareLoading",value:function(e,t){var n=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=arguments.length>3?arguments[3]:void 0;if(!this.backend)return this.logger.warn("No backend was added via i18next.use. Will not load resources."),a&&a();"string"==typeof e&&(e=this.languageUtils.toResolveHierarchy(e)),"string"==typeof t&&(t=[t]);var o=this.queueLoad(e,t,i,a);if(!o.toLoad.length)return o.pending.length||a(),null;o.toLoad.forEach((function(e){n.loadOne(e)}))}},{key:"load",value:function(e,t,n){this.prepareLoading(e,t,{},n)}},{key:"reload",value:function(e,t,n){this.prepareLoading(e,t,{reload:!0},n)}},{key:"loadOne",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",i=e.split("|"),a=Object(f.a)(i,2),o=a[0],r=a[1];this.read(o,r,"read",null,null,(function(i,a){i&&t.logger.warn("".concat(n,"loading namespace ").concat(r," for language ").concat(o," failed"),i),!i&&a&&t.logger.log("".concat(n,"loaded namespace ").concat(r," for language ").concat(o),a),t.loaded(e,i,a)}))}},{key:"saveMissing",value:function(e,t,n,i,o){var r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{};this.services.utils&&this.services.utils.hasLoadedNamespace&&!this.services.utils.hasLoadedNamespace(t)?this.logger.warn('did not save key "'.concat(n,'" for namespace "').concat(t,'" as the namespace was not yet loaded'),"This means something IS WRONG in your application setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!"):(this.backend&&this.backend.create&&this.backend.create(e,t,n,i,null,Object(a.a)({},r,{isUpdate:o})),e&&e[0]&&this.store.addResource(e[0],t,n,i))}}]),t}(d);function H(){return{debug:!1,initImmediate:!0,ns:["translation"],defaultNS:["translation"],fallbackLng:["dev"],fallbackNS:!1,whitelist:!1,nonExplicitWhitelist:!1,load:"all",preload:!1,simplifyPluralSuffix:!0,keySeparator:".",nsSeparator:":",pluralSeparator:"_",contextSeparator:"_",partialBundledLanguages:!1,saveMissing:!1,updateMissing:!1,saveMissingTo:"fallback",saveMissingPlurals:!0,missingKeyHandler:!1,missingInterpolationHandler:!1,postProcess:!1,postProcessPassResolved:!1,returnNull:!0,returnEmptyString:!0,returnObjects:!1,joinArrays:!1,returnedObjectHandler:!1,parseMissingKeyHandler:!1,appendNamespaceToMissingKey:!1,appendNamespaceToCIMode:!1,overloadTranslationOptionHandler:function(e){var t={};if("object"===Object(i.a)(e[1])&&(t=e[1]),"string"==typeof e[1]&&(t.defaultValue=e[1]),"string"==typeof e[2]&&(t.tDescription=e[2]),"object"===Object(i.a)(e[2])||"object"===Object(i.a)(e[3])){var n=e[3]||e[2];Object.keys(n).forEach((function(e){t[e]=n[e]}))}return t},interpolation:{escapeValue:!0,format:function(e,t,n){return e},prefix:"{{",suffix:"}}",formatSeparator:",",unescapePrefix:"-",nestingPrefix:"$t(",nestingSuffix:")",maxReplaces:1e3}}}function K(e){return"string"==typeof e.ns&&(e.ns=[e.ns]),"string"==typeof e.fallbackLng&&(e.fallbackLng=[e.fallbackLng]),"string"==typeof e.fallbackNS&&(e.fallbackNS=[e.fallbackNS]),e.whitelist&&e.whitelist.indexOf("cimode")<0&&(e.whitelist=e.whitelist.concat(["cimode"])),e}function I(){}var D=new(function(e){function t(){var e,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},i=arguments.length>1?arguments[1]:void 0;if(Object(o.a)(this,t),e=Object(s.a)(this,Object(l.a)(t).call(this)),d.call(Object(u.a)(e)),e.options=K(n),e.services={},e.logger=h,e.modules={external:[]},i&&!e.isInitialized&&!n.isClone){if(!e.options.initImmediate)return e.init(n,i),Object(s.a)(e,Object(u.a)(e));setTimeout((function(){e.init(n,i)}),0)}return e}return Object(c.a)(t,e),Object(r.a)(t,[{key:"init",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;function i(e){return e?"function"==typeof e?new e:e:null}if("function"==typeof t&&(n=t,t={}),this.options=Object(a.a)({},H(),this.options,K(t)),this.format=this.options.interpolation.format,n||(n=I),!this.options.isClone){this.modules.logger?h.init(i(this.modules.logger),this.options):h.init(null,this.options);var o=new E(this.options);this.store=new L(this.options.resources,this.options);var r=this.services;r.logger=h,r.resourceStore=this.store,r.languageUtils=o,r.pluralResolver=new T(o,{prepend:this.options.pluralSeparator,compatibilityJSON:this.options.compatibilityJSON,simplifyPluralSuffix:this.options.simplifyPluralSuffix}),r.interpolator=new A(this.options),r.utils={hasLoadedNamespace:this.hasLoadedNamespace.bind(this)},r.backendConnector=new U(i(this.modules.backend),r.resourceStore,r,this.options),r.backendConnector.on("*",(function(t){for(var n=arguments.length,i=new Array(n>1?n-1:0),a=1;a<n;a++)i[a-1]=arguments[a];e.emit.apply(e,[t].concat(i))})),this.modules.languageDetector&&(r.languageDetector=i(this.modules.languageDetector),r.languageDetector.init(r,this.options.detection,this.options)),this.modules.i18nFormat&&(r.i18nFormat=i(this.modules.i18nFormat),r.i18nFormat.init&&r.i18nFormat.init(this)),this.translator=new C(this.services,this.options),this.translator.on("*",(function(t){for(var n=arguments.length,i=new Array(n>1?n-1:0),a=1;a<n;a++)i[a-1]=arguments[a];e.emit.apply(e,[t].concat(i))})),this.modules.external.forEach((function(t){t.init&&t.init(e)}))}var s=["getResource","addResource","addResources","addResourceBundle","removeResourceBundle","hasResourceBundle","getResourceBundle","getDataByLanguage"];s.forEach((function(t){e[t]=function(){var n;return(n=e.store)[t].apply(n,arguments)}}));var l=v(),u=function(){e.changeLanguage(e.options.lng,(function(t,i){e.isInitialized=!0,e.logger.log("initialized",e.options),e.emit("initialized",e.options),l.resolve(i),n(t,i)}))};return this.options.resources||!this.options.initImmediate?u():setTimeout(u,0),l}},{key:"loadResources",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:I,i=n,a="string"==typeof e?e:this.language;if("function"==typeof e&&(i=e),!this.options.resources||this.options.partialBundledLanguages){if(a&&"cimode"===a.toLowerCase())return i();var o=[],r=function(e){e&&t.services.languageUtils.toResolveHierarchy(e).forEach((function(e){o.indexOf(e)<0&&o.push(e)}))};if(a)r(a);else{var s=this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);s.forEach((function(e){return r(e)}))}this.options.preload&&this.options.preload.forEach((function(e){return r(e)})),this.services.backendConnector.load(o,this.options.ns,i)}else i(null)}},{key:"reloadResources",value:function(e,t,n){var i=v();return e||(e=this.languages),t||(t=this.options.ns),n||(n=I),this.services.backendConnector.reload(e,t,(function(e){i.resolve(),n(e)})),i}},{key:"use",value:function(e){return"backend"===e.type&&(this.modules.backend=e),("logger"===e.type||e.log&&e.warn&&e.error)&&(this.modules.logger=e),"languageDetector"===e.type&&(this.modules.languageDetector=e),"i18nFormat"===e.type&&(this.modules.i18nFormat=e),"postProcessor"===e.type&&R.addPostProcessor(e),"3rdParty"===e.type&&this.modules.external.push(e),this}},{key:"changeLanguage",value:function(e,t){var n=this;this.isLanguageChangingTo=e;var i=v();this.emit("languageChanging",e);var a=function(e){e&&(n.language||(n.language=e,n.languages=n.services.languageUtils.toResolveHierarchy(e)),n.translator.language||n.translator.changeLanguage(e),n.services.languageDetector&&n.services.languageDetector.cacheUserLanguage(e)),n.loadResources(e,(function(a){!function(e,a){a?(n.language=a,n.languages=n.services.languageUtils.toResolveHierarchy(a),n.translator.changeLanguage(a),n.isLanguageChangingTo=void 0,n.emit("languageChanged",a),n.logger.log("languageChanged",a)):n.isLanguageChangingTo=void 0,i.resolve((function(){return n.t.apply(n,arguments)})),t&&t(e,(function(){return n.t.apply(n,arguments)}))}(a,e)}))};return e||!this.services.languageDetector||this.services.languageDetector.async?!e&&this.services.languageDetector&&this.services.languageDetector.async?this.services.languageDetector.detect(a):a(e):a(this.services.languageDetector.detect()),i}},{key:"getFixedT",value:function(e,t){var n=this,o=function e(t,o){var r;if("object"!==Object(i.a)(o)){for(var s=arguments.length,l=new Array(s>2?s-2:0),u=2;u<s;u++)l[u-2]=arguments[u];r=n.options.overloadTranslationOptionHandler([t,o].concat(l))}else r=Object(a.a)({},o);return r.lng=r.lng||e.lng,r.lngs=r.lngs||e.lngs,r.ns=r.ns||e.ns,n.t(t,r)};return"string"==typeof e?o.lng=e:o.lngs=e,o.ns=t,o}},{key:"t",value:function(){var e;return this.translator&&(e=this.translator).translate.apply(e,arguments)}},{key:"exists",value:function(){var e;return this.translator&&(e=this.translator).exists.apply(e,arguments)}},{key:"setDefaultNamespace",value:function(e){this.options.defaultNS=e}},{key:"hasLoadedNamespace",value:function(e){var t=this;if(!this.isInitialized)return this.logger.warn("hasLoadedNamespace: i18next was not initialized",this.languages),!1;if(!this.languages||!this.languages.length)return this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty",this.languages),!1;var n=this.languages[0],i=!!this.options&&this.options.fallbackLng,a=this.languages[this.languages.length-1];if("cimode"===n.toLowerCase())return!0;var o=function(e,n){var i=t.services.backendConnector.state["".concat(e,"|").concat(n)];return-1===i||2===i};return!!this.hasResourceBundle(n,e)||(!this.services.backendConnector.backend||!(!o(n,e)||i&&!o(a,e)))}},{key:"loadNamespaces",value:function(e,t){var n=this,i=v();return this.options.ns?("string"==typeof e&&(e=[e]),e.forEach((function(e){n.options.ns.indexOf(e)<0&&n.options.ns.push(e)})),this.loadResources((function(e){i.resolve(),t&&t(e)})),i):(t&&t(),Promise.resolve())}},{key:"loadLanguages",value:function(e,t){var n=v();"string"==typeof e&&(e=[e]);var i=this.options.preload||[],a=e.filter((function(e){return i.indexOf(e)<0}));return a.length?(this.options.preload=i.concat(a),this.loadResources((function(e){n.resolve(),t&&t(e)})),n):(t&&t(),Promise.resolve())}},{key:"dir",value:function(e){if(e||(e=this.languages&&this.languages.length>0?this.languages[0]:this.language),!e)return"rtl";return["ar","shu","sqr","ssh","xaa","yhd","yud","aao","abh","abv","acm","acq","acw","acx","acy","adf","ads","aeb","aec","afb","ajp","apc","apd","arb","arq","ars","ary","arz","auz","avl","ayh","ayl","ayn","ayp","bbz","pga","he","iw","ps","pbt","pbu","pst","prp","prd","ur","ydd","yds","yih","ji","yi","hbo","men","xmn","fa","jpr","peo","pes","prs","dv","sam"].indexOf(this.services.languageUtils.getLanguagePartFromCode(e))>=0?"rtl":"ltr"}},{key:"createInstance",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;return new t(e,n)}},{key:"cloneInstance",value:function(){var e=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:I,o=Object(a.a)({},this.options,n,{isClone:!0}),r=new t(o),s=["store","services","language"];return s.forEach((function(t){r[t]=e[t]})),r.translator=new C(r.services,r.options),r.translator.on("*",(function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];r.emit.apply(r,[e].concat(n))})),r.init(o,i),r.translator.options=r.options,r}}]),t}(d));t.a=D}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaTE4bmV4dC9kaXN0L2VzbS9pMThuZXh0LmpzIl0sIm5hbWVzIjpbImNvbnNvbGVMb2dnZXIiLCJ0eXBlIiwibG9nIiwiYXJncyIsInRoaXMiLCJvdXRwdXQiLCJ3YXJuIiwiZXJyb3IiLCJfY29uc29sZSIsImNvbnNvbGUiLCJhcHBseSIsImJhc2VMb2dnZXIiLCJMb2dnZXIiLCJjb25jcmV0ZUxvZ2dlciIsIm9wdGlvbnMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJpbml0Iiwia2V5IiwidmFsdWUiLCJwcmVmaXgiLCJsb2dnZXIiLCJkZWJ1ZyIsImJvb2wiLCJfbGVuIiwiQXJyYXkiLCJfa2V5IiwiZm9yd2FyZCIsIl9sZW4yIiwiX2tleTIiLCJfbGVuMyIsIl9rZXkzIiwiX2xlbjQiLCJfa2V5NCIsImx2bCIsImRlYnVnT25seSIsImNvbmNhdCIsIm1vZHVsZU5hbWUiLCJFdmVudEVtaXR0ZXIiLCJvYnNlcnZlcnMiLCJldmVudHMiLCJsaXN0ZW5lciIsIl90aGlzIiwic3BsaXQiLCJmb3JFYWNoIiwiZXZlbnQiLCJwdXNoIiwiZmlsdGVyIiwibCIsImNsb25lZCIsIm9ic2VydmVyIiwiX2Nsb25lZCIsImRlZmVyIiwicmVzIiwicmVqIiwicHJvbWlzZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwibWFrZVN0cmluZyIsIm9iamVjdCIsImdldExhc3RPZlBhdGgiLCJwYXRoIiwiRW1wdHkiLCJjbGVhbktleSIsImluZGV4T2YiLCJyZXBsYWNlIiwiY2FuTm90VHJhdmVyc2VEZWVwZXIiLCJzdGFjayIsInNoaWZ0Iiwib2JqIiwiayIsInNldFBhdGgiLCJuZXdWYWx1ZSIsIl9nZXRMYXN0T2ZQYXRoIiwiT2JqZWN0IiwiZ2V0UGF0aCIsIl9nZXRMYXN0T2ZQYXRoMyIsImdldFBhdGhXaXRoRGVmYXVsdHMiLCJkYXRhIiwiZGVmYXVsdERhdGEiLCJkZWVwRXh0ZW5kIiwidGFyZ2V0Iiwic291cmNlIiwib3ZlcndyaXRlIiwicHJvcCIsIlN0cmluZyIsInJlZ2V4RXNjYXBlIiwic3RyIiwiX2VudGl0eU1hcCIsImVzY2FwZSIsInMiLCJSZXNvdXJjZVN0b3JlIiwiX0V2ZW50RW1pdHRlciIsIm5zIiwiZGVmYXVsdE5TIiwiY2FsbCIsImtleVNlcGFyYXRvciIsImluZGV4Iiwic3BsaWNlIiwibG5nIiwic2lsZW50IiwiYWRkTmFtZXNwYWNlcyIsImVtaXQiLCJyZXNvdXJjZXMiLCJtIiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJhZGRSZXNvdXJjZSIsImRlZXAiLCJwYWNrIiwiaGFzUmVzb3VyY2VCdW5kbGUiLCJyZW1vdmVOYW1lc3BhY2VzIiwiZ2V0UmVzb3VyY2UiLCJjb21wYXRpYmlsaXR5QVBJIiwicG9zdFByb2Nlc3NvciIsInByb2Nlc3NvcnMiLCJhZGRQb3N0UHJvY2Vzc29yIiwibW9kdWxlIiwibmFtZSIsImhhbmRsZSIsInRyYW5zbGF0b3IiLCJwcm9jZXNzb3IiLCJwcm9jZXNzIiwiY2hlY2tlZExvYWRlZEZvciIsIlRyYW5zbGF0b3IiLCJzZXJ2aWNlcyIsImEiLCJ0IiwiY3JlYXRlIiwibGFuZ3VhZ2UiLCJpbnRlcnBvbGF0aW9uIiwicmVzb2x2ZWQiLCJuc1NlcGFyYXRvciIsIm5hbWVzcGFjZXMiLCJwYXJ0cyIsImpvaW4iLCJrZXlzIiwiX3RoaXMyIiwib3ZlcmxvYWRUcmFuc2xhdGlvbk9wdGlvbkhhbmRsZXIiLCJpc0FycmF5IiwiX3RoaXMkZXh0cmFjdEZyb21LZXkiLCJleHRyYWN0RnJvbUtleSIsIm5hbWVzcGFjZSIsImFwcGVuZE5hbWVzcGFjZVRvQ0lNb2RlIiwidG9Mb3dlckNhc2UiLCJyZXNVc2VkS2V5IiwidXNlZEtleSIsInJlc0V4YWN0VXNlZEtleSIsImV4YWN0VXNlZEtleSIsInJlc1R5cGUiLCJub09iamVjdCIsImpvaW5BcnJheXMiLCJoYW5kbGVBc09iamVjdEluSTE4bkZvcm1hdCIsImkxOG5Gb3JtYXQiLCJoYW5kbGVBc09iamVjdCIsInJldHVybk9iamVjdHMiLCJyZXR1cm5lZE9iamVjdEhhbmRsZXIiLCJyZXNUeXBlSXNBcnJheSIsImNvcHkkJDEiLCJuZXdLZXlUb1VzZSIsImhhc093blByb3BlcnR5IiwiZGVlcEtleSIsInRyYW5zbGF0ZSIsImV4dGVuZFRyYW5zbGF0aW9uIiwidXNlZERlZmF1bHQiLCJpc1ZhbGlkTG9va3VwIiwiZGVmYXVsdFZhbHVlIiwiY291bnQiLCJzdWZmaXgiLCJwbHVyYWxSZXNvbHZlciIsImdldFN1ZmZpeCIsInVwZGF0ZU1pc3NpbmciLCJsbmdzIiwiZmFsbGJhY2tMbmdzIiwibGFuZ3VhZ2VVdGlscyIsImdldEZhbGxiYWNrQ29kZXMiLCJmYWxsYmFja0xuZyIsInNhdmVNaXNzaW5nVG8iLCJpIiwidG9SZXNvbHZlSGllcmFyY2h5Iiwic2VuZCIsIm1pc3NpbmdLZXlIYW5kbGVyIiwiYmFja2VuZENvbm5lY3RvciIsInNhdmVNaXNzaW5nIiwibmVlZHNQbHVyYWxIYW5kbGluZyIsInNhdmVNaXNzaW5nUGx1cmFscyIsImdldFBsdXJhbEZvcm1zT2ZLZXkiLCJwIiwiYXBwZW5kTmFtZXNwYWNlVG9NaXNzaW5nS2V5IiwicGFyc2VNaXNzaW5nS2V5SGFuZGxlciIsIl90aGlzMyIsInBhcnNlIiwidXNlZExuZyIsInVzZWROUyIsInNraXBJbnRlcnBvbGF0aW9uIiwiaW50ZXJwb2xhdG9yIiwiZGVmYXVsdFZhcmlhYmxlcyIsImludGVycG9sYXRlIiwibmVzdCIsInJlc2V0IiwicG9zdFByb2Nlc3MiLCJwb3N0UHJvY2Vzc29yTmFtZXMiLCJhcHBseVBvc3RQcm9jZXNzb3IiLCJwb3N0UHJvY2Vzc1Bhc3NSZXNvbHZlZCIsImkxOG5SZXNvbHZlZCIsImZvdW5kIiwiX3RoaXM0IiwiZXh0cmFjdGVkIiwiZmFsbGJhY2tOUyIsIm5lZWRzQ29udGV4dEhhbmRsaW5nIiwiY29udGV4dCIsImNvZGVzIiwidXRpbHMiLCJoYXNMb2FkZWROYW1lc3BhY2UiLCJjb2RlIiwicGx1cmFsU3VmZml4IiwicG9zc2libGVLZXkiLCJmaW5hbEtleSIsImZpbmFsS2V5cyIsImFkZExvb2t1cEtleXMiLCJjb250ZXh0U2VwYXJhdG9yIiwicG9wIiwicmV0dXJuTnVsbCIsInJldHVybkVtcHR5U3RyaW5nIiwicmVzb3VyY2VTdG9yZSIsImNhcGl0YWxpemUiLCJzdHJpbmciLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwiTGFuZ3VhZ2VVdGlsIiwid2hpdGVsaXN0IiwiZm9ybWF0TGFuZ3VhZ2VDb2RlIiwic3BlY2lhbENhc2VzIiwibG93ZXJDYXNlTG5nIiwibWFwIiwicGFydCIsImNsZWFuQ29kZSIsImxvYWQiLCJub25FeHBsaWNpdFdoaXRlbGlzdCIsImdldExhbmd1YWdlUGFydEZyb21Db2RlIiwiZmFsbGJhY2tzIiwiZ2V0U2NyaXB0UGFydEZyb21Db2RlIiwiZmFsbGJhY2tDb2RlIiwiZmFsbGJhY2tDb2RlcyIsImFkZENvZGUiLCJjIiwiaXNXaGl0ZWxpc3RlZCIsImZjIiwic2V0cyIsIm5yIiwiX3J1bGVzUGx1cmFsc1R5cGVzIiwiMSIsIm4iLCJOdW1iZXIiLCIyIiwiMyIsIjQiLCI1IiwiNiIsIjciLCI4IiwiOSIsIjEwIiwiMTEiLCIxMiIsIjEzIiwiMTQiLCIxNSIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyMSIsIjIyIiwiUGx1cmFsUmVzb2x2ZXIiLCJydWxlcyIsInNldCIsIm51bWJlcnMiLCJwbHVyYWxzIiwicnVsZSIsImdldFJ1bGUiLCJyZXQiLCJpZHgiLCJub0FicyIsIk1hdGgiLCJhYnMiLCJzaW1wbGlmeVBsdXJhbFN1ZmZpeCIsInJldHVyblN1ZmZpeCIsInByZXBlbmQiLCJjb21wYXRpYmlsaXR5SlNPTiIsIkludGVycG9sYXRvciIsImZvcm1hdCIsImVzY2FwZVZhbHVlIiwiaU9wdHMiLCJ1c2VSYXdWYWx1ZVRvRXNjYXBlIiwicHJlZml4RXNjYXBlZCIsInN1ZmZpeEVzY2FwZWQiLCJmb3JtYXRTZXBhcmF0b3IiLCJ1bmVzY2FwZVByZWZpeCIsInVuZXNjYXBlU3VmZml4IiwibmVzdGluZ1ByZWZpeCIsIm5lc3RpbmdQcmVmaXhFc2NhcGVkIiwibmVzdGluZ1N1ZmZpeCIsIm5lc3RpbmdTdWZmaXhFc2NhcGVkIiwibWF4UmVwbGFjZXMiLCJyZXNldFJlZ0V4cCIsInJlZ2V4cFN0ciIsInJlZ2V4cCIsIlJlZ0V4cCIsInJlZ2V4cFVuZXNjYXBlU3RyIiwicmVnZXhwVW5lc2NhcGUiLCJuZXN0aW5nUmVnZXhwU3RyIiwibmVzdGluZ1JlZ2V4cCIsIm1hdGNoIiwicmVwbGFjZXMiLCJyZWdleFNhZmUiLCJ2YWwiLCJoYW5kbGVGb3JtYXQiLCJ0cmltIiwiZiIsIm1pc3NpbmdJbnRlcnBvbGF0aW9uSGFuZGxlciIsImV4ZWMiLCJ0ZW1wIiwibGFzdEluZGV4IiwiX3RlbXAiLCJjbG9uZWRPcHRpb25zIiwiaGFuZGxlSGFzT3B0aW9ucyIsImluaGVyaXRlZE9wdGlvbnMiLCJvcHRpb25zU3RyaW5nIiwiSlNPTiIsImUiLCJDb25uZWN0b3IiLCJiYWNrZW5kIiwic3RvcmUiLCJzdGF0ZSIsInF1ZXVlIiwibGFuZ3VhZ2VzIiwiY2FsbGJhY2siLCJ0b0xvYWQiLCJwZW5kaW5nIiwidG9Mb2FkTGFuZ3VhZ2VzIiwidG9Mb2FkTmFtZXNwYWNlcyIsImhhc0FsbE5hbWVzcGFjZXMiLCJyZWxvYWQiLCJsb2FkZWQiLCJlcnJvcnMiLCJlcnIiLCJfbmFtZSRzcGxpdCIsIl9uYW1lJHNwbGl0MiIsImFkZFJlc291cmNlQnVuZGxlIiwicSIsIl9nZXRMYXN0T2ZQYXRoMiIsImFyciIsIndoYXQiLCJyZW1vdmUiLCJkb25lIiwiZmNOYW1lIiwidHJpZWQiLCJ3YWl0Iiwic2V0VGltZW91dCIsInJlYWQiLCJxdWV1ZUxvYWQiLCJsb2FkT25lIiwicHJlcGFyZUxvYWRpbmciLCJfdGhpczUiLCJfbmFtZSRzcGxpdDMiLCJfbmFtZSRzcGxpdDQiLCJmYWxsYmFja1ZhbHVlIiwiaXNVcGRhdGUiLCJnZXQiLCJpbml0SW1tZWRpYXRlIiwicHJlbG9hZCIsInBsdXJhbFNlcGFyYXRvciIsInBhcnRpYWxCdW5kbGVkTGFuZ3VhZ2VzIiwidERlc2NyaXB0aW9uIiwiX2Zvcm1hdCIsInRyYW5zZm9ybU9wdGlvbnMiLCJub29wIiwiaTE4bmV4dCIsIkkxOG4iLCJtb2R1bGVzIiwiZXh0ZXJuYWwiLCJpc0luaXRpYWxpemVkIiwiaXNDbG9uZSIsImNyZWF0ZUNsYXNzT25EZW1hbmQiLCJDbGFzc09yT2JqZWN0IiwibHUiLCJiaW5kIiwib24iLCJsYW5ndWFnZURldGVjdG9yIiwiZGV0ZWN0aW9uIiwic3RvcmVBcGkiLCJfdGhpczIkc3RvcmUiLCJkZWZlcnJlZCIsImNoYW5nZUxhbmd1YWdlIiwidXNlZENhbGxiYWNrIiwiYXBwZW5kIiwiaXNMYW5ndWFnZUNoYW5naW5nVG8iLCJzZXRMbmciLCJjYWNoZVVzZXJMYW5ndWFnZSIsImxvYWRSZXNvdXJjZXMiLCJhc3luYyIsImRldGVjdCIsImZpeGVkVCIsIm9wdHMiLCJyZXN0IiwiX3RoaXMkdHJhbnNsYXRvciIsIl90aGlzJHRyYW5zbGF0b3IyIiwiZXhpc3RzIiwiX3RoaXM2IiwibGFzdExuZyIsImxvYWROb3RQZW5kaW5nIiwibG9hZFN0YXRlIiwiX3RoaXM3IiwicHJlbG9hZGVkIiwibmV3TG5ncyIsIl90aGlzOCIsIm1lcmdlZE9wdGlvbnMiLCJjbG9uZSIsIm1lbWJlcnNUb0NvcHkiXSwibWFwcGluZ3MiOiIwRkFBQSxvRkFXSUEsRUFBZ0IsQ0FDbEJDLEtBQU0sU0FDTkMsSUFBSyxTQUFhQyxHQUNoQkMsS0FBS0MsT0FBTyxNQUFPRixJQUVyQkcsS0FBTSxTQUFjSCxHQUNsQkMsS0FBS0MsT0FBTyxPQUFRRixJQUV0QkksTUFBTyxTQUFlSixHQUNwQkMsS0FBS0MsT0FBTyxRQUFTRixJQUV2QkUsT0FBUSxTQUFnQkosRUFBTUUsR0FDNUIsSUFBSUssRUFHQUMsU0FBV0EsUUFBUVIsS0FBUU8sRUFBV0MsU0FBU1IsR0FBTVMsTUFBTUYsRUFBVSxZQUFtQkwsTUFvRjVGUSxFQUFhLElBOUVqQixXQUNFLFNBQVNDLEVBQU9DLEdBQ2QsSUFBSUMs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LEVBQU8xVCxNQUVwQjRULEVBQU01UyxXQUFhLElBQUlJLEVBQVd3UyxFQUFNdlMsU0FBVXVTLEVBQU14WixTQUN4RHdaLEVBQU01UyxXQUFXOFEsR0FBRyxLQUFLLFNBQVUxVixHQUNqQyxJQUFLLElBQUliLEVBQVFsQixVQUFVQyxPQUFRYixFQUFPLElBQUl1QixNQUFNTyxFQUFRLEVBQUlBLEVBQVEsRUFBSSxHQUFJQyxFQUFRLEVBQUdBLEVBQVFELEVBQU9DLElBQ3hHL0IsRUFBSytCLEVBQVEsR0FBS25CLFVBQVVtQixHQUc5Qm9ZLEVBQU05VCxLQUFLOUYsTUFBTTRaLEVBQU8sQ0FBQ3hYLEdBQU9ULE9BQU9sQyxPQUV6Q21hLEVBQU1wWixLQUFLbVosRUFBZWhGLEdBQzFCaUYsRUFBTTVTLFdBQVc1RyxRQUFVd1osRUFBTXhaLFFBRTFCd1osTUFJSnZDLEVBaGVULENBaWVFeFYsSUFJYSIsImZpbGUiOiJucG0uaTE4bmV4dC4xNDYyOTFiYTlmZGI1NmFiYjFkNy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfdHlwZW9mIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZic7XG5pbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfZ2V0UHJvdG90eXBlT2YgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZ2V0UHJvdG90eXBlT2YnO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHMnO1xuaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheSc7XG5pbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheSc7XG5cbnZhciBjb25zb2xlTG9nZ2VyID0ge1xuICB0eXBlOiAnbG9nZ2VyJyxcbiAgbG9nOiBmdW5jdGlvbiBsb2coYXJncykge1xuICAgIHRoaXMub3V0cHV0KCdsb2cnLCBhcmdzKTtcbiAgfSxcbiAgd2FybjogZnVuY3Rpb24gd2FybihhcmdzKSB7XG4gICAgdGhpcy5vdXRwdXQoJ3dhcm4nLCBhcmdzKTtcbiAgfSxcbiAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKGFyZ3MpIHtcbiAgICB0aGlzLm91dHB1dCgnZXJyb3InLCBhcmdzKTtcbiAgfSxcbiAgb3V0cHV0OiBmdW5jdGlvbiBvdXRwdXQodHlwZSwgYXJncykge1xuICAgIHZhciBfY29uc29sZTtcblxuICAgIC8qIGVzbGludCBuby1jb25zb2xlOiAwICovXG4gICAgaWYgKGNvbnNvbGUgJiYgY29uc29sZVt0eXBlXSkgKF9jb25zb2xlID0gY29uc29sZSlbdHlwZV0uYXBwbHkoX2NvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShhcmdzKSk7XG4gIH1cbn07XG5cbnZhciBMb2dnZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBMb2dnZXIoY29uY3JldGVMb2dnZXIpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9nZ2VyKTtcblxuICAgIHRoaXMuaW5pdChjb25jcmV0ZUxvZ2dlciwgb3B0aW9ucyk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTG9nZ2VyLCBbe1xuICAgIGtleTogXCJpbml0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQoY29uY3JldGVMb2dnZXIpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgIHRoaXMucHJlZml4ID0gb3B0aW9ucy5wcmVmaXggfHwgJ2kxOG5leHQ6JztcbiAgICAgIHRoaXMubG9nZ2VyID0gY29uY3JldGVMb2dnZXIgfHwgY29uc29sZUxvZ2dlcjtcbiAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICB0aGlzLmRlYnVnID0gb3B0aW9ucy5kZWJ1ZztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0RGVidWdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RGVidWcoYm9vbCkge1xuICAgICAgdGhpcy5kZWJ1ZyA9IGJvb2w7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImxvZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2coKSB7XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuZm9yd2FyZChhcmdzLCAnbG9nJywgJycsIHRydWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ3YXJuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHdhcm4oKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5mb3J3YXJkKGFyZ3MsICd3YXJuJywgJycsIHRydWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJlcnJvclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlcnJvcigpIHtcbiAgICAgIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMyksIF9rZXkzID0gMDsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgICAgICBhcmdzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmZvcndhcmQoYXJncywgJ2Vycm9yJywgJycpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJkZXByZWNhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVwcmVjYXRlKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW40KSwgX2tleTQgPSAwOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgICAgIGFyZ3NbX2tleTRdID0gYXJndW1lbnRzW19rZXk0XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuZm9yd2FyZChhcmdzLCAnd2FybicsICdXQVJOSU5HIERFUFJFQ0FURUQ6ICcsIHRydWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmb3J3YXJkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcndhcmQoYXJncywgbHZsLCBwcmVmaXgsIGRlYnVnT25seSkge1xuICAgICAgaWYgKGRlYnVnT25seSAmJiAhdGhpcy5kZWJ1ZykgcmV0dXJuIG51bGw7XG4gICAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnKSBhcmdzWzBdID0gXCJcIi5jb25jYXQocHJlZml4KS5jb25jYXQodGhpcy5wcmVmaXgsIFwiIFwiKS5jb25jYXQoYXJnc1swXSk7XG4gICAgICByZXR1cm4gdGhpcy5sb2dnZXJbbHZsXShhcmdzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY3JlYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZShtb2R1bGVOYW1lKSB7XG4gICAgICByZXR1cm4gbmV3IExvZ2dlcih0aGlzLmxvZ2dlciwgX29iamVjdFNwcmVhZCh7fSwge1xuICAgICAgICBwcmVmaXg6IFwiXCIuY29uY2F0KHRoaXMucHJlZml4LCBcIjpcIikuY29uY2F0KG1vZHVsZU5hbWUsIFwiOlwiKVxuICAgICAgfSwgdGhpcy5vcHRpb25zKSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIExvZ2dlcjtcbn0oKTtcblxudmFyIGJhc2VMb2dnZXIgPSBuZXcgTG9nZ2VyKCk7XG5cbnZhciBFdmVudEVtaXR0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEV2ZW50RW1pdHRlcik7XG5cbiAgICB0aGlzLm9ic2VydmVycyA9IHt9O1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEV2ZW50RW1pdHRlciwgW3tcbiAgICBrZXk6IFwib25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb24oZXZlbnRzLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgZXZlbnRzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgX3RoaXMub2JzZXJ2ZXJzW2V2ZW50XSA9IF90aGlzLm9ic2VydmVyc1tldmVudF0gfHwgW107XG5cbiAgICAgICAgX3RoaXMub2JzZXJ2ZXJzW2V2ZW50XS5wdXNoKGxpc3RlbmVyKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm9mZlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvZmYoZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgICBpZiAoIXRoaXMub2JzZXJ2ZXJzW2V2ZW50XSkgcmV0dXJuO1xuXG4gICAgICBpZiAoIWxpc3RlbmVyKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLm9ic2VydmVyc1tldmVudF07XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5vYnNlcnZlcnNbZXZlbnRdID0gdGhpcy5vYnNlcnZlcnNbZXZlbnRdLmZpbHRlcihmdW5jdGlvbiAobCkge1xuICAgICAgICByZXR1cm4gbCAhPT0gbGlzdGVuZXI7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZW1pdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlbWl0KGV2ZW50KSB7XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vYnNlcnZlcnNbZXZlbnRdKSB7XG4gICAgICAgIHZhciBjbG9uZWQgPSBbXS5jb25jYXQodGhpcy5vYnNlcnZlcnNbZXZlbnRdKTtcbiAgICAgICAgY2xvbmVkLmZvckVhY2goZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgICAgb2JzZXJ2ZXIuYXBwbHkodm9pZCAwLCBhcmdzKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9ic2VydmVyc1snKiddKSB7XG4gICAgICAgIHZhciBfY2xvbmVkID0gW10uY29uY2F0KHRoaXMub2JzZXJ2ZXJzWycqJ10pO1xuXG4gICAgICAgIF9jbG9uZWQuZm9yRWFjaChmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgICBvYnNlcnZlci5hcHBseShvYnNlcnZlciwgW2V2ZW50XS5jb25jYXQoYXJncykpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRXZlbnRFbWl0dGVyO1xufSgpO1xuXG4vLyBodHRwOi8vbGVhLnZlcm91Lm1lLzIwMTYvMTIvcmVzb2x2ZS1wcm9taXNlcy1leHRlcm5hbGx5LXdpdGgtdGhpcy1vbmUtd2VpcmQtdHJpY2svXG5mdW5jdGlvbiBkZWZlcigpIHtcbiAgdmFyIHJlcztcbiAgdmFyIHJlajtcbiAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgcmVzID0gcmVzb2x2ZTtcbiAgICByZWogPSByZWplY3Q7XG4gIH0pO1xuICBwcm9taXNlLnJlc29sdmUgPSByZXM7XG4gIHByb21pc2UucmVqZWN0ID0gcmVqO1xuICByZXR1cm4gcHJvbWlzZTtcbn1cbmZ1bmN0aW9uIG1ha2VTdHJpbmcob2JqZWN0KSB7XG4gIGlmIChvYmplY3QgPT0gbnVsbCkgcmV0dXJuICcnO1xuICAvKiBlc2xpbnQgcHJlZmVyLXRlbXBsYXRlOiAwICovXG5cbiAgcmV0dXJuICcnICsgb2JqZWN0O1xufVxuZnVuY3Rpb24gY29weShhLCBzLCB0KSB7XG4gIGEuZm9yRWFjaChmdW5jdGlvbiAobSkge1xuICAgIGlmIChzW21dKSB0W21dID0gc1ttXTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldExhc3RPZlBhdGgob2JqZWN0LCBwYXRoLCBFbXB0eSkge1xuICBmdW5jdGlvbiBjbGVhbktleShrZXkpIHtcbiAgICByZXR1cm4ga2V5ICYmIGtleS5pbmRleE9mKCcjIyMnKSA+IC0xID8ga2V5LnJlcGxhY2UoLyMjIy9nLCAnLicpIDoga2V5O1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuTm90VHJhdmVyc2VEZWVwZXIoKSB7XG4gICAgcmV0dXJuICFvYmplY3QgfHwgdHlwZW9mIG9iamVjdCA9PT0gJ3N0cmluZyc7XG4gIH1cblxuICB2YXIgc3RhY2sgPSB0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycgPyBbXS5jb25jYXQocGF0aCkgOiBwYXRoLnNwbGl0KCcuJyk7XG5cbiAgd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDEpIHtcbiAgICBpZiAoY2FuTm90VHJhdmVyc2VEZWVwZXIoKSkgcmV0dXJuIHt9O1xuICAgIHZhciBrZXkgPSBjbGVhbktleShzdGFjay5zaGlmdCgpKTtcbiAgICBpZiAoIW9iamVjdFtrZXldICYmIEVtcHR5KSBvYmplY3Rba2V5XSA9IG5ldyBFbXB0eSgpO1xuICAgIG9iamVjdCA9IG9iamVjdFtrZXldO1xuICB9XG5cbiAgaWYgKGNhbk5vdFRyYXZlcnNlRGVlcGVyKCkpIHJldHVybiB7fTtcbiAgcmV0dXJuIHtcbiAgICBvYmo6IG9iamVjdCxcbiAgICBrOiBjbGVhbktleShzdGFjay5zaGlmdCgpKVxuICB9O1xufVxuXG5mdW5jdGlvbiBzZXRQYXRoKG9iamVjdCwgcGF0aCwgbmV3VmFsdWUpIHtcbiAgdmFyIF9nZXRMYXN0T2ZQYXRoID0gZ2V0TGFzdE9mUGF0aChvYmplY3QsIHBhdGgsIE9iamVjdCksXG4gICAgICBvYmogPSBfZ2V0TGFzdE9mUGF0aC5vYmosXG4gICAgICBrID0gX2dldExhc3RPZlBhdGguaztcblxuICBvYmpba10gPSBuZXdWYWx1ZTtcbn1cbmZ1bmN0aW9uIHB1c2hQYXRoKG9iamVjdCwgcGF0aCwgbmV3VmFsdWUsIGNvbmNhdCkge1xuICB2YXIgX2dldExhc3RPZlBhdGgyID0gZ2V0TGFzdE9mUGF0aChvYmplY3QsIHBhdGgsIE9iamVjdCksXG4gICAgICBvYmogPSBfZ2V0TGFzdE9mUGF0aDIub2JqLFxuICAgICAgayA9IF9nZXRMYXN0T2ZQYXRoMi5rO1xuXG4gIG9ialtrXSA9IG9ialtrXSB8fCBbXTtcbiAgaWYgKGNvbmNhdCkgb2JqW2tdID0gb2JqW2tdLmNvbmNhdChuZXdWYWx1ZSk7XG4gIGlmICghY29uY2F0KSBvYmpba10ucHVzaChuZXdWYWx1ZSk7XG59XG5mdW5jdGlvbiBnZXRQYXRoKG9iamVjdCwgcGF0aCkge1xuICB2YXIgX2dldExhc3RPZlBhdGgzID0gZ2V0TGFzdE9mUGF0aChvYmplY3QsIHBhdGgpLFxuICAgICAgb2JqID0gX2dldExhc3RPZlBhdGgzLm9iaixcbiAgICAgIGsgPSBfZ2V0TGFzdE9mUGF0aDMuaztcblxuICBpZiAoIW9iaikgcmV0dXJuIHVuZGVmaW5lZDtcbiAgcmV0dXJuIG9ialtrXTtcbn1cbmZ1bmN0aW9uIGdldFBhdGhXaXRoRGVmYXVsdHMoZGF0YSwgZGVmYXVsdERhdGEsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRQYXRoKGRhdGEsIGtleSk7XG5cbiAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0gLy8gRmFsbGJhY2sgdG8gZGVmYXVsdCB2YWx1ZXNcblxuXG4gIHJldHVybiBnZXRQYXRoKGRlZmF1bHREYXRhLCBrZXkpO1xufVxuZnVuY3Rpb24gZGVlcEV4dGVuZCh0YXJnZXQsIHNvdXJjZSwgb3ZlcndyaXRlKSB7XG4gIC8qIGVzbGludCBuby1yZXN0cmljdGVkLXN5bnRheDogMCAqL1xuICBmb3IgKHZhciBwcm9wIGluIHNvdXJjZSkge1xuICAgIGlmIChwcm9wIGluIHRhcmdldCkge1xuICAgICAgLy8gSWYgd2UgcmVhY2hlZCBhIGxlYWYgc3RyaW5nIGluIHRhcmdldCBvciBzb3VyY2UgdGhlbiByZXBsYWNlIHdpdGggc291cmNlIG9yIHNraXAgZGVwZW5kaW5nIG9uIHRoZSAnb3ZlcndyaXRlJyBzd2l0Y2hcbiAgICAgIGlmICh0eXBlb2YgdGFyZ2V0W3Byb3BdID09PSAnc3RyaW5nJyB8fCB0YXJnZXRbcHJvcF0gaW5zdGFuY2VvZiBTdHJpbmcgfHwgdHlwZW9mIHNvdXJjZVtwcm9wXSA9PT0gJ3N0cmluZycgfHwgc291cmNlW3Byb3BdIGluc3RhbmNlb2YgU3RyaW5nKSB7XG4gICAgICAgIGlmIChvdmVyd3JpdGUpIHRhcmdldFtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlZXBFeHRlbmQodGFyZ2V0W3Byb3BdLCBzb3VyY2VbcHJvcF0sIG92ZXJ3cml0ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhcmdldFtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gcmVnZXhFc2NhcGUoc3RyKSB7XG4gIC8qIGVzbGludCBuby11c2VsZXNzLWVzY2FwZTogMCAqL1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL1tcXC1cXFtcXF1cXC9cXHtcXH1cXChcXClcXCpcXCtcXD9cXC5cXFxcXFxeXFwkXFx8XS9nLCAnXFxcXCQmJyk7XG59XG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuXG52YXIgX2VudGl0eU1hcCA9IHtcbiAgJyYnOiAnJmFtcDsnLFxuICAnPCc6ICcmbHQ7JyxcbiAgJz4nOiAnJmd0OycsXG4gICdcIic6ICcmcXVvdDsnLFxuICBcIidcIjogJyYjMzk7JyxcbiAgJy8nOiAnJiN4MkY7J1xufTtcbi8qIGVzbGludC1lbmFibGUgKi9cblxuZnVuY3Rpb24gZXNjYXBlKGRhdGEpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBkYXRhLnJlcGxhY2UoL1smPD5cIidcXC9dL2csIGZ1bmN0aW9uIChzKSB7XG4gICAgICByZXR1cm4gX2VudGl0eU1hcFtzXTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG52YXIgUmVzb3VyY2VTdG9yZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0V2ZW50RW1pdHRlcikge1xuICBfaW5oZXJpdHMoUmVzb3VyY2VTdG9yZSwgX0V2ZW50RW1pdHRlcik7XG5cbiAgZnVuY3Rpb24gUmVzb3VyY2VTdG9yZShkYXRhKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHtcbiAgICAgIG5zOiBbJ3RyYW5zbGF0aW9uJ10sXG4gICAgICBkZWZhdWx0TlM6ICd0cmFuc2xhdGlvbidcbiAgICB9O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlc291cmNlU3RvcmUpO1xuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoUmVzb3VyY2VTdG9yZSkuY2FsbCh0aGlzKSk7XG4gICAgRXZlbnRFbWl0dGVyLmNhbGwoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpOyAvLyA8PUlFMTAgZml4ICh1bmFibGUgdG8gY2FsbCBwYXJlbnQgY29uc3RydWN0b3IpXG5cbiAgICBfdGhpcy5kYXRhID0gZGF0YSB8fCB7fTtcbiAgICBfdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICAgIGlmIChfdGhpcy5vcHRpb25zLmtleVNlcGFyYXRvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBfdGhpcy5vcHRpb25zLmtleVNlcGFyYXRvciA9ICcuJztcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUmVzb3VyY2VTdG9yZSwgW3tcbiAgICBrZXk6IFwiYWRkTmFtZXNwYWNlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGROYW1lc3BhY2VzKG5zKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm5zLmluZGV4T2YobnMpIDwgMCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMubnMucHVzaChucyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbW92ZU5hbWVzcGFjZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlTmFtZXNwYWNlcyhucykge1xuICAgICAgdmFyIGluZGV4ID0gdGhpcy5vcHRpb25zLm5zLmluZGV4T2YobnMpO1xuXG4gICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICB0aGlzLm9wdGlvbnMubnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0UmVzb3VyY2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmVzb3VyY2UobG5nLCBucywga2V5KSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDoge307XG4gICAgICB2YXIga2V5U2VwYXJhdG9yID0gb3B0aW9ucy5rZXlTZXBhcmF0b3IgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMua2V5U2VwYXJhdG9yIDogdGhpcy5vcHRpb25zLmtleVNlcGFyYXRvcjtcbiAgICAgIHZhciBwYXRoID0gW2xuZywgbnNdO1xuICAgICAgaWYgKGtleSAmJiB0eXBlb2Yga2V5ICE9PSAnc3RyaW5nJykgcGF0aCA9IHBhdGguY29uY2F0KGtleSk7XG4gICAgICBpZiAoa2V5ICYmIHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSBwYXRoID0gcGF0aC5jb25jYXQoa2V5U2VwYXJhdG9yID8ga2V5LnNwbGl0KGtleVNlcGFyYXRvcikgOiBrZXkpO1xuXG4gICAgICBpZiAobG5nLmluZGV4T2YoJy4nKSA+IC0xKSB7XG4gICAgICAgIHBhdGggPSBsbmcuc3BsaXQoJy4nKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldFBhdGgodGhpcy5kYXRhLCBwYXRoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYWRkUmVzb3VyY2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkUmVzb3VyY2UobG5nLCBucywga2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IHtcbiAgICAgICAgc2lsZW50OiBmYWxzZVxuICAgICAgfTtcbiAgICAgIHZhciBrZXlTZXBhcmF0b3IgPSB0aGlzLm9wdGlvbnMua2V5U2VwYXJhdG9yO1xuICAgICAgaWYgKGtleVNlcGFyYXRvciA9PT0gdW5kZWZpbmVkKSBrZXlTZXBhcmF0b3IgPSAnLic7XG4gICAgICB2YXIgcGF0aCA9IFtsbmcsIG5zXTtcbiAgICAgIGlmIChrZXkpIHBhdGggPSBwYXRoLmNvbmNhdChrZXlTZXBhcmF0b3IgPyBrZXkuc3BsaXQoa2V5U2VwYXJhdG9yKSA6IGtleSk7XG5cbiAgICAgIGlmIChsbmcuaW5kZXhPZignLicpID4gLTEpIHtcbiAgICAgICAgcGF0aCA9IGxuZy5zcGxpdCgnLicpO1xuICAgICAgICB2YWx1ZSA9IG5zO1xuICAgICAgICBucyA9IHBhdGhbMV07XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYWRkTmFtZXNwYWNlcyhucyk7XG4gICAgICBzZXRQYXRoKHRoaXMuZGF0YSwgcGF0aCwgdmFsdWUpO1xuICAgICAgaWYgKCFvcHRpb25zLnNpbGVudCkgdGhpcy5lbWl0KCdhZGRlZCcsIGxuZywgbnMsIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJhZGRSZXNvdXJjZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkUmVzb3VyY2VzKGxuZywgbnMsIHJlc291cmNlcykge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHtcbiAgICAgICAgc2lsZW50OiBmYWxzZVxuICAgICAgfTtcblxuICAgICAgLyogZXNsaW50IG5vLXJlc3RyaWN0ZWQtc3ludGF4OiAwICovXG4gICAgICBmb3IgKHZhciBtIGluIHJlc291cmNlcykge1xuICAgICAgICBpZiAodHlwZW9mIHJlc291cmNlc1ttXSA9PT0gJ3N0cmluZycgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5hcHBseShyZXNvdXJjZXNbbV0pID09PSAnW29iamVjdCBBcnJheV0nKSB0aGlzLmFkZFJlc291cmNlKGxuZywgbnMsIG0sIHJlc291cmNlc1ttXSwge1xuICAgICAgICAgIHNpbGVudDogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFvcHRpb25zLnNpbGVudCkgdGhpcy5lbWl0KCdhZGRlZCcsIGxuZywgbnMsIHJlc291cmNlcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFkZFJlc291cmNlQnVuZGxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFJlc291cmNlQnVuZGxlKGxuZywgbnMsIHJlc291cmNlcywgZGVlcCwgb3ZlcndyaXRlKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIGFyZ3VtZW50c1s1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzVdIDoge1xuICAgICAgICBzaWxlbnQ6IGZhbHNlXG4gICAgICB9O1xuICAgICAgdmFyIHBhdGggPSBbbG5nLCBuc107XG5cbiAgICAgIGlmIChsbmcuaW5kZXhPZignLicpID4gLTEpIHtcbiAgICAgICAgcGF0aCA9IGxuZy5zcGxpdCgnLicpO1xuICAgICAgICBkZWVwID0gcmVzb3VyY2VzO1xuICAgICAgICByZXNvdXJjZXMgPSBucztcbiAgICAgICAgbnMgPSBwYXRoWzFdO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmFkZE5hbWVzcGFjZXMobnMpO1xuICAgICAgdmFyIHBhY2sgPSBnZXRQYXRoKHRoaXMuZGF0YSwgcGF0aCkgfHwge307XG5cbiAgICAgIGlmIChkZWVwKSB7XG4gICAgICAgIGRlZXBFeHRlbmQocGFjaywgcmVzb3VyY2VzLCBvdmVyd3JpdGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFjayA9IF9vYmplY3RTcHJlYWQoe30sIHBhY2ssIHJlc291cmNlcyk7XG4gICAgICB9XG5cbiAgICAgIHNldFBhdGgodGhpcy5kYXRhLCBwYXRoLCBwYWNrKTtcbiAgICAgIGlmICghb3B0aW9ucy5zaWxlbnQpIHRoaXMuZW1pdCgnYWRkZWQnLCBsbmcsIG5zLCByZXNvdXJjZXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW1vdmVSZXNvdXJjZUJ1bmRsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVSZXNvdXJjZUJ1bmRsZShsbmcsIG5zKSB7XG4gICAgICBpZiAodGhpcy5oYXNSZXNvdXJjZUJ1bmRsZShsbmcsIG5zKSkge1xuICAgICAgICBkZWxldGUgdGhpcy5kYXRhW2xuZ11bbnNdO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJlbW92ZU5hbWVzcGFjZXMobnMpO1xuICAgICAgdGhpcy5lbWl0KCdyZW1vdmVkJywgbG5nLCBucyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImhhc1Jlc291cmNlQnVuZGxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhc1Jlc291cmNlQnVuZGxlKGxuZywgbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldFJlc291cmNlKGxuZywgbnMpICE9PSB1bmRlZmluZWQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFJlc291cmNlQnVuZGxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJlc291cmNlQnVuZGxlKGxuZywgbnMpIHtcbiAgICAgIGlmICghbnMpIG5zID0gdGhpcy5vcHRpb25zLmRlZmF1bHROUzsgLy8gQ09NUEFUSUJJTElUWTogcmVtb3ZlIGV4dGVuZCBpbiB2Mi4xLjBcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5jb21wYXRpYmlsaXR5QVBJID09PSAndjEnKSByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwge30sIHRoaXMuZ2V0UmVzb3VyY2UobG5nLCBucykpO1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0UmVzb3VyY2UobG5nLCBucyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldERhdGFCeUxhbmd1YWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldERhdGFCeUxhbmd1YWdlKGxuZykge1xuICAgICAgcmV0dXJuIHRoaXMuZGF0YVtsbmddO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0b0pTT05cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZGF0YTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUmVzb3VyY2VTdG9yZTtcbn0oRXZlbnRFbWl0dGVyKTtcblxudmFyIHBvc3RQcm9jZXNzb3IgPSB7XG4gIHByb2Nlc3NvcnM6IHt9LFxuICBhZGRQb3N0UHJvY2Vzc29yOiBmdW5jdGlvbiBhZGRQb3N0UHJvY2Vzc29yKG1vZHVsZSkge1xuICAgIHRoaXMucHJvY2Vzc29yc1ttb2R1bGUubmFtZV0gPSBtb2R1bGU7XG4gIH0sXG4gIGhhbmRsZTogZnVuY3Rpb24gaGFuZGxlKHByb2Nlc3NvcnMsIHZhbHVlLCBrZXksIG9wdGlvbnMsIHRyYW5zbGF0b3IpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcHJvY2Vzc29ycy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9jZXNzb3IpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9jZXNzb3JzW3Byb2Nlc3Nvcl0pIHZhbHVlID0gX3RoaXMucHJvY2Vzc29yc1twcm9jZXNzb3JdLnByb2Nlc3ModmFsdWUsIGtleSwgb3B0aW9ucywgdHJhbnNsYXRvcik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59O1xuXG52YXIgY2hlY2tlZExvYWRlZEZvciA9IHt9O1xuXG52YXIgVHJhbnNsYXRvciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0V2ZW50RW1pdHRlcikge1xuICBfaW5oZXJpdHMoVHJhbnNsYXRvciwgX0V2ZW50RW1pdHRlcik7XG5cbiAgZnVuY3Rpb24gVHJhbnNsYXRvcihzZXJ2aWNlcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUcmFuc2xhdG9yKTtcblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFRyYW5zbGF0b3IpLmNhbGwodGhpcykpO1xuICAgIEV2ZW50RW1pdHRlci5jYWxsKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTsgLy8gPD1JRTEwIGZpeCAodW5hYmxlIHRvIGNhbGwgcGFyZW50IGNvbnN0cnVjdG9yKVxuXG4gICAgY29weShbJ3Jlc291cmNlU3RvcmUnLCAnbGFuZ3VhZ2VVdGlscycsICdwbHVyYWxSZXNvbHZlcicsICdpbnRlcnBvbGF0b3InLCAnYmFja2VuZENvbm5lY3RvcicsICdpMThuRm9ybWF0JywgJ3V0aWxzJ10sIHNlcnZpY2VzLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgX3RoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cbiAgICBpZiAoX3RoaXMub3B0aW9ucy5rZXlTZXBhcmF0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgX3RoaXMub3B0aW9ucy5rZXlTZXBhcmF0b3IgPSAnLic7XG4gICAgfVxuXG4gICAgX3RoaXMubG9nZ2VyID0gYmFzZUxvZ2dlci5jcmVhdGUoJ3RyYW5zbGF0b3InKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVHJhbnNsYXRvciwgW3tcbiAgICBrZXk6IFwiY2hhbmdlTGFuZ3VhZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hhbmdlTGFuZ3VhZ2UobG5nKSB7XG4gICAgICBpZiAobG5nKSB0aGlzLmxhbmd1YWdlID0gbG5nO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJleGlzdHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXhpc3RzKGtleSkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHtcbiAgICAgICAgaW50ZXJwb2xhdGlvbjoge31cbiAgICAgIH07XG4gICAgICB2YXIgcmVzb2x2ZWQgPSB0aGlzLnJlc29sdmUoa2V5LCBvcHRpb25zKTtcbiAgICAgIHJldHVybiByZXNvbHZlZCAmJiByZXNvbHZlZC5yZXMgIT09IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZXh0cmFjdEZyb21LZXlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXh0cmFjdEZyb21LZXkoa2V5LCBvcHRpb25zKSB7XG4gICAgICB2YXIgbnNTZXBhcmF0b3IgPSBvcHRpb25zLm5zU2VwYXJhdG9yIHx8IHRoaXMub3B0aW9ucy5uc1NlcGFyYXRvcjtcbiAgICAgIGlmIChuc1NlcGFyYXRvciA9PT0gdW5kZWZpbmVkKSBuc1NlcGFyYXRvciA9ICc6JztcbiAgICAgIHZhciBrZXlTZXBhcmF0b3IgPSBvcHRpb25zLmtleVNlcGFyYXRvciAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5rZXlTZXBhcmF0b3IgOiB0aGlzLm9wdGlvbnMua2V5U2VwYXJhdG9yO1xuICAgICAgdmFyIG5hbWVzcGFjZXMgPSBvcHRpb25zLm5zIHx8IHRoaXMub3B0aW9ucy5kZWZhdWx0TlM7XG5cbiAgICAgIGlmIChuc1NlcGFyYXRvciAmJiBrZXkuaW5kZXhPZihuc1NlcGFyYXRvcikgPiAtMSkge1xuICAgICAgICB2YXIgcGFydHMgPSBrZXkuc3BsaXQobnNTZXBhcmF0b3IpO1xuICAgICAgICBpZiAobnNTZXBhcmF0b3IgIT09IGtleVNlcGFyYXRvciB8fCBuc1NlcGFyYXRvciA9PT0ga2V5U2VwYXJhdG9yICYmIHRoaXMub3B0aW9ucy5ucy5pbmRleE9mKHBhcnRzWzBdKSA+IC0xKSBuYW1lc3BhY2VzID0gcGFydHMuc2hpZnQoKTtcbiAgICAgICAga2V5ID0gcGFydHMuam9pbihrZXlTZXBhcmF0b3IpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIG5hbWVzcGFjZXMgPT09ICdzdHJpbmcnKSBuYW1lc3BhY2VzID0gW25hbWVzcGFjZXNdO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAga2V5OiBrZXksXG4gICAgICAgIG5hbWVzcGFjZXM6IG5hbWVzcGFjZXNcbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInRyYW5zbGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0cmFuc2xhdGUoa2V5cywgb3B0aW9ucykge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIGlmIChfdHlwZW9mKG9wdGlvbnMpICE9PSAnb2JqZWN0JyAmJiB0aGlzLm9wdGlvbnMub3ZlcmxvYWRUcmFuc2xhdGlvbk9wdGlvbkhhbmRsZXIpIHtcbiAgICAgICAgLyogZXNsaW50IHByZWZlci1yZXN0LXBhcmFtczogMCAqL1xuICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zLm92ZXJsb2FkVHJhbnNsYXRpb25PcHRpb25IYW5kbGVyKGFyZ3VtZW50cyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9OyAvLyBub24gdmFsaWQga2V5cyBoYW5kbGluZ1xuXG4gICAgICBpZiAoa2V5cyA9PT0gdW5kZWZpbmVkIHx8IGtleXMgPT09IG51bGwpIHJldHVybiAnJztcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShrZXlzKSkga2V5cyA9IFtTdHJpbmcoa2V5cyldOyAvLyBzZXBhcmF0b3JzXG5cbiAgICAgIHZhciBrZXlTZXBhcmF0b3IgPSBvcHRpb25zLmtleVNlcGFyYXRvciAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5rZXlTZXBhcmF0b3IgOiB0aGlzLm9wdGlvbnMua2V5U2VwYXJhdG9yOyAvLyBnZXQgbmFtZXNwYWNlKHMpXG5cbiAgICAgIHZhciBfdGhpcyRleHRyYWN0RnJvbUtleSA9IHRoaXMuZXh0cmFjdEZyb21LZXkoa2V5c1trZXlzLmxlbmd0aCAtIDFdLCBvcHRpb25zKSxcbiAgICAgICAgICBrZXkgPSBfdGhpcyRleHRyYWN0RnJvbUtleS5rZXksXG4gICAgICAgICAgbmFtZXNwYWNlcyA9IF90aGlzJGV4dHJhY3RGcm9tS2V5Lm5hbWVzcGFjZXM7XG5cbiAgICAgIHZhciBuYW1lc3BhY2UgPSBuYW1lc3BhY2VzW25hbWVzcGFjZXMubGVuZ3RoIC0gMV07IC8vIHJldHVybiBrZXkgb24gQ0lNb2RlXG5cbiAgICAgIHZhciBsbmcgPSBvcHRpb25zLmxuZyB8fCB0aGlzLmxhbmd1YWdlO1xuICAgICAgdmFyIGFwcGVuZE5hbWVzcGFjZVRvQ0lNb2RlID0gb3B0aW9ucy5hcHBlbmROYW1lc3BhY2VUb0NJTW9kZSB8fCB0aGlzLm9wdGlvbnMuYXBwZW5kTmFtZXNwYWNlVG9DSU1vZGU7XG5cbiAgICAgIGlmIChsbmcgJiYgbG5nLnRvTG93ZXJDYXNlKCkgPT09ICdjaW1vZGUnKSB7XG4gICAgICAgIGlmIChhcHBlbmROYW1lc3BhY2VUb0NJTW9kZSkge1xuICAgICAgICAgIHZhciBuc1NlcGFyYXRvciA9IG9wdGlvbnMubnNTZXBhcmF0b3IgfHwgdGhpcy5vcHRpb25zLm5zU2VwYXJhdG9yO1xuICAgICAgICAgIHJldHVybiBuYW1lc3BhY2UgKyBuc1NlcGFyYXRvciArIGtleTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgICB9IC8vIHJlc29sdmUgZnJvbSBzdG9yZVxuXG5cbiAgICAgIHZhciByZXNvbHZlZCA9IHRoaXMucmVzb2x2ZShrZXlzLCBvcHRpb25zKTtcbiAgICAgIHZhciByZXMgPSByZXNvbHZlZCAmJiByZXNvbHZlZC5yZXM7XG4gICAgICB2YXIgcmVzVXNlZEtleSA9IHJlc29sdmVkICYmIHJlc29sdmVkLnVzZWRLZXkgfHwga2V5O1xuICAgICAgdmFyIHJlc0V4YWN0VXNlZEtleSA9IHJlc29sdmVkICYmIHJlc29sdmVkLmV4YWN0VXNlZEtleSB8fCBrZXk7XG4gICAgICB2YXIgcmVzVHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuYXBwbHkocmVzKTtcbiAgICAgIHZhciBub09iamVjdCA9IFsnW29iamVjdCBOdW1iZXJdJywgJ1tvYmplY3QgRnVuY3Rpb25dJywgJ1tvYmplY3QgUmVnRXhwXSddO1xuICAgICAgdmFyIGpvaW5BcnJheXMgPSBvcHRpb25zLmpvaW5BcnJheXMgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuam9pbkFycmF5cyA6IHRoaXMub3B0aW9ucy5qb2luQXJyYXlzOyAvLyBvYmplY3RcblxuICAgICAgdmFyIGhhbmRsZUFzT2JqZWN0SW5JMThuRm9ybWF0ID0gIXRoaXMuaTE4bkZvcm1hdCB8fCB0aGlzLmkxOG5Gb3JtYXQuaGFuZGxlQXNPYmplY3Q7XG4gICAgICB2YXIgaGFuZGxlQXNPYmplY3QgPSB0eXBlb2YgcmVzICE9PSAnc3RyaW5nJyAmJiB0eXBlb2YgcmVzICE9PSAnYm9vbGVhbicgJiYgdHlwZW9mIHJlcyAhPT0gJ251bWJlcic7XG5cbiAgICAgIGlmIChoYW5kbGVBc09iamVjdEluSTE4bkZvcm1hdCAmJiByZXMgJiYgaGFuZGxlQXNPYmplY3QgJiYgbm9PYmplY3QuaW5kZXhPZihyZXNUeXBlKSA8IDAgJiYgISh0eXBlb2Ygam9pbkFycmF5cyA9PT0gJ3N0cmluZycgJiYgcmVzVHlwZSA9PT0gJ1tvYmplY3QgQXJyYXldJykpIHtcbiAgICAgICAgaWYgKCFvcHRpb25zLnJldHVybk9iamVjdHMgJiYgIXRoaXMub3B0aW9ucy5yZXR1cm5PYmplY3RzKSB7XG4gICAgICAgICAgdGhpcy5sb2dnZXIud2FybignYWNjZXNzaW5nIGFuIG9iamVjdCAtIGJ1dCByZXR1cm5PYmplY3RzIG9wdGlvbnMgaXMgbm90IGVuYWJsZWQhJyk7XG4gICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5yZXR1cm5lZE9iamVjdEhhbmRsZXIgPyB0aGlzLm9wdGlvbnMucmV0dXJuZWRPYmplY3RIYW5kbGVyKHJlc1VzZWRLZXksIHJlcywgb3B0aW9ucykgOiBcImtleSAnXCIuY29uY2F0KGtleSwgXCIgKFwiKS5jb25jYXQodGhpcy5sYW5ndWFnZSwgXCIpJyByZXR1cm5lZCBhbiBvYmplY3QgaW5zdGVhZCBvZiBzdHJpbmcuXCIpO1xuICAgICAgICB9IC8vIGlmIHdlIGdvdCBhIHNlcGFyYXRvciB3ZSBsb29wIG92ZXIgY2hpbGRyZW4gLSBlbHNlIHdlIGp1c3QgcmV0dXJuIG9iamVjdCBhcyBpc1xuICAgICAgICAvLyBhcyBoYXZpbmcgaXQgc2V0IHRvIGZhbHNlIG1lYW5zIG5vIGhpZXJhcmNoeSBzbyBubyBsb29rdXAgZm9yIG5lc3RlZCB2YWx1ZXNcblxuXG4gICAgICAgIGlmIChrZXlTZXBhcmF0b3IpIHtcbiAgICAgICAgICB2YXIgcmVzVHlwZUlzQXJyYXkgPSByZXNUeXBlID09PSAnW29iamVjdCBBcnJheV0nO1xuICAgICAgICAgIHZhciBjb3B5JCQxID0gcmVzVHlwZUlzQXJyYXkgPyBbXSA6IHt9OyAvLyBhcHBseSBjaGlsZCB0cmFuc2xhdGlvbiBvbiBhIGNvcHlcblxuICAgICAgICAgIC8qIGVzbGludCBuby1yZXN0cmljdGVkLXN5bnRheDogMCAqL1xuXG4gICAgICAgICAgdmFyIG5ld0tleVRvVXNlID0gcmVzVHlwZUlzQXJyYXkgPyByZXNFeGFjdFVzZWRLZXkgOiByZXNVc2VkS2V5O1xuXG4gICAgICAgICAgZm9yICh2YXIgbSBpbiByZXMpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocmVzLCBtKSkge1xuICAgICAgICAgICAgICB2YXIgZGVlcEtleSA9IFwiXCIuY29uY2F0KG5ld0tleVRvVXNlKS5jb25jYXQoa2V5U2VwYXJhdG9yKS5jb25jYXQobSk7XG4gICAgICAgICAgICAgIGNvcHkkJDFbbV0gPSB0aGlzLnRyYW5zbGF0ZShkZWVwS2V5LCBfb2JqZWN0U3ByZWFkKHt9LCBvcHRpb25zLCB7XG4gICAgICAgICAgICAgICAgam9pbkFycmF5czogZmFsc2UsXG4gICAgICAgICAgICAgICAgbnM6IG5hbWVzcGFjZXNcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICBpZiAoY29weSQkMVttXSA9PT0gZGVlcEtleSkgY29weSQkMVttXSA9IHJlc1ttXTsgLy8gaWYgbm90aGluZyBmb3VuZCB1c2Ugb3JnaW5hbCB2YWx1ZSBhcyBmYWxsYmFja1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJlcyA9IGNvcHkkJDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaGFuZGxlQXNPYmplY3RJbkkxOG5Gb3JtYXQgJiYgdHlwZW9mIGpvaW5BcnJheXMgPT09ICdzdHJpbmcnICYmIHJlc1R5cGUgPT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgICAgLy8gYXJyYXkgc3BlY2lhbCB0cmVhdG1lbnRcbiAgICAgICAgcmVzID0gcmVzLmpvaW4oam9pbkFycmF5cyk7XG4gICAgICAgIGlmIChyZXMpIHJlcyA9IHRoaXMuZXh0ZW5kVHJhbnNsYXRpb24ocmVzLCBrZXlzLCBvcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHN0cmluZywgZW1wdHkgb3IgbnVsbFxuICAgICAgICB2YXIgdXNlZERlZmF1bHQgPSBmYWxzZTtcbiAgICAgICAgdmFyIHVzZWRLZXkgPSBmYWxzZTsgLy8gZmFsbGJhY2sgdmFsdWVcblxuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZExvb2t1cChyZXMpICYmIG9wdGlvbnMuZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB1c2VkRGVmYXVsdCA9IHRydWU7XG5cbiAgICAgICAgICBpZiAob3B0aW9ucy5jb3VudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2YXIgc3VmZml4ID0gdGhpcy5wbHVyYWxSZXNvbHZlci5nZXRTdWZmaXgobG5nLCBvcHRpb25zLmNvdW50KTtcbiAgICAgICAgICAgIHJlcyA9IG9wdGlvbnNbXCJkZWZhdWx0VmFsdWVcIi5jb25jYXQoc3VmZml4KV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFyZXMpIHJlcyA9IG9wdGlvbnMuZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWRMb29rdXAocmVzKSkge1xuICAgICAgICAgIHVzZWRLZXkgPSB0cnVlO1xuICAgICAgICAgIHJlcyA9IGtleTtcbiAgICAgICAgfSAvLyBzYXZlIG1pc3NpbmdcblxuXG4gICAgICAgIHZhciB1cGRhdGVNaXNzaW5nID0gb3B0aW9ucy5kZWZhdWx0VmFsdWUgJiYgb3B0aW9ucy5kZWZhdWx0VmFsdWUgIT09IHJlcyAmJiB0aGlzLm9wdGlvbnMudXBkYXRlTWlzc2luZztcblxuICAgICAgICBpZiAodXNlZEtleSB8fCB1c2VkRGVmYXVsdCB8fCB1cGRhdGVNaXNzaW5nKSB7XG4gICAgICAgICAgdGhpcy5sb2dnZXIubG9nKHVwZGF0ZU1pc3NpbmcgPyAndXBkYXRlS2V5JyA6ICdtaXNzaW5nS2V5JywgbG5nLCBuYW1lc3BhY2UsIGtleSwgdXBkYXRlTWlzc2luZyA/IG9wdGlvbnMuZGVmYXVsdFZhbHVlIDogcmVzKTtcbiAgICAgICAgICB2YXIgbG5ncyA9IFtdO1xuICAgICAgICAgIHZhciBmYWxsYmFja0xuZ3MgPSB0aGlzLmxhbmd1YWdlVXRpbHMuZ2V0RmFsbGJhY2tDb2Rlcyh0aGlzLm9wdGlvbnMuZmFsbGJhY2tMbmcsIG9wdGlvbnMubG5nIHx8IHRoaXMubGFuZ3VhZ2UpO1xuXG4gICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zYXZlTWlzc2luZ1RvID09PSAnZmFsbGJhY2snICYmIGZhbGxiYWNrTG5ncyAmJiBmYWxsYmFja0xuZ3NbMF0pIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmFsbGJhY2tMbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGxuZ3MucHVzaChmYWxsYmFja0xuZ3NbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLnNhdmVNaXNzaW5nVG8gPT09ICdhbGwnKSB7XG4gICAgICAgICAgICBsbmdzID0gdGhpcy5sYW5ndWFnZVV0aWxzLnRvUmVzb2x2ZUhpZXJhcmNoeShvcHRpb25zLmxuZyB8fCB0aGlzLmxhbmd1YWdlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbG5ncy5wdXNoKG9wdGlvbnMubG5nIHx8IHRoaXMubGFuZ3VhZ2UpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBzZW5kID0gZnVuY3Rpb24gc2VuZChsLCBrKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMyLm9wdGlvbnMubWlzc2luZ0tleUhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgX3RoaXMyLm9wdGlvbnMubWlzc2luZ0tleUhhbmRsZXIobCwgbmFtZXNwYWNlLCBrLCB1cGRhdGVNaXNzaW5nID8gb3B0aW9ucy5kZWZhdWx0VmFsdWUgOiByZXMsIHVwZGF0ZU1pc3NpbmcsIG9wdGlvbnMpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChfdGhpczIuYmFja2VuZENvbm5lY3RvciAmJiBfdGhpczIuYmFja2VuZENvbm5lY3Rvci5zYXZlTWlzc2luZykge1xuICAgICAgICAgICAgICBfdGhpczIuYmFja2VuZENvbm5lY3Rvci5zYXZlTWlzc2luZyhsLCBuYW1lc3BhY2UsIGssIHVwZGF0ZU1pc3NpbmcgPyBvcHRpb25zLmRlZmF1bHRWYWx1ZSA6IHJlcywgdXBkYXRlTWlzc2luZywgb3B0aW9ucyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF90aGlzMi5lbWl0KCdtaXNzaW5nS2V5JywgbCwgbmFtZXNwYWNlLCBrLCByZXMpO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNhdmVNaXNzaW5nKSB7XG4gICAgICAgICAgICB2YXIgbmVlZHNQbHVyYWxIYW5kbGluZyA9IG9wdGlvbnMuY291bnQgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb3B0aW9ucy5jb3VudCAhPT0gJ3N0cmluZyc7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2F2ZU1pc3NpbmdQbHVyYWxzICYmIG5lZWRzUGx1cmFsSGFuZGxpbmcpIHtcbiAgICAgICAgICAgICAgbG5ncy5mb3JFYWNoKGZ1bmN0aW9uIChsKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBsdXJhbHMgPSBfdGhpczIucGx1cmFsUmVzb2x2ZXIuZ2V0UGx1cmFsRm9ybXNPZktleShsLCBrZXkpO1xuXG4gICAgICAgICAgICAgICAgcGx1cmFscy5mb3JFYWNoKGZ1bmN0aW9uIChwKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gc2VuZChbbF0sIHApO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNlbmQobG5ncywga2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gZXh0ZW5kXG5cblxuICAgICAgICByZXMgPSB0aGlzLmV4dGVuZFRyYW5zbGF0aW9uKHJlcywga2V5cywgb3B0aW9ucywgcmVzb2x2ZWQpOyAvLyBhcHBlbmQgbmFtZXNwYWNlIGlmIHN0aWxsIGtleVxuXG4gICAgICAgIGlmICh1c2VkS2V5ICYmIHJlcyA9PT0ga2V5ICYmIHRoaXMub3B0aW9ucy5hcHBlbmROYW1lc3BhY2VUb01pc3NpbmdLZXkpIHJlcyA9IFwiXCIuY29uY2F0KG5hbWVzcGFjZSwgXCI6XCIpLmNvbmNhdChrZXkpOyAvLyBwYXJzZU1pc3NpbmdLZXlIYW5kbGVyXG5cbiAgICAgICAgaWYgKHVzZWRLZXkgJiYgdGhpcy5vcHRpb25zLnBhcnNlTWlzc2luZ0tleUhhbmRsZXIpIHJlcyA9IHRoaXMub3B0aW9ucy5wYXJzZU1pc3NpbmdLZXlIYW5kbGVyKHJlcyk7XG4gICAgICB9IC8vIHJldHVyblxuXG5cbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImV4dGVuZFRyYW5zbGF0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGV4dGVuZFRyYW5zbGF0aW9uKHJlcywga2V5LCBvcHRpb25zLCByZXNvbHZlZCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLmkxOG5Gb3JtYXQgJiYgdGhpcy5pMThuRm9ybWF0LnBhcnNlKSB7XG4gICAgICAgIHJlcyA9IHRoaXMuaTE4bkZvcm1hdC5wYXJzZShyZXMsIG9wdGlvbnMsIHJlc29sdmVkLnVzZWRMbmcsIHJlc29sdmVkLnVzZWROUywgcmVzb2x2ZWQudXNlZEtleSwge1xuICAgICAgICAgIHJlc29sdmVkOiByZXNvbHZlZFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoIW9wdGlvbnMuc2tpcEludGVycG9sYXRpb24pIHtcbiAgICAgICAgLy8gaTE4bmV4dC5wYXJzaW5nXG4gICAgICAgIGlmIChvcHRpb25zLmludGVycG9sYXRpb24pIHRoaXMuaW50ZXJwb2xhdG9yLmluaXQoX29iamVjdFNwcmVhZCh7fSwgb3B0aW9ucywge1xuICAgICAgICAgIGludGVycG9sYXRpb246IF9vYmplY3RTcHJlYWQoe30sIHRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uLCBvcHRpb25zLmludGVycG9sYXRpb24pXG4gICAgICAgIH0pKTsgLy8gaW50ZXJwb2xhdGVcblxuICAgICAgICB2YXIgZGF0YSA9IG9wdGlvbnMucmVwbGFjZSAmJiB0eXBlb2Ygb3B0aW9ucy5yZXBsYWNlICE9PSAnc3RyaW5nJyA/IG9wdGlvbnMucmVwbGFjZSA6IG9wdGlvbnM7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuaW50ZXJwb2xhdGlvbi5kZWZhdWx0VmFyaWFibGVzKSBkYXRhID0gX29iamVjdFNwcmVhZCh7fSwgdGhpcy5vcHRpb25zLmludGVycG9sYXRpb24uZGVmYXVsdFZhcmlhYmxlcywgZGF0YSk7XG4gICAgICAgIHJlcyA9IHRoaXMuaW50ZXJwb2xhdG9yLmludGVycG9sYXRlKHJlcywgZGF0YSwgb3B0aW9ucy5sbmcgfHwgdGhpcy5sYW5ndWFnZSwgb3B0aW9ucyk7IC8vIG5lc3RpbmdcblxuICAgICAgICBpZiAob3B0aW9ucy5uZXN0ICE9PSBmYWxzZSkgcmVzID0gdGhpcy5pbnRlcnBvbGF0b3IubmVzdChyZXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMzLnRyYW5zbGF0ZS5hcHBseShfdGhpczMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH0sIG9wdGlvbnMpO1xuICAgICAgICBpZiAob3B0aW9ucy5pbnRlcnBvbGF0aW9uKSB0aGlzLmludGVycG9sYXRvci5yZXNldCgpO1xuICAgICAgfSAvLyBwb3N0IHByb2Nlc3NcblxuXG4gICAgICB2YXIgcG9zdFByb2Nlc3MgPSBvcHRpb25zLnBvc3RQcm9jZXNzIHx8IHRoaXMub3B0aW9ucy5wb3N0UHJvY2VzcztcbiAgICAgIHZhciBwb3N0UHJvY2Vzc29yTmFtZXMgPSB0eXBlb2YgcG9zdFByb2Nlc3MgPT09ICdzdHJpbmcnID8gW3Bvc3RQcm9jZXNzXSA6IHBvc3RQcm9jZXNzO1xuXG4gICAgICBpZiAocmVzICE9PSB1bmRlZmluZWQgJiYgcmVzICE9PSBudWxsICYmIHBvc3RQcm9jZXNzb3JOYW1lcyAmJiBwb3N0UHJvY2Vzc29yTmFtZXMubGVuZ3RoICYmIG9wdGlvbnMuYXBwbHlQb3N0UHJvY2Vzc29yICE9PSBmYWxzZSkge1xuICAgICAgICByZXMgPSBwb3N0UHJvY2Vzc29yLmhhbmRsZShwb3N0UHJvY2Vzc29yTmFtZXMsIHJlcywga2V5LCB0aGlzLm9wdGlvbnMgJiYgdGhpcy5vcHRpb25zLnBvc3RQcm9jZXNzUGFzc1Jlc29sdmVkID8gX29iamVjdFNwcmVhZCh7XG4gICAgICAgICAgaTE4blJlc29sdmVkOiByZXNvbHZlZFxuICAgICAgICB9LCBvcHRpb25zKSA6IG9wdGlvbnMsIHRoaXMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZXNvbHZlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc29sdmUoa2V5cykge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgIHZhciBmb3VuZDtcbiAgICAgIHZhciB1c2VkS2V5OyAvLyBwbGFpbiBrZXlcblxuICAgICAgdmFyIGV4YWN0VXNlZEtleTsgLy8ga2V5IHdpdGggY29udGV4dCAvIHBsdXJhbFxuXG4gICAgICB2YXIgdXNlZExuZztcbiAgICAgIHZhciB1c2VkTlM7XG4gICAgICBpZiAodHlwZW9mIGtleXMgPT09ICdzdHJpbmcnKSBrZXlzID0gW2tleXNdOyAvLyBmb3JFYWNoIHBvc3NpYmxlIGtleVxuXG4gICAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICAgICAgaWYgKF90aGlzNC5pc1ZhbGlkTG9va3VwKGZvdW5kKSkgcmV0dXJuO1xuXG4gICAgICAgIHZhciBleHRyYWN0ZWQgPSBfdGhpczQuZXh0cmFjdEZyb21LZXkoaywgb3B0aW9ucyk7XG5cbiAgICAgICAgdmFyIGtleSA9IGV4dHJhY3RlZC5rZXk7XG4gICAgICAgIHVzZWRLZXkgPSBrZXk7XG4gICAgICAgIHZhciBuYW1lc3BhY2VzID0gZXh0cmFjdGVkLm5hbWVzcGFjZXM7XG4gICAgICAgIGlmIChfdGhpczQub3B0aW9ucy5mYWxsYmFja05TKSBuYW1lc3BhY2VzID0gbmFtZXNwYWNlcy5jb25jYXQoX3RoaXM0Lm9wdGlvbnMuZmFsbGJhY2tOUyk7XG4gICAgICAgIHZhciBuZWVkc1BsdXJhbEhhbmRsaW5nID0gb3B0aW9ucy5jb3VudCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvcHRpb25zLmNvdW50ICE9PSAnc3RyaW5nJztcbiAgICAgICAgdmFyIG5lZWRzQ29udGV4dEhhbmRsaW5nID0gb3B0aW9ucy5jb250ZXh0ICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9wdGlvbnMuY29udGV4dCA9PT0gJ3N0cmluZycgJiYgb3B0aW9ucy5jb250ZXh0ICE9PSAnJztcbiAgICAgICAgdmFyIGNvZGVzID0gb3B0aW9ucy5sbmdzID8gb3B0aW9ucy5sbmdzIDogX3RoaXM0Lmxhbmd1YWdlVXRpbHMudG9SZXNvbHZlSGllcmFyY2h5KG9wdGlvbnMubG5nIHx8IF90aGlzNC5sYW5ndWFnZSwgb3B0aW9ucy5mYWxsYmFja0xuZyk7XG4gICAgICAgIG5hbWVzcGFjZXMuZm9yRWFjaChmdW5jdGlvbiAobnMpIHtcbiAgICAgICAgICBpZiAoX3RoaXM0LmlzVmFsaWRMb29rdXAoZm91bmQpKSByZXR1cm47XG4gICAgICAgICAgdXNlZE5TID0gbnM7XG5cbiAgICAgICAgICBpZiAoIWNoZWNrZWRMb2FkZWRGb3JbXCJcIi5jb25jYXQoY29kZXNbMF0sIFwiLVwiKS5jb25jYXQobnMpXSAmJiBfdGhpczQudXRpbHMgJiYgX3RoaXM0LnV0aWxzLmhhc0xvYWRlZE5hbWVzcGFjZSAmJiAhX3RoaXM0LnV0aWxzLmhhc0xvYWRlZE5hbWVzcGFjZSh1c2VkTlMpKSB7XG4gICAgICAgICAgICBjaGVja2VkTG9hZGVkRm9yW1wiXCIuY29uY2F0KGNvZGVzWzBdLCBcIi1cIikuY29uY2F0KG5zKV0gPSB0cnVlO1xuXG4gICAgICAgICAgICBfdGhpczQubG9nZ2VyLndhcm4oXCJrZXkgXFxcIlwiLmNvbmNhdCh1c2VkS2V5LCBcIlxcXCIgZm9yIG5hbWVzcGFjZSBcXFwiXCIpLmNvbmNhdCh1c2VkTlMsIFwiXFxcIiBmb3IgbGFuZ3VhZ2VzIFxcXCJcIikuY29uY2F0KGNvZGVzLmpvaW4oJywgJyksIFwiXFxcIiB3b24ndCBnZXQgcmVzb2x2ZWQgYXMgbmFtZXNwYWNlIHdhcyBub3QgeWV0IGxvYWRlZFwiKSwgJ1RoaXMgbWVhbnMgc29tZXRoaW5nIElTIFdST05HIGluIHlvdXIgYXBwbGljYXRpb24gc2V0dXAuIFlvdSBhY2Nlc3MgdGhlIHQgZnVuY3Rpb24gYmVmb3JlIGkxOG5leHQuaW5pdCAvIGkxOG5leHQubG9hZE5hbWVzcGFjZSAvIGkxOG5leHQuY2hhbmdlTGFuZ3VhZ2Ugd2FzIGRvbmUuIFdhaXQgZm9yIHRoZSBjYWxsYmFjayBvciBQcm9taXNlIHRvIHJlc29sdmUgYmVmb3JlIGFjY2Vzc2luZyBpdCEhIScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvZGVzLmZvckVhY2goZnVuY3Rpb24gKGNvZGUpIHtcbiAgICAgICAgICAgIGlmIChfdGhpczQuaXNWYWxpZExvb2t1cChmb3VuZCkpIHJldHVybjtcbiAgICAgICAgICAgIHVzZWRMbmcgPSBjb2RlO1xuICAgICAgICAgICAgdmFyIGZpbmFsS2V5ID0ga2V5O1xuICAgICAgICAgICAgdmFyIGZpbmFsS2V5cyA9IFtmaW5hbEtleV07XG5cbiAgICAgICAgICAgIGlmIChfdGhpczQuaTE4bkZvcm1hdCAmJiBfdGhpczQuaTE4bkZvcm1hdC5hZGRMb29rdXBLZXlzKSB7XG4gICAgICAgICAgICAgIF90aGlzNC5pMThuRm9ybWF0LmFkZExvb2t1cEtleXMoZmluYWxLZXlzLCBrZXksIGNvZGUsIG5zLCBvcHRpb25zKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhciBwbHVyYWxTdWZmaXg7XG4gICAgICAgICAgICAgIGlmIChuZWVkc1BsdXJhbEhhbmRsaW5nKSBwbHVyYWxTdWZmaXggPSBfdGhpczQucGx1cmFsUmVzb2x2ZXIuZ2V0U3VmZml4KGNvZGUsIG9wdGlvbnMuY291bnQpOyAvLyBmYWxsYmFjayBmb3IgcGx1cmFsIGlmIGNvbnRleHQgbm90IGZvdW5kXG5cbiAgICAgICAgICAgICAgaWYgKG5lZWRzUGx1cmFsSGFuZGxpbmcgJiYgbmVlZHNDb250ZXh0SGFuZGxpbmcpIGZpbmFsS2V5cy5wdXNoKGZpbmFsS2V5ICsgcGx1cmFsU3VmZml4KTsgLy8gZ2V0IGtleSBmb3IgY29udGV4dCBpZiBuZWVkZWRcblxuICAgICAgICAgICAgICBpZiAobmVlZHNDb250ZXh0SGFuZGxpbmcpIGZpbmFsS2V5cy5wdXNoKGZpbmFsS2V5ICs9IFwiXCIuY29uY2F0KF90aGlzNC5vcHRpb25zLmNvbnRleHRTZXBhcmF0b3IpLmNvbmNhdChvcHRpb25zLmNvbnRleHQpKTsgLy8gZ2V0IGtleSBmb3IgcGx1cmFsIGlmIG5lZWRlZFxuXG4gICAgICAgICAgICAgIGlmIChuZWVkc1BsdXJhbEhhbmRsaW5nKSBmaW5hbEtleXMucHVzaChmaW5hbEtleSArPSBwbHVyYWxTdWZmaXgpO1xuICAgICAgICAgICAgfSAvLyBpdGVyYXRlIG92ZXIgZmluYWxLZXlzIHN0YXJ0aW5nIHdpdGggbW9zdCBzcGVjaWZpYyBwbHVyYWxrZXkgKC0+IGNvbnRleHRrZXkgb25seSkgLT4gc2luZ3VsYXJrZXkgb25seVxuXG5cbiAgICAgICAgICAgIHZhciBwb3NzaWJsZUtleTtcbiAgICAgICAgICAgIC8qIGVzbGludCBuby1jb25kLWFzc2lnbjogMCAqL1xuXG4gICAgICAgICAgICB3aGlsZSAocG9zc2libGVLZXkgPSBmaW5hbEtleXMucG9wKCkpIHtcbiAgICAgICAgICAgICAgaWYgKCFfdGhpczQuaXNWYWxpZExvb2t1cChmb3VuZCkpIHtcbiAgICAgICAgICAgICAgICBleGFjdFVzZWRLZXkgPSBwb3NzaWJsZUtleTtcbiAgICAgICAgICAgICAgICBmb3VuZCA9IF90aGlzNC5nZXRSZXNvdXJjZShjb2RlLCBucywgcG9zc2libGVLZXksIG9wdGlvbnMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXM6IGZvdW5kLFxuICAgICAgICB1c2VkS2V5OiB1c2VkS2V5LFxuICAgICAgICBleGFjdFVzZWRLZXk6IGV4YWN0VXNlZEtleSxcbiAgICAgICAgdXNlZExuZzogdXNlZExuZyxcbiAgICAgICAgdXNlZE5TOiB1c2VkTlNcbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzVmFsaWRMb29rdXBcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNWYWxpZExvb2t1cChyZXMpIHtcbiAgICAgIHJldHVybiByZXMgIT09IHVuZGVmaW5lZCAmJiAhKCF0aGlzLm9wdGlvbnMucmV0dXJuTnVsbCAmJiByZXMgPT09IG51bGwpICYmICEoIXRoaXMub3B0aW9ucy5yZXR1cm5FbXB0eVN0cmluZyAmJiByZXMgPT09ICcnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0UmVzb3VyY2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmVzb3VyY2UoY29kZSwgbnMsIGtleSkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHt9O1xuICAgICAgaWYgKHRoaXMuaTE4bkZvcm1hdCAmJiB0aGlzLmkxOG5Gb3JtYXQuZ2V0UmVzb3VyY2UpIHJldHVybiB0aGlzLmkxOG5Gb3JtYXQuZ2V0UmVzb3VyY2UoY29kZSwgbnMsIGtleSwgb3B0aW9ucyk7XG4gICAgICByZXR1cm4gdGhpcy5yZXNvdXJjZVN0b3JlLmdldFJlc291cmNlKGNvZGUsIG5zLCBrZXksIG9wdGlvbnMpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBUcmFuc2xhdG9yO1xufShFdmVudEVtaXR0ZXIpO1xuXG5mdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyaW5nLnNsaWNlKDEpO1xufVxuXG52YXIgTGFuZ3VhZ2VVdGlsID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTGFuZ3VhZ2VVdGlsKG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGFuZ3VhZ2VVdGlsKTtcblxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy53aGl0ZWxpc3QgPSB0aGlzLm9wdGlvbnMud2hpdGVsaXN0IHx8IGZhbHNlO1xuICAgIHRoaXMubG9nZ2VyID0gYmFzZUxvZ2dlci5jcmVhdGUoJ2xhbmd1YWdlVXRpbHMnKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhMYW5ndWFnZVV0aWwsIFt7XG4gICAga2V5OiBcImdldFNjcmlwdFBhcnRGcm9tQ29kZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTY3JpcHRQYXJ0RnJvbUNvZGUoY29kZSkge1xuICAgICAgaWYgKCFjb2RlIHx8IGNvZGUuaW5kZXhPZignLScpIDwgMCkgcmV0dXJuIG51bGw7XG4gICAgICB2YXIgcCA9IGNvZGUuc3BsaXQoJy0nKTtcbiAgICAgIGlmIChwLmxlbmd0aCA9PT0gMikgcmV0dXJuIG51bGw7XG4gICAgICBwLnBvcCgpO1xuICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0TGFuZ3VhZ2VDb2RlKHAuam9pbignLScpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0TGFuZ3VhZ2VQYXJ0RnJvbUNvZGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TGFuZ3VhZ2VQYXJ0RnJvbUNvZGUoY29kZSkge1xuICAgICAgaWYgKCFjb2RlIHx8IGNvZGUuaW5kZXhPZignLScpIDwgMCkgcmV0dXJuIGNvZGU7XG4gICAgICB2YXIgcCA9IGNvZGUuc3BsaXQoJy0nKTtcbiAgICAgIHJldHVybiB0aGlzLmZvcm1hdExhbmd1YWdlQ29kZShwWzBdKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZm9ybWF0TGFuZ3VhZ2VDb2RlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdExhbmd1YWdlQ29kZShjb2RlKSB7XG4gICAgICAvLyBodHRwOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL2xhbmd1YWdlLXRhZ3MvbGFuZ3VhZ2UtdGFncy54aHRtbFxuICAgICAgaWYgKHR5cGVvZiBjb2RlID09PSAnc3RyaW5nJyAmJiBjb2RlLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgICAgIHZhciBzcGVjaWFsQ2FzZXMgPSBbJ2hhbnMnLCAnaGFudCcsICdsYXRuJywgJ2N5cmwnLCAnY2FucycsICdtb25nJywgJ2FyYWInXTtcbiAgICAgICAgdmFyIHAgPSBjb2RlLnNwbGl0KCctJyk7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5sb3dlckNhc2VMbmcpIHtcbiAgICAgICAgICBwID0gcC5tYXAoZnVuY3Rpb24gKHBhcnQpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJ0LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAocC5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICBwWzBdID0gcFswXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgIHBbMV0gPSBwWzFdLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgaWYgKHNwZWNpYWxDYXNlcy5pbmRleE9mKHBbMV0udG9Mb3dlckNhc2UoKSkgPiAtMSkgcFsxXSA9IGNhcGl0YWxpemUocFsxXS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgfSBlbHNlIGlmIChwLmxlbmd0aCA9PT0gMykge1xuICAgICAgICAgIHBbMF0gPSBwWzBdLnRvTG93ZXJDYXNlKCk7IC8vIGlmIGxlbmdodCAyIGd1ZXNzIGl0J3MgYSBjb3VudHJ5XG5cbiAgICAgICAgICBpZiAocFsxXS5sZW5ndGggPT09IDIpIHBbMV0gPSBwWzFdLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgaWYgKHBbMF0gIT09ICdzZ24nICYmIHBbMl0ubGVuZ3RoID09PSAyKSBwWzJdID0gcFsyXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgIGlmIChzcGVjaWFsQ2FzZXMuaW5kZXhPZihwWzFdLnRvTG93ZXJDYXNlKCkpID4gLTEpIHBbMV0gPSBjYXBpdGFsaXplKHBbMV0udG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgaWYgKHNwZWNpYWxDYXNlcy5pbmRleE9mKHBbMl0udG9Mb3dlckNhc2UoKSkgPiAtMSkgcFsyXSA9IGNhcGl0YWxpemUocFsyXS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwLmpvaW4oJy0nKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5jbGVhbkNvZGUgfHwgdGhpcy5vcHRpb25zLmxvd2VyQ2FzZUxuZyA/IGNvZGUudG9Mb3dlckNhc2UoKSA6IGNvZGU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzV2hpdGVsaXN0ZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNXaGl0ZWxpc3RlZChjb2RlKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmxvYWQgPT09ICdsYW5ndWFnZU9ubHknIHx8IHRoaXMub3B0aW9ucy5ub25FeHBsaWNpdFdoaXRlbGlzdCkge1xuICAgICAgICBjb2RlID0gdGhpcy5nZXRMYW5ndWFnZVBhcnRGcm9tQ29kZShjb2RlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICF0aGlzLndoaXRlbGlzdCB8fCAhdGhpcy53aGl0ZWxpc3QubGVuZ3RoIHx8IHRoaXMud2hpdGVsaXN0LmluZGV4T2YoY29kZSkgPiAtMTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0RmFsbGJhY2tDb2Rlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGYWxsYmFja0NvZGVzKGZhbGxiYWNrcywgY29kZSkge1xuICAgICAgaWYgKCFmYWxsYmFja3MpIHJldHVybiBbXTtcbiAgICAgIGlmICh0eXBlb2YgZmFsbGJhY2tzID09PSAnc3RyaW5nJykgZmFsbGJhY2tzID0gW2ZhbGxiYWNrc107XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5hcHBseShmYWxsYmFja3MpID09PSAnW29iamVjdCBBcnJheV0nKSByZXR1cm4gZmFsbGJhY2tzO1xuICAgICAgaWYgKCFjb2RlKSByZXR1cm4gZmFsbGJhY2tzW1wiZGVmYXVsdFwiXSB8fCBbXTsgLy8gYXN1bWUgd2UgaGF2ZSBhbiBvYmplY3QgZGVmaW5pbmcgZmFsbGJhY2tzXG5cbiAgICAgIHZhciBmb3VuZCA9IGZhbGxiYWNrc1tjb2RlXTtcbiAgICAgIGlmICghZm91bmQpIGZvdW5kID0gZmFsbGJhY2tzW3RoaXMuZ2V0U2NyaXB0UGFydEZyb21Db2RlKGNvZGUpXTtcbiAgICAgIGlmICghZm91bmQpIGZvdW5kID0gZmFsbGJhY2tzW3RoaXMuZm9ybWF0TGFuZ3VhZ2VDb2RlKGNvZGUpXTtcbiAgICAgIGlmICghZm91bmQpIGZvdW5kID0gZmFsbGJhY2tzW1wiZGVmYXVsdFwiXTtcbiAgICAgIHJldHVybiBmb3VuZCB8fCBbXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidG9SZXNvbHZlSGllcmFyY2h5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvUmVzb2x2ZUhpZXJhcmNoeShjb2RlLCBmYWxsYmFja0NvZGUpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHZhciBmYWxsYmFja0NvZGVzID0gdGhpcy5nZXRGYWxsYmFja0NvZGVzKGZhbGxiYWNrQ29kZSB8fCB0aGlzLm9wdGlvbnMuZmFsbGJhY2tMbmcgfHwgW10sIGNvZGUpO1xuICAgICAgdmFyIGNvZGVzID0gW107XG5cbiAgICAgIHZhciBhZGRDb2RlID0gZnVuY3Rpb24gYWRkQ29kZShjKSB7XG4gICAgICAgIGlmICghYykgcmV0dXJuO1xuXG4gICAgICAgIGlmIChfdGhpcy5pc1doaXRlbGlzdGVkKGMpKSB7XG4gICAgICAgICAgY29kZXMucHVzaChjKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5sb2dnZXIud2FybihcInJlamVjdGluZyBub24td2hpdGVsaXN0ZWQgbGFuZ3VhZ2UgY29kZTogXCIuY29uY2F0KGMpKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgaWYgKHR5cGVvZiBjb2RlID09PSAnc3RyaW5nJyAmJiBjb2RlLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMubG9hZCAhPT0gJ2xhbmd1YWdlT25seScpIGFkZENvZGUodGhpcy5mb3JtYXRMYW5ndWFnZUNvZGUoY29kZSkpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmxvYWQgIT09ICdsYW5ndWFnZU9ubHknICYmIHRoaXMub3B0aW9ucy5sb2FkICE9PSAnY3VycmVudE9ubHknKSBhZGRDb2RlKHRoaXMuZ2V0U2NyaXB0UGFydEZyb21Db2RlKGNvZGUpKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5sb2FkICE9PSAnY3VycmVudE9ubHknKSBhZGRDb2RlKHRoaXMuZ2V0TGFuZ3VhZ2VQYXJ0RnJvbUNvZGUoY29kZSkpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgY29kZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgYWRkQ29kZSh0aGlzLmZvcm1hdExhbmd1YWdlQ29kZShjb2RlKSk7XG4gICAgICB9XG5cbiAgICAgIGZhbGxiYWNrQ29kZXMuZm9yRWFjaChmdW5jdGlvbiAoZmMpIHtcbiAgICAgICAgaWYgKGNvZGVzLmluZGV4T2YoZmMpIDwgMCkgYWRkQ29kZShfdGhpcy5mb3JtYXRMYW5ndWFnZUNvZGUoZmMpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGNvZGVzO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBMYW5ndWFnZVV0aWw7XG59KCk7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5cbnZhciBzZXRzID0gW3tcbiAgbG5nczogWydhY2gnLCAnYWsnLCAnYW0nLCAnYXJuJywgJ2JyJywgJ2ZpbCcsICdndW4nLCAnbG4nLCAnbWZlJywgJ21nJywgJ21pJywgJ29jJywgJ3B0JywgJ3B0LUJSJywgJ3RnJywgJ3RpJywgJ3RyJywgJ3V6JywgJ3dhJ10sXG4gIG5yOiBbMSwgMl0sXG4gIGZjOiAxXG59LCB7XG4gIGxuZ3M6IFsnYWYnLCAnYW4nLCAnYXN0JywgJ2F6JywgJ2JnJywgJ2JuJywgJ2NhJywgJ2RhJywgJ2RlJywgJ2RldicsICdlbCcsICdlbicsICdlbycsICdlcycsICdldCcsICdldScsICdmaScsICdmbycsICdmdXInLCAnZnknLCAnZ2wnLCAnZ3UnLCAnaGEnLCAnaGknLCAnaHUnLCAnaHknLCAnaWEnLCAnaXQnLCAna24nLCAna3UnLCAnbGInLCAnbWFpJywgJ21sJywgJ21uJywgJ21yJywgJ25haCcsICduYXAnLCAnbmInLCAnbmUnLCAnbmwnLCAnbm4nLCAnbm8nLCAnbnNvJywgJ3BhJywgJ3BhcCcsICdwbXMnLCAncHMnLCAncHQtUFQnLCAncm0nLCAnc2NvJywgJ3NlJywgJ3NpJywgJ3NvJywgJ3NvbicsICdzcScsICdzdicsICdzdycsICd0YScsICd0ZScsICd0aycsICd1cicsICd5byddLFxuICBucjogWzEsIDJdLFxuICBmYzogMlxufSwge1xuICBsbmdzOiBbJ2F5JywgJ2JvJywgJ2NnZycsICdmYScsICdpZCcsICdqYScsICdqYm8nLCAna2EnLCAna2snLCAna20nLCAna28nLCAna3knLCAnbG8nLCAnbXMnLCAnc2FoJywgJ3N1JywgJ3RoJywgJ3R0JywgJ3VnJywgJ3ZpJywgJ3dvJywgJ3poJ10sXG4gIG5yOiBbMV0sXG4gIGZjOiAzXG59LCB7XG4gIGxuZ3M6IFsnYmUnLCAnYnMnLCAnY25yJywgJ2R6JywgJ2hyJywgJ3J1JywgJ3NyJywgJ3VrJ10sXG4gIG5yOiBbMSwgMiwgNV0sXG4gIGZjOiA0XG59LCB7XG4gIGxuZ3M6IFsnYXInXSxcbiAgbnI6IFswLCAxLCAyLCAzLCAxMSwgMTAwXSxcbiAgZmM6IDVcbn0sIHtcbiAgbG5nczogWydjcycsICdzayddLFxuICBucjogWzEsIDIsIDVdLFxuICBmYzogNlxufSwge1xuICBsbmdzOiBbJ2NzYicsICdwbCddLFxuICBucjogWzEsIDIsIDVdLFxuICBmYzogN1xufSwge1xuICBsbmdzOiBbJ2N5J10sXG4gIG5yOiBbMSwgMiwgMywgOF0sXG4gIGZjOiA4XG59LCB7XG4gIGxuZ3M6IFsnZnInXSxcbiAgbnI6IFsxLCAyXSxcbiAgZmM6IDlcbn0sIHtcbiAgbG5nczogWydnYSddLFxuICBucjogWzEsIDIsIDMsIDcsIDExXSxcbiAgZmM6IDEwXG59LCB7XG4gIGxuZ3M6IFsnZ2QnXSxcbiAgbnI6IFsxLCAyLCAzLCAyMF0sXG4gIGZjOiAxMVxufSwge1xuICBsbmdzOiBbJ2lzJ10sXG4gIG5yOiBbMSwgMl0sXG4gIGZjOiAxMlxufSwge1xuICBsbmdzOiBbJ2p2J10sXG4gIG5yOiBbMCwgMV0sXG4gIGZjOiAxM1xufSwge1xuICBsbmdzOiBbJ2t3J10sXG4gIG5yOiBbMSwgMiwgMywgNF0sXG4gIGZjOiAxNFxufSwge1xuICBsbmdzOiBbJ2x0J10sXG4gIG5yOiBbMSwgMiwgMTBdLFxuICBmYzogMTVcbn0sIHtcbiAgbG5nczogWydsdiddLFxuICBucjogWzEsIDIsIDBdLFxuICBmYzogMTZcbn0sIHtcbiAgbG5nczogWydtayddLFxuICBucjogWzEsIDJdLFxuICBmYzogMTdcbn0sIHtcbiAgbG5nczogWydtbmsnXSxcbiAgbnI6IFswLCAxLCAyXSxcbiAgZmM6IDE4XG59LCB7XG4gIGxuZ3M6IFsnbXQnXSxcbiAgbnI6IFsxLCAyLCAxMSwgMjBdLFxuICBmYzogMTlcbn0sIHtcbiAgbG5nczogWydvciddLFxuICBucjogWzIsIDFdLFxuICBmYzogMlxufSwge1xuICBsbmdzOiBbJ3JvJ10sXG4gIG5yOiBbMSwgMiwgMjBdLFxuICBmYzogMjBcbn0sIHtcbiAgbG5nczogWydzbCddLFxuICBucjogWzUsIDEsIDIsIDNdLFxuICBmYzogMjFcbn0sIHtcbiAgbG5nczogWydoZSddLFxuICBucjogWzEsIDIsIDIwLCAyMV0sXG4gIGZjOiAyMlxufV07XG52YXIgX3J1bGVzUGx1cmFsc1R5cGVzID0ge1xuICAxOiBmdW5jdGlvbiBfKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gPiAxKTtcbiAgfSxcbiAgMjogZnVuY3Rpb24gXyhuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuICE9IDEpO1xuICB9LFxuICAzOiBmdW5jdGlvbiBfKG4pIHtcbiAgICByZXR1cm4gMDtcbiAgfSxcbiAgNDogZnVuY3Rpb24gXyhuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuICUgMTAgPT0gMSAmJiBuICUgMTAwICE9IDExID8gMCA6IG4gJSAxMCA+PSAyICYmIG4gJSAxMCA8PSA0ICYmIChuICUgMTAwIDwgMTAgfHwgbiAlIDEwMCA+PSAyMCkgPyAxIDogMik7XG4gIH0sXG4gIDU6IGZ1bmN0aW9uIF8obikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PT0gMCA/IDAgOiBuID09IDEgPyAxIDogbiA9PSAyID8gMiA6IG4gJSAxMDAgPj0gMyAmJiBuICUgMTAwIDw9IDEwID8gMyA6IG4gJSAxMDAgPj0gMTEgPyA0IDogNSk7XG4gIH0sXG4gIDY6IGZ1bmN0aW9uIF8obikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PSAxID8gMCA6IG4gPj0gMiAmJiBuIDw9IDQgPyAxIDogMik7XG4gIH0sXG4gIDc6IGZ1bmN0aW9uIF8obikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PSAxID8gMCA6IG4gJSAxMCA+PSAyICYmIG4gJSAxMCA8PSA0ICYmIChuICUgMTAwIDwgMTAgfHwgbiAlIDEwMCA+PSAyMCkgPyAxIDogMik7XG4gIH0sXG4gIDg6IGZ1bmN0aW9uIF8obikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PSAxID8gMCA6IG4gPT0gMiA/IDEgOiBuICE9IDggJiYgbiAhPSAxMSA/IDIgOiAzKTtcbiAgfSxcbiAgOTogZnVuY3Rpb24gXyhuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuID49IDIpO1xuICB9LFxuICAxMDogZnVuY3Rpb24gXyhuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuID09IDEgPyAwIDogbiA9PSAyID8gMSA6IG4gPCA3ID8gMiA6IG4gPCAxMSA/IDMgOiA0KTtcbiAgfSxcbiAgMTE6IGZ1bmN0aW9uIF8obikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PSAxIHx8IG4gPT0gMTEgPyAwIDogbiA9PSAyIHx8IG4gPT0gMTIgPyAxIDogbiA+IDIgJiYgbiA8IDIwID8gMiA6IDMpO1xuICB9LFxuICAxMjogZnVuY3Rpb24gXyhuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuICUgMTAgIT0gMSB8fCBuICUgMTAwID09IDExKTtcbiAgfSxcbiAgMTM6IGZ1bmN0aW9uIF8obikge1xuICAgIHJldHVybiBOdW1iZXIobiAhPT0gMCk7XG4gIH0sXG4gIDE0OiBmdW5jdGlvbiBfKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gPT0gMSA/IDAgOiBuID09IDIgPyAxIDogbiA9PSAzID8gMiA6IDMpO1xuICB9LFxuICAxNTogZnVuY3Rpb24gXyhuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuICUgMTAgPT0gMSAmJiBuICUgMTAwICE9IDExID8gMCA6IG4gJSAxMCA+PSAyICYmIChuICUgMTAwIDwgMTAgfHwgbiAlIDEwMCA+PSAyMCkgPyAxIDogMik7XG4gIH0sXG4gIDE2OiBmdW5jdGlvbiBfKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gJSAxMCA9PSAxICYmIG4gJSAxMDAgIT0gMTEgPyAwIDogbiAhPT0gMCA/IDEgOiAyKTtcbiAgfSxcbiAgMTc6IGZ1bmN0aW9uIF8obikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PSAxIHx8IG4gJSAxMCA9PSAxID8gMCA6IDEpO1xuICB9LFxuICAxODogZnVuY3Rpb24gXyhuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuID09IDAgPyAwIDogbiA9PSAxID8gMSA6IDIpO1xuICB9LFxuICAxOTogZnVuY3Rpb24gXyhuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuID09IDEgPyAwIDogbiA9PT0gMCB8fCBuICUgMTAwID4gMSAmJiBuICUgMTAwIDwgMTEgPyAxIDogbiAlIDEwMCA+IDEwICYmIG4gJSAxMDAgPCAyMCA/IDIgOiAzKTtcbiAgfSxcbiAgMjA6IGZ1bmN0aW9uIF8obikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PSAxID8gMCA6IG4gPT09IDAgfHwgbiAlIDEwMCA+IDAgJiYgbiAlIDEwMCA8IDIwID8gMSA6IDIpO1xuICB9LFxuICAyMTogZnVuY3Rpb24gXyhuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuICUgMTAwID09IDEgPyAxIDogbiAlIDEwMCA9PSAyID8gMiA6IG4gJSAxMDAgPT0gMyB8fCBuICUgMTAwID09IDQgPyAzIDogMCk7XG4gIH0sXG4gIDIyOiBmdW5jdGlvbiBfKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gPT09IDEgPyAwIDogbiA9PT0gMiA/IDEgOiAobiA8IDAgfHwgbiA+IDEwKSAmJiBuICUgMTAgPT0gMCA/IDIgOiAzKTtcbiAgfVxufTtcbi8qIGVzbGludC1lbmFibGUgKi9cblxuZnVuY3Rpb24gY3JlYXRlUnVsZXMoKSB7XG4gIHZhciBydWxlcyA9IHt9O1xuICBzZXRzLmZvckVhY2goZnVuY3Rpb24gKHNldCkge1xuICAgIHNldC5sbmdzLmZvckVhY2goZnVuY3Rpb24gKGwpIHtcbiAgICAgIHJ1bGVzW2xdID0ge1xuICAgICAgICBudW1iZXJzOiBzZXQubnIsXG4gICAgICAgIHBsdXJhbHM6IF9ydWxlc1BsdXJhbHNUeXBlc1tzZXQuZmNdXG4gICAgICB9O1xuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIHJ1bGVzO1xufVxuXG52YXIgUGx1cmFsUmVzb2x2ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQbHVyYWxSZXNvbHZlcihsYW5ndWFnZVV0aWxzKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBsdXJhbFJlc29sdmVyKTtcblxuICAgIHRoaXMubGFuZ3VhZ2VVdGlscyA9IGxhbmd1YWdlVXRpbHM7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLmxvZ2dlciA9IGJhc2VMb2dnZXIuY3JlYXRlKCdwbHVyYWxSZXNvbHZlcicpO1xuICAgIHRoaXMucnVsZXMgPSBjcmVhdGVSdWxlcygpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFBsdXJhbFJlc29sdmVyLCBbe1xuICAgIGtleTogXCJhZGRSdWxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFJ1bGUobG5nLCBvYmopIHtcbiAgICAgIHRoaXMucnVsZXNbbG5nXSA9IG9iajtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0UnVsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSdWxlKGNvZGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJ1bGVzW2NvZGVdIHx8IHRoaXMucnVsZXNbdGhpcy5sYW5ndWFnZVV0aWxzLmdldExhbmd1YWdlUGFydEZyb21Db2RlKGNvZGUpXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibmVlZHNQbHVyYWxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbmVlZHNQbHVyYWwoY29kZSkge1xuICAgICAgdmFyIHJ1bGUgPSB0aGlzLmdldFJ1bGUoY29kZSk7XG4gICAgICByZXR1cm4gcnVsZSAmJiBydWxlLm51bWJlcnMubGVuZ3RoID4gMTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0UGx1cmFsRm9ybXNPZktleVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQbHVyYWxGb3Jtc09mS2V5KGNvZGUsIGtleSkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIHJldCA9IFtdO1xuICAgICAgdmFyIHJ1bGUgPSB0aGlzLmdldFJ1bGUoY29kZSk7XG4gICAgICBpZiAoIXJ1bGUpIHJldHVybiByZXQ7XG4gICAgICBydWxlLm51bWJlcnMuZm9yRWFjaChmdW5jdGlvbiAobikge1xuICAgICAgICB2YXIgc3VmZml4ID0gX3RoaXMuZ2V0U3VmZml4KGNvZGUsIG4pO1xuXG4gICAgICAgIHJldC5wdXNoKFwiXCIuY29uY2F0KGtleSkuY29uY2F0KHN1ZmZpeCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRTdWZmaXhcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U3VmZml4KGNvZGUsIGNvdW50KSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIHJ1bGUgPSB0aGlzLmdldFJ1bGUoY29kZSk7XG5cbiAgICAgIGlmIChydWxlKSB7XG4gICAgICAgIC8vIGlmIChydWxlLm51bWJlcnMubGVuZ3RoID09PSAxKSByZXR1cm4gJyc7IC8vIG9ubHkgc2luZ3VsYXJcbiAgICAgICAgdmFyIGlkeCA9IHJ1bGUubm9BYnMgPyBydWxlLnBsdXJhbHMoY291bnQpIDogcnVsZS5wbHVyYWxzKE1hdGguYWJzKGNvdW50KSk7XG4gICAgICAgIHZhciBzdWZmaXggPSBydWxlLm51bWJlcnNbaWR4XTsgLy8gc3BlY2lhbCB0cmVhdG1lbnQgZm9yIGxuZ3Mgb25seSBoYXZpbmcgc2luZ3VsYXIgYW5kIHBsdXJhbFxuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2ltcGxpZnlQbHVyYWxTdWZmaXggJiYgcnVsZS5udW1iZXJzLmxlbmd0aCA9PT0gMiAmJiBydWxlLm51bWJlcnNbMF0gPT09IDEpIHtcbiAgICAgICAgICBpZiAoc3VmZml4ID09PSAyKSB7XG4gICAgICAgICAgICBzdWZmaXggPSAncGx1cmFsJztcbiAgICAgICAgICB9IGVsc2UgaWYgKHN1ZmZpeCA9PT0gMSkge1xuICAgICAgICAgICAgc3VmZml4ID0gJyc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJldHVyblN1ZmZpeCA9IGZ1bmN0aW9uIHJldHVyblN1ZmZpeCgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLm9wdGlvbnMucHJlcGVuZCAmJiBzdWZmaXgudG9TdHJpbmcoKSA/IF90aGlzMi5vcHRpb25zLnByZXBlbmQgKyBzdWZmaXgudG9TdHJpbmcoKSA6IHN1ZmZpeC50b1N0cmluZygpO1xuICAgICAgICB9OyAvLyBDT01QQVRJQklMSVRZIEpTT05cbiAgICAgICAgLy8gdjFcblxuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY29tcGF0aWJpbGl0eUpTT04gPT09ICd2MScpIHtcbiAgICAgICAgICBpZiAoc3VmZml4ID09PSAxKSByZXR1cm4gJyc7XG4gICAgICAgICAgaWYgKHR5cGVvZiBzdWZmaXggPT09ICdudW1iZXInKSByZXR1cm4gXCJfcGx1cmFsX1wiLmNvbmNhdChzdWZmaXgudG9TdHJpbmcoKSk7XG4gICAgICAgICAgcmV0dXJuIHJldHVyblN1ZmZpeCgpO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAvKiB2MiAqL1xuICAgICAgICB0aGlzLm9wdGlvbnMuY29tcGF0aWJpbGl0eUpTT04gPT09ICd2MicpIHtcbiAgICAgICAgICByZXR1cm4gcmV0dXJuU3VmZml4KCk7XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIC8qIHYzIC0gZ2V0dGV4dCBpbmRleCAqL1xuICAgICAgICB0aGlzLm9wdGlvbnMuc2ltcGxpZnlQbHVyYWxTdWZmaXggJiYgcnVsZS5udW1iZXJzLmxlbmd0aCA9PT0gMiAmJiBydWxlLm51bWJlcnNbMF0gPT09IDEpIHtcbiAgICAgICAgICByZXR1cm4gcmV0dXJuU3VmZml4KCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnByZXBlbmQgJiYgaWR4LnRvU3RyaW5nKCkgPyB0aGlzLm9wdGlvbnMucHJlcGVuZCArIGlkeC50b1N0cmluZygpIDogaWR4LnRvU3RyaW5nKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubG9nZ2VyLndhcm4oXCJubyBwbHVyYWwgcnVsZSBmb3VuZCBmb3I6IFwiLmNvbmNhdChjb2RlKSk7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBsdXJhbFJlc29sdmVyO1xufSgpO1xuXG52YXIgSW50ZXJwb2xhdG9yID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gSW50ZXJwb2xhdG9yKCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbnRlcnBvbGF0b3IpO1xuXG4gICAgdGhpcy5sb2dnZXIgPSBiYXNlTG9nZ2VyLmNyZWF0ZSgnaW50ZXJwb2xhdG9yJyk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICAgIHRoaXMuZm9ybWF0ID0gb3B0aW9ucy5pbnRlcnBvbGF0aW9uICYmIG9wdGlvbnMuaW50ZXJwb2xhdGlvbi5mb3JtYXQgfHwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcblxuICAgIHRoaXMuaW5pdChvcHRpb25zKTtcbiAgfVxuICAvKiBlc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246IDAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhJbnRlcnBvbGF0b3IsIFt7XG4gICAga2V5OiBcImluaXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAgIGlmICghb3B0aW9ucy5pbnRlcnBvbGF0aW9uKSBvcHRpb25zLmludGVycG9sYXRpb24gPSB7XG4gICAgICAgIGVzY2FwZVZhbHVlOiB0cnVlXG4gICAgICB9O1xuICAgICAgdmFyIGlPcHRzID0gb3B0aW9ucy5pbnRlcnBvbGF0aW9uO1xuICAgICAgdGhpcy5lc2NhcGUgPSBpT3B0cy5lc2NhcGUgIT09IHVuZGVmaW5lZCA/IGlPcHRzLmVzY2FwZSA6IGVzY2FwZTtcbiAgICAgIHRoaXMuZXNjYXBlVmFsdWUgPSBpT3B0cy5lc2NhcGVWYWx1ZSAhPT0gdW5kZWZpbmVkID8gaU9wdHMuZXNjYXBlVmFsdWUgOiB0cnVlO1xuICAgICAgdGhpcy51c2VSYXdWYWx1ZVRvRXNjYXBlID0gaU9wdHMudXNlUmF3VmFsdWVUb0VzY2FwZSAhPT0gdW5kZWZpbmVkID8gaU9wdHMudXNlUmF3VmFsdWVUb0VzY2FwZSA6IGZhbHNlO1xuICAgICAgdGhpcy5wcmVmaXggPSBpT3B0cy5wcmVmaXggPyByZWdleEVzY2FwZShpT3B0cy5wcmVmaXgpIDogaU9wdHMucHJlZml4RXNjYXBlZCB8fCAne3snO1xuICAgICAgdGhpcy5zdWZmaXggPSBpT3B0cy5zdWZmaXggPyByZWdleEVzY2FwZShpT3B0cy5zdWZmaXgpIDogaU9wdHMuc3VmZml4RXNjYXBlZCB8fCAnfX0nO1xuICAgICAgdGhpcy5mb3JtYXRTZXBhcmF0b3IgPSBpT3B0cy5mb3JtYXRTZXBhcmF0b3IgPyBpT3B0cy5mb3JtYXRTZXBhcmF0b3IgOiBpT3B0cy5mb3JtYXRTZXBhcmF0b3IgfHwgJywnO1xuICAgICAgdGhpcy51bmVzY2FwZVByZWZpeCA9IGlPcHRzLnVuZXNjYXBlU3VmZml4ID8gJycgOiBpT3B0cy51bmVzY2FwZVByZWZpeCB8fCAnLSc7XG4gICAgICB0aGlzLnVuZXNjYXBlU3VmZml4ID0gdGhpcy51bmVzY2FwZVByZWZpeCA/ICcnIDogaU9wdHMudW5lc2NhcGVTdWZmaXggfHwgJyc7XG4gICAgICB0aGlzLm5lc3RpbmdQcmVmaXggPSBpT3B0cy5uZXN0aW5nUHJlZml4ID8gcmVnZXhFc2NhcGUoaU9wdHMubmVzdGluZ1ByZWZpeCkgOiBpT3B0cy5uZXN0aW5nUHJlZml4RXNjYXBlZCB8fCByZWdleEVzY2FwZSgnJHQoJyk7XG4gICAgICB0aGlzLm5lc3RpbmdTdWZmaXggPSBpT3B0cy5uZXN0aW5nU3VmZml4ID8gcmVnZXhFc2NhcGUoaU9wdHMubmVzdGluZ1N1ZmZpeCkgOiBpT3B0cy5uZXN0aW5nU3VmZml4RXNjYXBlZCB8fCByZWdleEVzY2FwZSgnKScpO1xuICAgICAgdGhpcy5tYXhSZXBsYWNlcyA9IGlPcHRzLm1heFJlcGxhY2VzID8gaU9wdHMubWF4UmVwbGFjZXMgOiAxMDAwOyAvLyB0aGUgcmVnZXhwXG5cbiAgICAgIHRoaXMucmVzZXRSZWdFeHAoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVzZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zKSB0aGlzLmluaXQodGhpcy5vcHRpb25zKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVzZXRSZWdFeHBcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXRSZWdFeHAoKSB7XG4gICAgICAvLyB0aGUgcmVnZXhwXG4gICAgICB2YXIgcmVnZXhwU3RyID0gXCJcIi5jb25jYXQodGhpcy5wcmVmaXgsIFwiKC4rPylcIikuY29uY2F0KHRoaXMuc3VmZml4KTtcbiAgICAgIHRoaXMucmVnZXhwID0gbmV3IFJlZ0V4cChyZWdleHBTdHIsICdnJyk7XG4gICAgICB2YXIgcmVnZXhwVW5lc2NhcGVTdHIgPSBcIlwiLmNvbmNhdCh0aGlzLnByZWZpeCkuY29uY2F0KHRoaXMudW5lc2NhcGVQcmVmaXgsIFwiKC4rPylcIikuY29uY2F0KHRoaXMudW5lc2NhcGVTdWZmaXgpLmNvbmNhdCh0aGlzLnN1ZmZpeCk7XG4gICAgICB0aGlzLnJlZ2V4cFVuZXNjYXBlID0gbmV3IFJlZ0V4cChyZWdleHBVbmVzY2FwZVN0ciwgJ2cnKTtcbiAgICAgIHZhciBuZXN0aW5nUmVnZXhwU3RyID0gXCJcIi5jb25jYXQodGhpcy5uZXN0aW5nUHJlZml4LCBcIiguKz8pXCIpLmNvbmNhdCh0aGlzLm5lc3RpbmdTdWZmaXgpO1xuICAgICAgdGhpcy5uZXN0aW5nUmVnZXhwID0gbmV3IFJlZ0V4cChuZXN0aW5nUmVnZXhwU3RyLCAnZycpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpbnRlcnBvbGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnRlcnBvbGF0ZShzdHIsIGRhdGEsIGxuZywgb3B0aW9ucykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIG1hdGNoO1xuICAgICAgdmFyIHZhbHVlO1xuICAgICAgdmFyIHJlcGxhY2VzO1xuICAgICAgdmFyIGRlZmF1bHREYXRhID0gdGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uICYmIHRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uLmRlZmF1bHRWYXJpYWJsZXMgfHwge307XG5cbiAgICAgIGZ1bmN0aW9uIHJlZ2V4U2FmZSh2YWwpIHtcbiAgICAgICAgcmV0dXJuIHZhbC5yZXBsYWNlKC9cXCQvZywgJyQkJCQnKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGhhbmRsZUZvcm1hdCA9IGZ1bmN0aW9uIGhhbmRsZUZvcm1hdChrZXkpIHtcbiAgICAgICAgaWYgKGtleS5pbmRleE9mKF90aGlzLmZvcm1hdFNlcGFyYXRvcikgPCAwKSB7XG4gICAgICAgICAgcmV0dXJuIGdldFBhdGhXaXRoRGVmYXVsdHMoZGF0YSwgZGVmYXVsdERhdGEsIGtleSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcCA9IGtleS5zcGxpdChfdGhpcy5mb3JtYXRTZXBhcmF0b3IpO1xuICAgICAgICB2YXIgayA9IHAuc2hpZnQoKS50cmltKCk7XG4gICAgICAgIHZhciBmID0gcC5qb2luKF90aGlzLmZvcm1hdFNlcGFyYXRvcikudHJpbSgpO1xuICAgICAgICByZXR1cm4gX3RoaXMuZm9ybWF0KGdldFBhdGhXaXRoRGVmYXVsdHMoZGF0YSwgZGVmYXVsdERhdGEsIGspLCBmLCBsbmcpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5yZXNldFJlZ0V4cCgpO1xuICAgICAgdmFyIG1pc3NpbmdJbnRlcnBvbGF0aW9uSGFuZGxlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5taXNzaW5nSW50ZXJwb2xhdGlvbkhhbmRsZXIgfHwgdGhpcy5vcHRpb25zLm1pc3NpbmdJbnRlcnBvbGF0aW9uSGFuZGxlcjtcbiAgICAgIHJlcGxhY2VzID0gMDsgLy8gdW5lc2NhcGUgaWYgaGFzIHVuZXNjYXBlUHJlZml4L1N1ZmZpeFxuXG4gICAgICAvKiBlc2xpbnQgbm8tY29uZC1hc3NpZ246IDAgKi9cblxuICAgICAgd2hpbGUgKG1hdGNoID0gdGhpcy5yZWdleHBVbmVzY2FwZS5leGVjKHN0cikpIHtcbiAgICAgICAgdmFsdWUgPSBoYW5kbGVGb3JtYXQobWF0Y2hbMV0udHJpbSgpKTtcblxuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICh0eXBlb2YgbWlzc2luZ0ludGVycG9sYXRpb25IYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB2YXIgdGVtcCA9IG1pc3NpbmdJbnRlcnBvbGF0aW9uSGFuZGxlcihzdHIsIG1hdGNoLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHZhbHVlID0gdHlwZW9mIHRlbXAgPT09ICdzdHJpbmcnID8gdGVtcCA6ICcnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuKFwibWlzc2VkIHRvIHBhc3MgaW4gdmFyaWFibGUgXCIuY29uY2F0KG1hdGNoWzFdLCBcIiBmb3IgaW50ZXJwb2xhdGluZyBcIikuY29uY2F0KHN0cikpO1xuICAgICAgICAgICAgdmFsdWUgPSAnJztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyAmJiAhdGhpcy51c2VSYXdWYWx1ZVRvRXNjYXBlKSB7XG4gICAgICAgICAgdmFsdWUgPSBtYWtlU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKG1hdGNoWzBdLCByZWdleFNhZmUodmFsdWUpKTtcbiAgICAgICAgdGhpcy5yZWdleHBVbmVzY2FwZS5sYXN0SW5kZXggPSAwO1xuICAgICAgICByZXBsYWNlcysrO1xuXG4gICAgICAgIGlmIChyZXBsYWNlcyA+PSB0aGlzLm1heFJlcGxhY2VzKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmVwbGFjZXMgPSAwOyAvLyByZWd1bGFyIGVzY2FwZSBvbiBkZW1hbmRcblxuICAgICAgd2hpbGUgKG1hdGNoID0gdGhpcy5yZWdleHAuZXhlYyhzdHIpKSB7XG4gICAgICAgIHZhbHVlID0gaGFuZGxlRm9ybWF0KG1hdGNoWzFdLnRyaW0oKSk7XG5cbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIG1pc3NpbmdJbnRlcnBvbGF0aW9uSGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdmFyIF90ZW1wID0gbWlzc2luZ0ludGVycG9sYXRpb25IYW5kbGVyKHN0ciwgbWF0Y2gsIG9wdGlvbnMpO1xuXG4gICAgICAgICAgICB2YWx1ZSA9IHR5cGVvZiBfdGVtcCA9PT0gJ3N0cmluZycgPyBfdGVtcCA6ICcnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuKFwibWlzc2VkIHRvIHBhc3MgaW4gdmFyaWFibGUgXCIuY29uY2F0KG1hdGNoWzFdLCBcIiBmb3IgaW50ZXJwb2xhdGluZyBcIikuY29uY2F0KHN0cikpO1xuICAgICAgICAgICAgdmFsdWUgPSAnJztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyAmJiAhdGhpcy51c2VSYXdWYWx1ZVRvRXNjYXBlKSB7XG4gICAgICAgICAgdmFsdWUgPSBtYWtlU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhbHVlID0gdGhpcy5lc2NhcGVWYWx1ZSA/IHJlZ2V4U2FmZSh0aGlzLmVzY2FwZSh2YWx1ZSkpIDogcmVnZXhTYWZlKHZhbHVlKTtcbiAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UobWF0Y2hbMF0sIHZhbHVlKTtcbiAgICAgICAgdGhpcy5yZWdleHAubGFzdEluZGV4ID0gMDtcbiAgICAgICAgcmVwbGFjZXMrKztcblxuICAgICAgICBpZiAocmVwbGFjZXMgPj0gdGhpcy5tYXhSZXBsYWNlcykge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm5lc3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbmVzdChzdHIsIGZjKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgICB2YXIgbWF0Y2g7XG4gICAgICB2YXIgdmFsdWU7XG5cbiAgICAgIHZhciBjbG9uZWRPcHRpb25zID0gX29iamVjdFNwcmVhZCh7fSwgb3B0aW9ucyk7XG5cbiAgICAgIGNsb25lZE9wdGlvbnMuYXBwbHlQb3N0UHJvY2Vzc29yID0gZmFsc2U7IC8vIGF2b2lkIHBvc3QgcHJvY2Vzc2luZyBvbiBuZXN0ZWQgbG9va3VwXG5cbiAgICAgIGRlbGV0ZSBjbG9uZWRPcHRpb25zLmRlZmF1bHRWYWx1ZTsgLy8gYXNzZXJ0IHdlIGRvIG5vdCBnZXQgYSBlbmRsZXNzIGxvb3Agb24gaW50ZXJwb2xhdGluZyBkZWZhdWx0VmFsdWUgYWdhaW4gYW5kIGFnYWluXG4gICAgICAvLyBpZiB2YWx1ZSBpcyBzb21ldGhpbmcgbGlrZSBcIm15S2V5XCI6IFwibG9yZW0gJChhbm90aGVyS2V5LCB7IFwiY291bnRcIjoge3thVmFsdWVJbk9wdGlvbnN9fSB9KVwiXG5cbiAgICAgIGZ1bmN0aW9uIGhhbmRsZUhhc09wdGlvbnMoa2V5LCBpbmhlcml0ZWRPcHRpb25zKSB7XG4gICAgICAgIGlmIChrZXkuaW5kZXhPZignLCcpIDwgMCkgcmV0dXJuIGtleTtcbiAgICAgICAgdmFyIHAgPSBrZXkuc3BsaXQoJywnKTtcbiAgICAgICAga2V5ID0gcC5zaGlmdCgpO1xuICAgICAgICB2YXIgb3B0aW9uc1N0cmluZyA9IHAuam9pbignLCcpO1xuICAgICAgICBvcHRpb25zU3RyaW5nID0gdGhpcy5pbnRlcnBvbGF0ZShvcHRpb25zU3RyaW5nLCBjbG9uZWRPcHRpb25zKTtcbiAgICAgICAgb3B0aW9uc1N0cmluZyA9IG9wdGlvbnNTdHJpbmcucmVwbGFjZSgvJy9nLCAnXCInKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGNsb25lZE9wdGlvbnMgPSBKU09OLnBhcnNlKG9wdGlvbnNTdHJpbmcpO1xuICAgICAgICAgIGlmIChpbmhlcml0ZWRPcHRpb25zKSBjbG9uZWRPcHRpb25zID0gX29iamVjdFNwcmVhZCh7fSwgaW5oZXJpdGVkT3B0aW9ucywgY2xvbmVkT3B0aW9ucyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihcImZhaWxlZCBwYXJzaW5nIG9wdGlvbnMgc3RyaW5nIGluIG5lc3RpbmcgZm9yIGtleSBcIi5jb25jYXQoa2V5KSwgZSk7XG4gICAgICAgIH0gLy8gYXNzZXJ0IHdlIGRvIG5vdCBnZXQgYSBlbmRsZXNzIGxvb3Agb24gaW50ZXJwb2xhdGluZyBkZWZhdWx0VmFsdWUgYWdhaW4gYW5kIGFnYWluXG5cblxuICAgICAgICBkZWxldGUgY2xvbmVkT3B0aW9ucy5kZWZhdWx0VmFsdWU7XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgICB9IC8vIHJlZ3VsYXIgZXNjYXBlIG9uIGRlbWFuZFxuXG5cbiAgICAgIHdoaWxlIChtYXRjaCA9IHRoaXMubmVzdGluZ1JlZ2V4cC5leGVjKHN0cikpIHtcbiAgICAgICAgdmFsdWUgPSBmYyhoYW5kbGVIYXNPcHRpb25zLmNhbGwodGhpcywgbWF0Y2hbMV0udHJpbSgpLCBjbG9uZWRPcHRpb25zKSwgY2xvbmVkT3B0aW9ucyk7IC8vIGlzIG9ubHkgdGhlIG5lc3Rpbmcga2V5IChrZXkxID0gJyQoa2V5MiknKSByZXR1cm4gdGhlIHZhbHVlIHdpdGhvdXQgc3RyaW5naWZ5XG5cbiAgICAgICAgaWYgKHZhbHVlICYmIG1hdGNoWzBdID09PSBzdHIgJiYgdHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykgcmV0dXJuIHZhbHVlOyAvLyBubyBzdHJpbmcgdG8gaW5jbHVkZSBvciBlbXB0eVxuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB2YWx1ZSA9IG1ha2VTdHJpbmcodmFsdWUpO1xuXG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuKFwibWlzc2VkIHRvIHJlc29sdmUgXCIuY29uY2F0KG1hdGNoWzFdLCBcIiBmb3IgbmVzdGluZyBcIikuY29uY2F0KHN0cikpO1xuICAgICAgICAgIHZhbHVlID0gJyc7XG4gICAgICAgIH0gLy8gTmVzdGVkIGtleXMgc2hvdWxkIG5vdCBiZSBlc2NhcGVkIGJ5IGRlZmF1bHQgIzg1NFxuICAgICAgICAvLyB2YWx1ZSA9IHRoaXMuZXNjYXBlVmFsdWUgPyByZWdleFNhZmUodXRpbHMuZXNjYXBlKHZhbHVlKSkgOiByZWdleFNhZmUodmFsdWUpO1xuXG5cbiAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UobWF0Y2hbMF0sIHZhbHVlKTtcbiAgICAgICAgdGhpcy5yZWdleHAubGFzdEluZGV4ID0gMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gSW50ZXJwb2xhdG9yO1xufSgpO1xuXG5mdW5jdGlvbiByZW1vdmUoYXJyLCB3aGF0KSB7XG4gIHZhciBmb3VuZCA9IGFyci5pbmRleE9mKHdoYXQpO1xuXG4gIHdoaWxlIChmb3VuZCAhPT0gLTEpIHtcbiAgICBhcnIuc3BsaWNlKGZvdW5kLCAxKTtcbiAgICBmb3VuZCA9IGFyci5pbmRleE9mKHdoYXQpO1xuICB9XG59XG5cbnZhciBDb25uZWN0b3IgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9FdmVudEVtaXR0ZXIpIHtcbiAgX2luaGVyaXRzKENvbm5lY3RvciwgX0V2ZW50RW1pdHRlcik7XG5cbiAgZnVuY3Rpb24gQ29ubmVjdG9yKGJhY2tlbmQsIHN0b3JlLCBzZXJ2aWNlcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7fTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb25uZWN0b3IpO1xuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQ29ubmVjdG9yKS5jYWxsKHRoaXMpKTtcbiAgICBFdmVudEVtaXR0ZXIuY2FsbChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7IC8vIDw9SUUxMCBmaXggKHVuYWJsZSB0byBjYWxsIHBhcmVudCBjb25zdHJ1Y3RvcilcblxuICAgIF90aGlzLmJhY2tlbmQgPSBiYWNrZW5kO1xuICAgIF90aGlzLnN0b3JlID0gc3RvcmU7XG4gICAgX3RoaXMuc2VydmljZXMgPSBzZXJ2aWNlcztcbiAgICBfdGhpcy5sYW5ndWFnZVV0aWxzID0gc2VydmljZXMubGFuZ3VhZ2VVdGlscztcbiAgICBfdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICBfdGhpcy5sb2dnZXIgPSBiYXNlTG9nZ2VyLmNyZWF0ZSgnYmFja2VuZENvbm5lY3RvcicpO1xuICAgIF90aGlzLnN0YXRlID0ge307XG4gICAgX3RoaXMucXVldWUgPSBbXTtcblxuICAgIGlmIChfdGhpcy5iYWNrZW5kICYmIF90aGlzLmJhY2tlbmQuaW5pdCkge1xuICAgICAgX3RoaXMuYmFja2VuZC5pbml0KHNlcnZpY2VzLCBvcHRpb25zLmJhY2tlbmQsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDb25uZWN0b3IsIFt7XG4gICAga2V5OiBcInF1ZXVlTG9hZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBxdWV1ZUxvYWQobGFuZ3VhZ2VzLCBuYW1lc3BhY2VzLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIC8vIGZpbmQgd2hhdCBuZWVkcyB0byBiZSBsb2FkZWRcbiAgICAgIHZhciB0b0xvYWQgPSBbXTtcbiAgICAgIHZhciBwZW5kaW5nID0gW107XG4gICAgICB2YXIgdG9Mb2FkTGFuZ3VhZ2VzID0gW107XG4gICAgICB2YXIgdG9Mb2FkTmFtZXNwYWNlcyA9IFtdO1xuICAgICAgbGFuZ3VhZ2VzLmZvckVhY2goZnVuY3Rpb24gKGxuZykge1xuICAgICAgICB2YXIgaGFzQWxsTmFtZXNwYWNlcyA9IHRydWU7XG4gICAgICAgIG5hbWVzcGFjZXMuZm9yRWFjaChmdW5jdGlvbiAobnMpIHtcbiAgICAgICAgICB2YXIgbmFtZSA9IFwiXCIuY29uY2F0KGxuZywgXCJ8XCIpLmNvbmNhdChucyk7XG5cbiAgICAgICAgICBpZiAoIW9wdGlvbnMucmVsb2FkICYmIF90aGlzMi5zdG9yZS5oYXNSZXNvdXJjZUJ1bmRsZShsbmcsIG5zKSkge1xuICAgICAgICAgICAgX3RoaXMyLnN0YXRlW25hbWVdID0gMjsgLy8gbG9hZGVkXG4gICAgICAgICAgfSBlbHNlIGlmIChfdGhpczIuc3RhdGVbbmFtZV0gPCAwKSA7IGVsc2UgaWYgKF90aGlzMi5zdGF0ZVtuYW1lXSA9PT0gMSkge1xuICAgICAgICAgICAgaWYgKHBlbmRpbmcuaW5kZXhPZihuYW1lKSA8IDApIHBlbmRpbmcucHVzaChuYW1lKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMyLnN0YXRlW25hbWVdID0gMTsgLy8gcGVuZGluZ1xuXG4gICAgICAgICAgICBoYXNBbGxOYW1lc3BhY2VzID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAocGVuZGluZy5pbmRleE9mKG5hbWUpIDwgMCkgcGVuZGluZy5wdXNoKG5hbWUpO1xuICAgICAgICAgICAgaWYgKHRvTG9hZC5pbmRleE9mKG5hbWUpIDwgMCkgdG9Mb2FkLnB1c2gobmFtZSk7XG4gICAgICAgICAgICBpZiAodG9Mb2FkTmFtZXNwYWNlcy5pbmRleE9mKG5zKSA8IDApIHRvTG9hZE5hbWVzcGFjZXMucHVzaChucyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFoYXNBbGxOYW1lc3BhY2VzKSB0b0xvYWRMYW5ndWFnZXMucHVzaChsbmcpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICh0b0xvYWQubGVuZ3RoIHx8IHBlbmRpbmcubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMucXVldWUucHVzaCh7XG4gICAgICAgICAgcGVuZGluZzogcGVuZGluZyxcbiAgICAgICAgICBsb2FkZWQ6IHt9LFxuICAgICAgICAgIGVycm9yczogW10sXG4gICAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b0xvYWQ6IHRvTG9hZCxcbiAgICAgICAgcGVuZGluZzogcGVuZGluZyxcbiAgICAgICAgdG9Mb2FkTGFuZ3VhZ2VzOiB0b0xvYWRMYW5ndWFnZXMsXG4gICAgICAgIHRvTG9hZE5hbWVzcGFjZXM6IHRvTG9hZE5hbWVzcGFjZXNcbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImxvYWRlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkZWQobmFtZSwgZXJyLCBkYXRhKSB7XG4gICAgICB2YXIgX25hbWUkc3BsaXQgPSBuYW1lLnNwbGl0KCd8JyksXG4gICAgICAgICAgX25hbWUkc3BsaXQyID0gX3NsaWNlZFRvQXJyYXkoX25hbWUkc3BsaXQsIDIpLFxuICAgICAgICAgIGxuZyA9IF9uYW1lJHNwbGl0MlswXSxcbiAgICAgICAgICBucyA9IF9uYW1lJHNwbGl0MlsxXTtcblxuICAgICAgaWYgKGVycikgdGhpcy5lbWl0KCdmYWlsZWRMb2FkaW5nJywgbG5nLCBucywgZXJyKTtcblxuICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgdGhpcy5zdG9yZS5hZGRSZXNvdXJjZUJ1bmRsZShsbmcsIG5zLCBkYXRhKTtcbiAgICAgIH0gLy8gc2V0IGxvYWRlZFxuXG5cbiAgICAgIHRoaXMuc3RhdGVbbmFtZV0gPSBlcnIgPyAtMSA6IDI7IC8vIGNvbnNvbGlkYXRlZCBsb2FkaW5nIGRvbmUgaW4gdGhpcyBydW4gLSBvbmx5IGVtaXQgb25jZSBmb3IgYSBsb2FkZWQgbmFtZXNwYWNlXG5cbiAgICAgIHZhciBsb2FkZWQgPSB7fTsgLy8gY2FsbGJhY2sgaWYgcmVhZHlcblxuICAgICAgdGhpcy5xdWV1ZS5mb3JFYWNoKGZ1bmN0aW9uIChxKSB7XG4gICAgICAgIHB1c2hQYXRoKHEubG9hZGVkLCBbbG5nXSwgbnMpO1xuICAgICAgICByZW1vdmUocS5wZW5kaW5nLCBuYW1lKTtcbiAgICAgICAgaWYgKGVycikgcS5lcnJvcnMucHVzaChlcnIpO1xuXG4gICAgICAgIGlmIChxLnBlbmRpbmcubGVuZ3RoID09PSAwICYmICFxLmRvbmUpIHtcbiAgICAgICAgICAvLyBvbmx5IGRvIG9uY2UgcGVyIGxvYWRlZCAtPiB0aGlzLmVtaXQoJ2xvYWRlZCcsIHEubG9hZGVkKTtcbiAgICAgICAgICBPYmplY3Qua2V5cyhxLmxvYWRlZCkuZm9yRWFjaChmdW5jdGlvbiAobCkge1xuICAgICAgICAgICAgaWYgKCFsb2FkZWRbbF0pIGxvYWRlZFtsXSA9IFtdO1xuXG4gICAgICAgICAgICBpZiAocS5sb2FkZWRbbF0ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHEubG9hZGVkW2xdLmZvckVhY2goZnVuY3Rpb24gKG5zKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxvYWRlZFtsXS5pbmRleE9mKG5zKSA8IDApIGxvYWRlZFtsXS5wdXNoKG5zKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgLyogZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOiAwICovXG5cbiAgICAgICAgICBxLmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgaWYgKHEuZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICAgICAgcS5jYWxsYmFjayhxLmVycm9ycyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHEuY2FsbGJhY2soKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pOyAvLyBlbWl0IGNvbnNvbGlkYXRlZCBsb2FkZWQgZXZlbnRcblxuICAgICAgdGhpcy5lbWl0KCdsb2FkZWQnLCBsb2FkZWQpOyAvLyByZW1vdmUgZG9uZSBsb2FkIHJlcXVlc3RzXG5cbiAgICAgIHRoaXMucXVldWUgPSB0aGlzLnF1ZXVlLmZpbHRlcihmdW5jdGlvbiAocSkge1xuICAgICAgICByZXR1cm4gIXEuZG9uZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZWFkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlYWQobG5nLCBucywgZmNOYW1lKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIHRyaWVkID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiAwO1xuICAgICAgdmFyIHdhaXQgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IDI1MDtcbiAgICAgIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ID8gYXJndW1lbnRzWzVdIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKCFsbmcubGVuZ3RoKSByZXR1cm4gY2FsbGJhY2sobnVsbCwge30pOyAvLyBub3RpbmcgdG8gbG9hZFxuXG4gICAgICByZXR1cm4gdGhpcy5iYWNrZW5kW2ZjTmFtZV0obG5nLCBucywgZnVuY3Rpb24gKGVyciwgZGF0YSkge1xuICAgICAgICBpZiAoZXJyICYmIGRhdGFcbiAgICAgICAgLyogPSByZXRyeUZsYWcgKi9cbiAgICAgICAgJiYgdHJpZWQgPCA1KSB7XG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpczMucmVhZC5jYWxsKF90aGlzMywgbG5nLCBucywgZmNOYW1lLCB0cmllZCArIDEsIHdhaXQgKiAyLCBjYWxsYmFjayk7XG4gICAgICAgICAgfSwgd2FpdCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY2FsbGJhY2soZXJyLCBkYXRhKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKiBlc2xpbnQgY29uc2lzdGVudC1yZXR1cm46IDAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInByZXBhcmVMb2FkaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHByZXBhcmVMb2FkaW5nKGxhbmd1YWdlcywgbmFtZXNwYWNlcykge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICAgIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAzID8gYXJndW1lbnRzWzNdIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoIXRoaXMuYmFja2VuZCkge1xuICAgICAgICB0aGlzLmxvZ2dlci53YXJuKCdObyBiYWNrZW5kIHdhcyBhZGRlZCB2aWEgaTE4bmV4dC51c2UuIFdpbGwgbm90IGxvYWQgcmVzb3VyY2VzLicpO1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sgJiYgY2FsbGJhY2soKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBsYW5ndWFnZXMgPT09ICdzdHJpbmcnKSBsYW5ndWFnZXMgPSB0aGlzLmxhbmd1YWdlVXRpbHMudG9SZXNvbHZlSGllcmFyY2h5KGxhbmd1YWdlcyk7XG4gICAgICBpZiAodHlwZW9mIG5hbWVzcGFjZXMgPT09ICdzdHJpbmcnKSBuYW1lc3BhY2VzID0gW25hbWVzcGFjZXNdO1xuICAgICAgdmFyIHRvTG9hZCA9IHRoaXMucXVldWVMb2FkKGxhbmd1YWdlcywgbmFtZXNwYWNlcywgb3B0aW9ucywgY2FsbGJhY2spO1xuXG4gICAgICBpZiAoIXRvTG9hZC50b0xvYWQubGVuZ3RoKSB7XG4gICAgICAgIGlmICghdG9Mb2FkLnBlbmRpbmcubGVuZ3RoKSBjYWxsYmFjaygpOyAvLyBub3RoaW5nIHRvIGxvYWQgYW5kIG5vIHBlbmRpbmdzLi4uY2FsbGJhY2sgbm93XG5cbiAgICAgICAgcmV0dXJuIG51bGw7IC8vIHBlbmRpbmdzIHdpbGwgdHJpZ2dlciBjYWxsYmFja1xuICAgICAgfVxuXG4gICAgICB0b0xvYWQudG9Mb2FkLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgX3RoaXM0LmxvYWRPbmUobmFtZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibG9hZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkKGxhbmd1YWdlcywgbmFtZXNwYWNlcywgY2FsbGJhY2spIHtcbiAgICAgIHRoaXMucHJlcGFyZUxvYWRpbmcobGFuZ3VhZ2VzLCBuYW1lc3BhY2VzLCB7fSwgY2FsbGJhY2spO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZWxvYWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVsb2FkKGxhbmd1YWdlcywgbmFtZXNwYWNlcywgY2FsbGJhY2spIHtcbiAgICAgIHRoaXMucHJlcGFyZUxvYWRpbmcobGFuZ3VhZ2VzLCBuYW1lc3BhY2VzLCB7XG4gICAgICAgIHJlbG9hZDogdHJ1ZVxuICAgICAgfSwgY2FsbGJhY2spO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJsb2FkT25lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWRPbmUobmFtZSkge1xuICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICAgIHZhciBwcmVmaXggPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICcnO1xuXG4gICAgICB2YXIgX25hbWUkc3BsaXQzID0gbmFtZS5zcGxpdCgnfCcpLFxuICAgICAgICAgIF9uYW1lJHNwbGl0NCA9IF9zbGljZWRUb0FycmF5KF9uYW1lJHNwbGl0MywgMiksXG4gICAgICAgICAgbG5nID0gX25hbWUkc3BsaXQ0WzBdLFxuICAgICAgICAgIG5zID0gX25hbWUkc3BsaXQ0WzFdO1xuXG4gICAgICB0aGlzLnJlYWQobG5nLCBucywgJ3JlYWQnLCBudWxsLCBudWxsLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XG4gICAgICAgIGlmIChlcnIpIF90aGlzNS5sb2dnZXIud2FybihcIlwiLmNvbmNhdChwcmVmaXgsIFwibG9hZGluZyBuYW1lc3BhY2UgXCIpLmNvbmNhdChucywgXCIgZm9yIGxhbmd1YWdlIFwiKS5jb25jYXQobG5nLCBcIiBmYWlsZWRcIiksIGVycik7XG4gICAgICAgIGlmICghZXJyICYmIGRhdGEpIF90aGlzNS5sb2dnZXIubG9nKFwiXCIuY29uY2F0KHByZWZpeCwgXCJsb2FkZWQgbmFtZXNwYWNlIFwiKS5jb25jYXQobnMsIFwiIGZvciBsYW5ndWFnZSBcIikuY29uY2F0KGxuZyksIGRhdGEpO1xuXG4gICAgICAgIF90aGlzNS5sb2FkZWQobmFtZSwgZXJyLCBkYXRhKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzYXZlTWlzc2luZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzYXZlTWlzc2luZyhsYW5ndWFnZXMsIG5hbWVzcGFjZSwga2V5LCBmYWxsYmFja1ZhbHVlLCBpc1VwZGF0ZSkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gNSAmJiBhcmd1bWVudHNbNV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s1XSA6IHt9O1xuXG4gICAgICBpZiAodGhpcy5zZXJ2aWNlcy51dGlscyAmJiB0aGlzLnNlcnZpY2VzLnV0aWxzLmhhc0xvYWRlZE5hbWVzcGFjZSAmJiAhdGhpcy5zZXJ2aWNlcy51dGlscy5oYXNMb2FkZWROYW1lc3BhY2UobmFtZXNwYWNlKSkge1xuICAgICAgICB0aGlzLmxvZ2dlci53YXJuKFwiZGlkIG5vdCBzYXZlIGtleSBcXFwiXCIuY29uY2F0KGtleSwgXCJcXFwiIGZvciBuYW1lc3BhY2UgXFxcIlwiKS5jb25jYXQobmFtZXNwYWNlLCBcIlxcXCIgYXMgdGhlIG5hbWVzcGFjZSB3YXMgbm90IHlldCBsb2FkZWRcIiksICdUaGlzIG1lYW5zIHNvbWV0aGluZyBJUyBXUk9ORyBpbiB5b3VyIGFwcGxpY2F0aW9uIHNldHVwLiBZb3UgYWNjZXNzIHRoZSB0IGZ1bmN0aW9uIGJlZm9yZSBpMThuZXh0LmluaXQgLyBpMThuZXh0LmxvYWROYW1lc3BhY2UgLyBpMThuZXh0LmNoYW5nZUxhbmd1YWdlIHdhcyBkb25lLiBXYWl0IGZvciB0aGUgY2FsbGJhY2sgb3IgUHJvbWlzZSB0byByZXNvbHZlIGJlZm9yZSBhY2Nlc3NpbmcgaXQhISEnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5iYWNrZW5kICYmIHRoaXMuYmFja2VuZC5jcmVhdGUpIHtcbiAgICAgICAgdGhpcy5iYWNrZW5kLmNyZWF0ZShsYW5ndWFnZXMsIG5hbWVzcGFjZSwga2V5LCBmYWxsYmFja1ZhbHVlLCBudWxsXG4gICAgICAgIC8qIHVudXNlZCBjYWxsYmFjayAqL1xuICAgICAgICAsIF9vYmplY3RTcHJlYWQoe30sIG9wdGlvbnMsIHtcbiAgICAgICAgICBpc1VwZGF0ZTogaXNVcGRhdGVcbiAgICAgICAgfSkpO1xuICAgICAgfSAvLyB3cml0ZSB0byBzdG9yZSB0byBhdm9pZCByZXNlbmRpbmdcblxuXG4gICAgICBpZiAoIWxhbmd1YWdlcyB8fCAhbGFuZ3VhZ2VzWzBdKSByZXR1cm47XG4gICAgICB0aGlzLnN0b3JlLmFkZFJlc291cmNlKGxhbmd1YWdlc1swXSwgbmFtZXNwYWNlLCBrZXksIGZhbGxiYWNrVmFsdWUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDb25uZWN0b3I7XG59KEV2ZW50RW1pdHRlcik7XG5cbmZ1bmN0aW9uIGdldCgpIHtcbiAgcmV0dXJuIHtcbiAgICBkZWJ1ZzogZmFsc2UsXG4gICAgaW5pdEltbWVkaWF0ZTogdHJ1ZSxcbiAgICBuczogWyd0cmFuc2xhdGlvbiddLFxuICAgIGRlZmF1bHROUzogWyd0cmFuc2xhdGlvbiddLFxuICAgIGZhbGxiYWNrTG5nOiBbJ2RldiddLFxuICAgIGZhbGxiYWNrTlM6IGZhbHNlLFxuICAgIC8vIHN0cmluZyBvciBhcnJheSBvZiBuYW1lc3BhY2VzXG4gICAgd2hpdGVsaXN0OiBmYWxzZSxcbiAgICAvLyBhcnJheSB3aXRoIHdoaXRlbGlzdGVkIGxhbmd1YWdlc1xuICAgIG5vbkV4cGxpY2l0V2hpdGVsaXN0OiBmYWxzZSxcbiAgICBsb2FkOiAnYWxsJyxcbiAgICAvLyB8IGN1cnJlbnRPbmx5IHwgbGFuZ3VhZ2VPbmx5XG4gICAgcHJlbG9hZDogZmFsc2UsXG4gICAgLy8gYXJyYXkgd2l0aCBwcmVsb2FkIGxhbmd1YWdlc1xuICAgIHNpbXBsaWZ5UGx1cmFsU3VmZml4OiB0cnVlLFxuICAgIGtleVNlcGFyYXRvcjogJy4nLFxuICAgIG5zU2VwYXJhdG9yOiAnOicsXG4gICAgcGx1cmFsU2VwYXJhdG9yOiAnXycsXG4gICAgY29udGV4dFNlcGFyYXRvcjogJ18nLFxuICAgIHBhcnRpYWxCdW5kbGVkTGFuZ3VhZ2VzOiBmYWxzZSxcbiAgICAvLyBhbGxvdyBidW5kbGluZyBjZXJ0YWluIGxhbmd1YWdlcyB0aGF0IGFyZSBub3QgcmVtb3RlbHkgZmV0Y2hlZFxuICAgIHNhdmVNaXNzaW5nOiBmYWxzZSxcbiAgICAvLyBlbmFibGUgdG8gc2VuZCBtaXNzaW5nIHZhbHVlc1xuICAgIHVwZGF0ZU1pc3Npbmc6IGZhbHNlLFxuICAgIC8vIGVuYWJsZSB0byB1cGRhdGUgZGVmYXVsdCB2YWx1ZXMgaWYgZGlmZmVyZW50IGZyb20gdHJhbnNsYXRlZCB2YWx1ZSAob25seSB1c2VmdWwgb24gaW5pdGlhbCBkZXZlbG9wbWVudCwgb3Igd2hlbiBrZWVwaW5nIGNvZGUgYXMgc291cmNlIG9mIHRydXRoKVxuICAgIHNhdmVNaXNzaW5nVG86ICdmYWxsYmFjaycsXG4gICAgLy8gJ2N1cnJlbnQnIHx8ICdhbGwnXG4gICAgc2F2ZU1pc3NpbmdQbHVyYWxzOiB0cnVlLFxuICAgIC8vIHdpbGwgc2F2ZSBhbGwgZm9ybXMgbm90IG9ubHkgc2luZ3VsYXIga2V5XG4gICAgbWlzc2luZ0tleUhhbmRsZXI6IGZhbHNlLFxuICAgIC8vIGZ1bmN0aW9uKGxuZywgbnMsIGtleSwgZmFsbGJhY2tWYWx1ZSkgLT4gb3ZlcnJpZGUgaWYgcHJlZmVyIG9uIGhhbmRsaW5nXG4gICAgbWlzc2luZ0ludGVycG9sYXRpb25IYW5kbGVyOiBmYWxzZSxcbiAgICAvLyBmdW5jdGlvbihzdHIsIG1hdGNoKVxuICAgIHBvc3RQcm9jZXNzOiBmYWxzZSxcbiAgICAvLyBzdHJpbmcgb3IgYXJyYXkgb2YgcG9zdFByb2Nlc3NvciBuYW1lc1xuICAgIHBvc3RQcm9jZXNzUGFzc1Jlc29sdmVkOiBmYWxzZSxcbiAgICAvLyBwYXNzIHJlc29sdmVkIG9iamVjdCBpbnRvICdvcHRpb25zLmkxOG5SZXNvbHZlZCcgZm9yIHBvc3Rwcm9jZXNzb3JcbiAgICByZXR1cm5OdWxsOiB0cnVlLFxuICAgIC8vIGFsbG93cyBudWxsIHZhbHVlIGFzIHZhbGlkIHRyYW5zbGF0aW9uXG4gICAgcmV0dXJuRW1wdHlTdHJpbmc6IHRydWUsXG4gICAgLy8gYWxsb3dzIGVtcHR5IHN0cmluZyB2YWx1ZSBhcyB2YWxpZCB0cmFuc2xhdGlvblxuICAgIHJldHVybk9iamVjdHM6IGZhbHNlLFxuICAgIGpvaW5BcnJheXM6IGZhbHNlLFxuICAgIC8vIG9yIHN0cmluZyB0byBqb2luIGFycmF5XG4gICAgcmV0dXJuZWRPYmplY3RIYW5kbGVyOiBmYWxzZSxcbiAgICAvLyBmdW5jdGlvbihrZXksIHZhbHVlLCBvcHRpb25zKSB0cmlnZ2VyZWQgaWYga2V5IHJldHVybnMgb2JqZWN0IGJ1dCByZXR1cm5PYmplY3RzIGlzIHNldCB0byBmYWxzZVxuICAgIHBhcnNlTWlzc2luZ0tleUhhbmRsZXI6IGZhbHNlLFxuICAgIC8vIGZ1bmN0aW9uKGtleSkgcGFyc2VkIGEga2V5IHRoYXQgd2FzIG5vdCBmb3VuZCBpbiB0KCkgYmVmb3JlIHJldHVybmluZ1xuICAgIGFwcGVuZE5hbWVzcGFjZVRvTWlzc2luZ0tleTogZmFsc2UsXG4gICAgYXBwZW5kTmFtZXNwYWNlVG9DSU1vZGU6IGZhbHNlLFxuICAgIG92ZXJsb2FkVHJhbnNsYXRpb25PcHRpb25IYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGUoYXJncykge1xuICAgICAgdmFyIHJldCA9IHt9O1xuICAgICAgaWYgKF90eXBlb2YoYXJnc1sxXSkgPT09ICdvYmplY3QnKSByZXQgPSBhcmdzWzFdO1xuICAgICAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnc3RyaW5nJykgcmV0LmRlZmF1bHRWYWx1ZSA9IGFyZ3NbMV07XG4gICAgICBpZiAodHlwZW9mIGFyZ3NbMl0gPT09ICdzdHJpbmcnKSByZXQudERlc2NyaXB0aW9uID0gYXJnc1syXTtcblxuICAgICAgaWYgKF90eXBlb2YoYXJnc1syXSkgPT09ICdvYmplY3QnIHx8IF90eXBlb2YoYXJnc1szXSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gYXJnc1szXSB8fCBhcmdzWzJdO1xuICAgICAgICBPYmplY3Qua2V5cyhvcHRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICByZXRba2V5XSA9IG9wdGlvbnNba2V5XTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfSxcbiAgICBpbnRlcnBvbGF0aW9uOiB7XG4gICAgICBlc2NhcGVWYWx1ZTogdHJ1ZSxcbiAgICAgIGZvcm1hdDogZnVuY3Rpb24gZm9ybWF0KHZhbHVlLCBfZm9ybWF0LCBsbmcpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfSxcbiAgICAgIHByZWZpeDogJ3t7JyxcbiAgICAgIHN1ZmZpeDogJ319JyxcbiAgICAgIGZvcm1hdFNlcGFyYXRvcjogJywnLFxuICAgICAgLy8gcHJlZml4RXNjYXBlZDogJ3t7JyxcbiAgICAgIC8vIHN1ZmZpeEVzY2FwZWQ6ICd9fScsXG4gICAgICAvLyB1bmVzY2FwZVN1ZmZpeDogJycsXG4gICAgICB1bmVzY2FwZVByZWZpeDogJy0nLFxuICAgICAgbmVzdGluZ1ByZWZpeDogJyR0KCcsXG4gICAgICBuZXN0aW5nU3VmZml4OiAnKScsXG4gICAgICAvLyBuZXN0aW5nUHJlZml4RXNjYXBlZDogJyR0KCcsXG4gICAgICAvLyBuZXN0aW5nU3VmZml4RXNjYXBlZDogJyknLFxuICAgICAgLy8gZGVmYXVsdFZhcmlhYmxlczogdW5kZWZpbmVkIC8vIG9iamVjdCB0aGF0IGNhbiBoYXZlIHZhbHVlcyB0byBpbnRlcnBvbGF0ZSBvbiAtIGV4dGVuZHMgcGFzc2VkIGluIGludGVycG9sYXRpb24gZGF0YVxuICAgICAgbWF4UmVwbGFjZXM6IDEwMDAgLy8gbWF4IHJlcGxhY2VzIHRvIHByZXZlbnQgZW5kbGVzcyBsb29wXG5cbiAgICB9XG4gIH07XG59XG4vKiBlc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246IDAgKi9cblxuZnVuY3Rpb24gdHJhbnNmb3JtT3B0aW9ucyhvcHRpb25zKSB7XG4gIC8vIGNyZWF0ZSBuYW1lc3BhY2Ugb2JqZWN0IGlmIG5hbWVzcGFjZSBpcyBwYXNzZWQgaW4gYXMgc3RyaW5nXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5ucyA9PT0gJ3N0cmluZycpIG9wdGlvbnMubnMgPSBbb3B0aW9ucy5uc107XG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5mYWxsYmFja0xuZyA9PT0gJ3N0cmluZycpIG9wdGlvbnMuZmFsbGJhY2tMbmcgPSBbb3B0aW9ucy5mYWxsYmFja0xuZ107XG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5mYWxsYmFja05TID09PSAnc3RyaW5nJykgb3B0aW9ucy5mYWxsYmFja05TID0gW29wdGlvbnMuZmFsbGJhY2tOU107IC8vIGV4dGVuZCB3aGl0ZWxpc3Qgd2l0aCBjaW1vZGVcblxuICBpZiAob3B0aW9ucy53aGl0ZWxpc3QgJiYgb3B0aW9ucy53aGl0ZWxpc3QuaW5kZXhPZignY2ltb2RlJykgPCAwKSB7XG4gICAgb3B0aW9ucy53aGl0ZWxpc3QgPSBvcHRpb25zLndoaXRlbGlzdC5jb25jYXQoWydjaW1vZGUnXSk7XG4gIH1cblxuICByZXR1cm4gb3B0aW9ucztcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnZhciBJMThuID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfRXZlbnRFbWl0dGVyKSB7XG4gIF9pbmhlcml0cyhJMThuLCBfRXZlbnRFbWl0dGVyKTtcblxuICBmdW5jdGlvbiBJMThuKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICB2YXIgY2FsbGJhY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJMThuKTtcblxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEkxOG4pLmNhbGwodGhpcykpO1xuICAgIEV2ZW50RW1pdHRlci5jYWxsKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTsgLy8gPD1JRTEwIGZpeCAodW5hYmxlIHRvIGNhbGwgcGFyZW50IGNvbnN0cnVjdG9yKVxuXG4gICAgX3RoaXMub3B0aW9ucyA9IHRyYW5zZm9ybU9wdGlvbnMob3B0aW9ucyk7XG4gICAgX3RoaXMuc2VydmljZXMgPSB7fTtcbiAgICBfdGhpcy5sb2dnZXIgPSBiYXNlTG9nZ2VyO1xuICAgIF90aGlzLm1vZHVsZXMgPSB7XG4gICAgICBleHRlcm5hbDogW11cbiAgICB9O1xuXG4gICAgaWYgKGNhbGxiYWNrICYmICFfdGhpcy5pc0luaXRpYWxpemVkICYmICFvcHRpb25zLmlzQ2xvbmUpIHtcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9pMThuZXh0L2kxOG5leHQvaXNzdWVzLzg3OVxuICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLmluaXRJbW1lZGlhdGUpIHtcbiAgICAgICAgX3RoaXMuaW5pdChvcHRpb25zLCBjYWxsYmFjayk7XG5cbiAgICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgICB9XG5cbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5pbml0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICAgIH0sIDApO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhJMThuLCBbe1xuICAgIGtleTogXCJpbml0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5vcHRpb25zID0gX29iamVjdFNwcmVhZCh7fSwgZ2V0KCksIHRoaXMub3B0aW9ucywgdHJhbnNmb3JtT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgICB0aGlzLmZvcm1hdCA9IHRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uLmZvcm1hdDtcbiAgICAgIGlmICghY2FsbGJhY2spIGNhbGxiYWNrID0gbm9vcDtcblxuICAgICAgZnVuY3Rpb24gY3JlYXRlQ2xhc3NPbkRlbWFuZChDbGFzc09yT2JqZWN0KSB7XG4gICAgICAgIGlmICghQ2xhc3NPck9iamVjdCkgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmICh0eXBlb2YgQ2xhc3NPck9iamVjdCA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIG5ldyBDbGFzc09yT2JqZWN0KCk7XG4gICAgICAgIHJldHVybiBDbGFzc09yT2JqZWN0O1xuICAgICAgfSAvLyBpbml0IHNlcnZpY2VzXG5cblxuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuaXNDbG9uZSkge1xuICAgICAgICBpZiAodGhpcy5tb2R1bGVzLmxvZ2dlcikge1xuICAgICAgICAgIGJhc2VMb2dnZXIuaW5pdChjcmVhdGVDbGFzc09uRGVtYW5kKHRoaXMubW9kdWxlcy5sb2dnZXIpLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJhc2VMb2dnZXIuaW5pdChudWxsLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGx1ID0gbmV3IExhbmd1YWdlVXRpbCh0aGlzLm9wdGlvbnMpO1xuICAgICAgICB0aGlzLnN0b3JlID0gbmV3IFJlc291cmNlU3RvcmUodGhpcy5vcHRpb25zLnJlc291cmNlcywgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgdmFyIHMgPSB0aGlzLnNlcnZpY2VzO1xuICAgICAgICBzLmxvZ2dlciA9IGJhc2VMb2dnZXI7XG4gICAgICAgIHMucmVzb3VyY2VTdG9yZSA9IHRoaXMuc3RvcmU7XG4gICAgICAgIHMubGFuZ3VhZ2VVdGlscyA9IGx1O1xuICAgICAgICBzLnBsdXJhbFJlc29sdmVyID0gbmV3IFBsdXJhbFJlc29sdmVyKGx1LCB7XG4gICAgICAgICAgcHJlcGVuZDogdGhpcy5vcHRpb25zLnBsdXJhbFNlcGFyYXRvcixcbiAgICAgICAgICBjb21wYXRpYmlsaXR5SlNPTjogdGhpcy5vcHRpb25zLmNvbXBhdGliaWxpdHlKU09OLFxuICAgICAgICAgIHNpbXBsaWZ5UGx1cmFsU3VmZml4OiB0aGlzLm9wdGlvbnMuc2ltcGxpZnlQbHVyYWxTdWZmaXhcbiAgICAgICAgfSk7XG4gICAgICAgIHMuaW50ZXJwb2xhdG9yID0gbmV3IEludGVycG9sYXRvcih0aGlzLm9wdGlvbnMpO1xuICAgICAgICBzLnV0aWxzID0ge1xuICAgICAgICAgIGhhc0xvYWRlZE5hbWVzcGFjZTogdGhpcy5oYXNMb2FkZWROYW1lc3BhY2UuYmluZCh0aGlzKVxuICAgICAgICB9O1xuICAgICAgICBzLmJhY2tlbmRDb25uZWN0b3IgPSBuZXcgQ29ubmVjdG9yKGNyZWF0ZUNsYXNzT25EZW1hbmQodGhpcy5tb2R1bGVzLmJhY2tlbmQpLCBzLnJlc291cmNlU3RvcmUsIHMsIHRoaXMub3B0aW9ucyk7IC8vIHBpcGUgZXZlbnRzIGZyb20gYmFja2VuZENvbm5lY3RvclxuXG4gICAgICAgIHMuYmFja2VuZENvbm5lY3Rvci5vbignKicsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF90aGlzMi5lbWl0LmFwcGx5KF90aGlzMiwgW2V2ZW50XS5jb25jYXQoYXJncykpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodGhpcy5tb2R1bGVzLmxhbmd1YWdlRGV0ZWN0b3IpIHtcbiAgICAgICAgICBzLmxhbmd1YWdlRGV0ZWN0b3IgPSBjcmVhdGVDbGFzc09uRGVtYW5kKHRoaXMubW9kdWxlcy5sYW5ndWFnZURldGVjdG9yKTtcbiAgICAgICAgICBzLmxhbmd1YWdlRGV0ZWN0b3IuaW5pdChzLCB0aGlzLm9wdGlvbnMuZGV0ZWN0aW9uLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMubW9kdWxlcy5pMThuRm9ybWF0KSB7XG4gICAgICAgICAgcy5pMThuRm9ybWF0ID0gY3JlYXRlQ2xhc3NPbkRlbWFuZCh0aGlzLm1vZHVsZXMuaTE4bkZvcm1hdCk7XG4gICAgICAgICAgaWYgKHMuaTE4bkZvcm1hdC5pbml0KSBzLmkxOG5Gb3JtYXQuaW5pdCh0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudHJhbnNsYXRvciA9IG5ldyBUcmFuc2xhdG9yKHRoaXMuc2VydmljZXMsIHRoaXMub3B0aW9ucyk7IC8vIHBpcGUgZXZlbnRzIGZyb20gdHJhbnNsYXRvclxuXG4gICAgICAgIHRoaXMudHJhbnNsYXRvci5vbignKicsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgICAgICBhcmdzW19rZXkyIC0gMV0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF90aGlzMi5lbWl0LmFwcGx5KF90aGlzMiwgW2V2ZW50XS5jb25jYXQoYXJncykpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5tb2R1bGVzLmV4dGVybmFsLmZvckVhY2goZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICBpZiAobS5pbml0KSBtLmluaXQoX3RoaXMyKTtcbiAgICAgICAgfSk7XG4gICAgICB9IC8vIGFwcGVuZCBhcGlcblxuXG4gICAgICB2YXIgc3RvcmVBcGkgPSBbJ2dldFJlc291cmNlJywgJ2FkZFJlc291cmNlJywgJ2FkZFJlc291cmNlcycsICdhZGRSZXNvdXJjZUJ1bmRsZScsICdyZW1vdmVSZXNvdXJjZUJ1bmRsZScsICdoYXNSZXNvdXJjZUJ1bmRsZScsICdnZXRSZXNvdXJjZUJ1bmRsZScsICdnZXREYXRhQnlMYW5ndWFnZSddO1xuICAgICAgc3RvcmVBcGkuZm9yRWFjaChmdW5jdGlvbiAoZmNOYW1lKSB7XG4gICAgICAgIF90aGlzMltmY05hbWVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBfdGhpczIkc3RvcmU7XG5cbiAgICAgICAgICByZXR1cm4gKF90aGlzMiRzdG9yZSA9IF90aGlzMi5zdG9yZSlbZmNOYW1lXS5hcHBseShfdGhpczIkc3RvcmUsIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICAgIHZhciBkZWZlcnJlZCA9IGRlZmVyKCk7XG5cbiAgICAgIHZhciBsb2FkID0gZnVuY3Rpb24gbG9hZCgpIHtcbiAgICAgICAgX3RoaXMyLmNoYW5nZUxhbmd1YWdlKF90aGlzMi5vcHRpb25zLmxuZywgZnVuY3Rpb24gKGVyciwgdCkge1xuICAgICAgICAgIF90aGlzMi5pc0luaXRpYWxpemVkID0gdHJ1ZTtcblxuICAgICAgICAgIF90aGlzMi5sb2dnZXIubG9nKCdpbml0aWFsaXplZCcsIF90aGlzMi5vcHRpb25zKTtcblxuICAgICAgICAgIF90aGlzMi5lbWl0KCdpbml0aWFsaXplZCcsIF90aGlzMi5vcHRpb25zKTtcblxuICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUodCk7IC8vIG5vdCByZWplY3Rpbmcgb24gZXJyIChhcyBlcnIgaXMgb25seSBhIGxvYWRpbmcgdHJhbnNsYXRpb24gZmFpbGVkIHdhcm5pbmcpXG5cbiAgICAgICAgICBjYWxsYmFjayhlcnIsIHQpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucmVzb3VyY2VzIHx8ICF0aGlzLm9wdGlvbnMuaW5pdEltbWVkaWF0ZSkge1xuICAgICAgICBsb2FkKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRUaW1lb3V0KGxvYWQsIDApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGVmZXJyZWQ7XG4gICAgfVxuICAgIC8qIGVzbGludCBjb25zaXN0ZW50LXJldHVybjogMCAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwibG9hZFJlc291cmNlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkUmVzb3VyY2VzKGxhbmd1YWdlKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBub29wO1xuICAgICAgdmFyIHVzZWRDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgICAgdmFyIHVzZWRMbmcgPSB0eXBlb2YgbGFuZ3VhZ2UgPT09ICdzdHJpbmcnID8gbGFuZ3VhZ2UgOiB0aGlzLmxhbmd1YWdlO1xuICAgICAgaWYgKHR5cGVvZiBsYW5ndWFnZSA9PT0gJ2Z1bmN0aW9uJykgdXNlZENhbGxiYWNrID0gbGFuZ3VhZ2U7XG5cbiAgICAgIGlmICghdGhpcy5vcHRpb25zLnJlc291cmNlcyB8fCB0aGlzLm9wdGlvbnMucGFydGlhbEJ1bmRsZWRMYW5ndWFnZXMpIHtcbiAgICAgICAgaWYgKHVzZWRMbmcgJiYgdXNlZExuZy50b0xvd2VyQ2FzZSgpID09PSAnY2ltb2RlJykgcmV0dXJuIHVzZWRDYWxsYmFjaygpOyAvLyBhdm9pZCBsb2FkaW5nIHJlc291cmNlcyBmb3IgY2ltb2RlXG5cbiAgICAgICAgdmFyIHRvTG9hZCA9IFtdO1xuXG4gICAgICAgIHZhciBhcHBlbmQgPSBmdW5jdGlvbiBhcHBlbmQobG5nKSB7XG4gICAgICAgICAgaWYgKCFsbmcpIHJldHVybjtcblxuICAgICAgICAgIHZhciBsbmdzID0gX3RoaXMzLnNlcnZpY2VzLmxhbmd1YWdlVXRpbHMudG9SZXNvbHZlSGllcmFyY2h5KGxuZyk7XG5cbiAgICAgICAgICBsbmdzLmZvckVhY2goZnVuY3Rpb24gKGwpIHtcbiAgICAgICAgICAgIGlmICh0b0xvYWQuaW5kZXhPZihsKSA8IDApIHRvTG9hZC5wdXNoKGwpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICghdXNlZExuZykge1xuICAgICAgICAgIC8vIGF0IGxlYXN0IGxvYWQgZmFsbGJhY2tzIGluIHRoaXMgY2FzZVxuICAgICAgICAgIHZhciBmYWxsYmFja3MgPSB0aGlzLnNlcnZpY2VzLmxhbmd1YWdlVXRpbHMuZ2V0RmFsbGJhY2tDb2Rlcyh0aGlzLm9wdGlvbnMuZmFsbGJhY2tMbmcpO1xuICAgICAgICAgIGZhbGxiYWNrcy5mb3JFYWNoKGZ1bmN0aW9uIChsKSB7XG4gICAgICAgICAgICByZXR1cm4gYXBwZW5kKGwpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFwcGVuZCh1c2VkTG5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucHJlbG9hZCkge1xuICAgICAgICAgIHRoaXMub3B0aW9ucy5wcmVsb2FkLmZvckVhY2goZnVuY3Rpb24gKGwpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBlbmQobCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNlcnZpY2VzLmJhY2tlbmRDb25uZWN0b3IubG9hZCh0b0xvYWQsIHRoaXMub3B0aW9ucy5ucywgdXNlZENhbGxiYWNrKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVzZWRDYWxsYmFjayhudWxsKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVsb2FkUmVzb3VyY2VzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbG9hZFJlc291cmNlcyhsbmdzLCBucywgY2FsbGJhY2spIHtcbiAgICAgIHZhciBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gICAgICBpZiAoIWxuZ3MpIGxuZ3MgPSB0aGlzLmxhbmd1YWdlcztcbiAgICAgIGlmICghbnMpIG5zID0gdGhpcy5vcHRpb25zLm5zO1xuICAgICAgaWYgKCFjYWxsYmFjaykgY2FsbGJhY2sgPSBub29wO1xuICAgICAgdGhpcy5zZXJ2aWNlcy5iYWNrZW5kQ29ubmVjdG9yLnJlbG9hZChsbmdzLCBucywgZnVuY3Rpb24gKGVycikge1xuICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7IC8vIG5vdCByZWplY3Rpbmcgb24gZXJyIChhcyBlcnIgaXMgb25seSBhIGxvYWRpbmcgdHJhbnNsYXRpb24gZmFpbGVkIHdhcm5pbmcpXG5cbiAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGRlZmVycmVkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ1c2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXNlKG1vZHVsZSkge1xuICAgICAgaWYgKG1vZHVsZS50eXBlID09PSAnYmFja2VuZCcpIHtcbiAgICAgICAgdGhpcy5tb2R1bGVzLmJhY2tlbmQgPSBtb2R1bGU7XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2R1bGUudHlwZSA9PT0gJ2xvZ2dlcicgfHwgbW9kdWxlLmxvZyAmJiBtb2R1bGUud2FybiAmJiBtb2R1bGUuZXJyb3IpIHtcbiAgICAgICAgdGhpcy5tb2R1bGVzLmxvZ2dlciA9IG1vZHVsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZHVsZS50eXBlID09PSAnbGFuZ3VhZ2VEZXRlY3RvcicpIHtcbiAgICAgICAgdGhpcy5tb2R1bGVzLmxhbmd1YWdlRGV0ZWN0b3IgPSBtb2R1bGU7XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2R1bGUudHlwZSA9PT0gJ2kxOG5Gb3JtYXQnKSB7XG4gICAgICAgIHRoaXMubW9kdWxlcy5pMThuRm9ybWF0ID0gbW9kdWxlO1xuICAgICAgfVxuXG4gICAgICBpZiAobW9kdWxlLnR5cGUgPT09ICdwb3N0UHJvY2Vzc29yJykge1xuICAgICAgICBwb3N0UHJvY2Vzc29yLmFkZFBvc3RQcm9jZXNzb3IobW9kdWxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZHVsZS50eXBlID09PSAnM3JkUGFydHknKSB7XG4gICAgICAgIHRoaXMubW9kdWxlcy5leHRlcm5hbC5wdXNoKG1vZHVsZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjaGFuZ2VMYW5ndWFnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGFuZ2VMYW5ndWFnZShsbmcsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgdGhpcy5pc0xhbmd1YWdlQ2hhbmdpbmdUbyA9IGxuZztcbiAgICAgIHZhciBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gICAgICB0aGlzLmVtaXQoJ2xhbmd1YWdlQ2hhbmdpbmcnLCBsbmcpO1xuXG4gICAgICB2YXIgZG9uZSA9IGZ1bmN0aW9uIGRvbmUoZXJyLCBsKSB7XG4gICAgICAgIGlmIChsKSB7XG4gICAgICAgICAgX3RoaXM0Lmxhbmd1YWdlID0gbDtcbiAgICAgICAgICBfdGhpczQubGFuZ3VhZ2VzID0gX3RoaXM0LnNlcnZpY2VzLmxhbmd1YWdlVXRpbHMudG9SZXNvbHZlSGllcmFyY2h5KGwpO1xuXG4gICAgICAgICAgX3RoaXM0LnRyYW5zbGF0b3IuY2hhbmdlTGFuZ3VhZ2UobCk7XG5cbiAgICAgICAgICBfdGhpczQuaXNMYW5ndWFnZUNoYW5naW5nVG8gPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBfdGhpczQuZW1pdCgnbGFuZ3VhZ2VDaGFuZ2VkJywgbCk7XG5cbiAgICAgICAgICBfdGhpczQubG9nZ2VyLmxvZygnbGFuZ3VhZ2VDaGFuZ2VkJywgbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXM0LmlzTGFuZ3VhZ2VDaGFuZ2luZ1RvID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzNC50LmFwcGx5KF90aGlzNCwgYXJndW1lbnRzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soZXJyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzNC50LmFwcGx5KF90aGlzNCwgYXJndW1lbnRzKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgc2V0TG5nID0gZnVuY3Rpb24gc2V0TG5nKGwpIHtcbiAgICAgICAgaWYgKGwpIHtcbiAgICAgICAgICBpZiAoIV90aGlzNC5sYW5ndWFnZSkge1xuICAgICAgICAgICAgX3RoaXM0Lmxhbmd1YWdlID0gbDtcbiAgICAgICAgICAgIF90aGlzNC5sYW5ndWFnZXMgPSBfdGhpczQuc2VydmljZXMubGFuZ3VhZ2VVdGlscy50b1Jlc29sdmVIaWVyYXJjaHkobCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFfdGhpczQudHJhbnNsYXRvci5sYW5ndWFnZSkgX3RoaXM0LnRyYW5zbGF0b3IuY2hhbmdlTGFuZ3VhZ2UobCk7XG4gICAgICAgICAgaWYgKF90aGlzNC5zZXJ2aWNlcy5sYW5ndWFnZURldGVjdG9yKSBfdGhpczQuc2VydmljZXMubGFuZ3VhZ2VEZXRlY3Rvci5jYWNoZVVzZXJMYW5ndWFnZShsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzNC5sb2FkUmVzb3VyY2VzKGwsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICBkb25lKGVyciwgbCk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgaWYgKCFsbmcgJiYgdGhpcy5zZXJ2aWNlcy5sYW5ndWFnZURldGVjdG9yICYmICF0aGlzLnNlcnZpY2VzLmxhbmd1YWdlRGV0ZWN0b3IuYXN5bmMpIHtcbiAgICAgICAgc2V0TG5nKHRoaXMuc2VydmljZXMubGFuZ3VhZ2VEZXRlY3Rvci5kZXRlY3QoKSk7XG4gICAgICB9IGVsc2UgaWYgKCFsbmcgJiYgdGhpcy5zZXJ2aWNlcy5sYW5ndWFnZURldGVjdG9yICYmIHRoaXMuc2VydmljZXMubGFuZ3VhZ2VEZXRlY3Rvci5hc3luYykge1xuICAgICAgICB0aGlzLnNlcnZpY2VzLmxhbmd1YWdlRGV0ZWN0b3IuZGV0ZWN0KHNldExuZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRMbmcobG5nKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRlZmVycmVkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRGaXhlZFRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Rml4ZWRUKGxuZywgbnMpIHtcbiAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICB2YXIgZml4ZWRUID0gZnVuY3Rpb24gZml4ZWRUKGtleSwgb3B0cykge1xuICAgICAgICB2YXIgb3B0aW9ucztcblxuICAgICAgICBpZiAoX3R5cGVvZihvcHRzKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIHJlc3QgPSBuZXcgQXJyYXkoX2xlbjMgPiAyID8gX2xlbjMgLSAyIDogMCksIF9rZXkzID0gMjsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgICAgICAgICAgcmVzdFtfa2V5MyAtIDJdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBvcHRpb25zID0gX3RoaXM1Lm9wdGlvbnMub3ZlcmxvYWRUcmFuc2xhdGlvbk9wdGlvbkhhbmRsZXIoW2tleSwgb3B0c10uY29uY2F0KHJlc3QpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvcHRpb25zID0gX29iamVjdFNwcmVhZCh7fSwgb3B0cyk7XG4gICAgICAgIH1cblxuICAgICAgICBvcHRpb25zLmxuZyA9IG9wdGlvbnMubG5nIHx8IGZpeGVkVC5sbmc7XG4gICAgICAgIG9wdGlvbnMubG5ncyA9IG9wdGlvbnMubG5ncyB8fCBmaXhlZFQubG5ncztcbiAgICAgICAgb3B0aW9ucy5ucyA9IG9wdGlvbnMubnMgfHwgZml4ZWRULm5zO1xuICAgICAgICByZXR1cm4gX3RoaXM1LnQoa2V5LCBvcHRpb25zKTtcbiAgICAgIH07XG5cbiAgICAgIGlmICh0eXBlb2YgbG5nID09PSAnc3RyaW5nJykge1xuICAgICAgICBmaXhlZFQubG5nID0gbG5nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZml4ZWRULmxuZ3MgPSBsbmc7XG4gICAgICB9XG5cbiAgICAgIGZpeGVkVC5ucyA9IG5zO1xuICAgICAgcmV0dXJuIGZpeGVkVDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0KCkge1xuICAgICAgdmFyIF90aGlzJHRyYW5zbGF0b3I7XG5cbiAgICAgIHJldHVybiB0aGlzLnRyYW5zbGF0b3IgJiYgKF90aGlzJHRyYW5zbGF0b3IgPSB0aGlzLnRyYW5zbGF0b3IpLnRyYW5zbGF0ZS5hcHBseShfdGhpcyR0cmFuc2xhdG9yLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJleGlzdHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXhpc3RzKCkge1xuICAgICAgdmFyIF90aGlzJHRyYW5zbGF0b3IyO1xuXG4gICAgICByZXR1cm4gdGhpcy50cmFuc2xhdG9yICYmIChfdGhpcyR0cmFuc2xhdG9yMiA9IHRoaXMudHJhbnNsYXRvcikuZXhpc3RzLmFwcGx5KF90aGlzJHRyYW5zbGF0b3IyLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXREZWZhdWx0TmFtZXNwYWNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldERlZmF1bHROYW1lc3BhY2UobnMpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5kZWZhdWx0TlMgPSBucztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaGFzTG9hZGVkTmFtZXNwYWNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhc0xvYWRlZE5hbWVzcGFjZShucykge1xuICAgICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICAgIGlmICghdGhpcy5pc0luaXRpYWxpemVkKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLndhcm4oJ2hhc0xvYWRlZE5hbWVzcGFjZTogaTE4bmV4dCB3YXMgbm90IGluaXRpYWxpemVkJywgdGhpcy5sYW5ndWFnZXMpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5sYW5ndWFnZXMgfHwgIXRoaXMubGFuZ3VhZ2VzLmxlbmd0aCkge1xuICAgICAgICB0aGlzLmxvZ2dlci53YXJuKCdoYXNMb2FkZWROYW1lc3BhY2U6IGkxOG4ubGFuZ3VhZ2VzIHdlcmUgdW5kZWZpbmVkIG9yIGVtcHR5JywgdGhpcy5sYW5ndWFnZXMpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHZhciBsbmcgPSB0aGlzLmxhbmd1YWdlc1swXTtcbiAgICAgIHZhciBmYWxsYmFja0xuZyA9IHRoaXMub3B0aW9ucyA/IHRoaXMub3B0aW9ucy5mYWxsYmFja0xuZyA6IGZhbHNlO1xuICAgICAgdmFyIGxhc3RMbmcgPSB0aGlzLmxhbmd1YWdlc1t0aGlzLmxhbmd1YWdlcy5sZW5ndGggLSAxXTsgLy8gd2UncmUgaW4gY2ltb2RlIHNvIHRoaXMgc2hhbGwgcGFzc1xuXG4gICAgICBpZiAobG5nLnRvTG93ZXJDYXNlKCkgPT09ICdjaW1vZGUnKSByZXR1cm4gdHJ1ZTtcblxuICAgICAgdmFyIGxvYWROb3RQZW5kaW5nID0gZnVuY3Rpb24gbG9hZE5vdFBlbmRpbmcobCwgbikge1xuICAgICAgICB2YXIgbG9hZFN0YXRlID0gX3RoaXM2LnNlcnZpY2VzLmJhY2tlbmRDb25uZWN0b3Iuc3RhdGVbXCJcIi5jb25jYXQobCwgXCJ8XCIpLmNvbmNhdChuKV07XG5cbiAgICAgICAgcmV0dXJuIGxvYWRTdGF0ZSA9PT0gLTEgfHwgbG9hZFN0YXRlID09PSAyO1xuICAgICAgfTsgLy8gbG9hZGVkIC0+IFNVQ0NFU1NcblxuXG4gICAgICBpZiAodGhpcy5oYXNSZXNvdXJjZUJ1bmRsZShsbmcsIG5zKSkgcmV0dXJuIHRydWU7IC8vIHdlcmUgbm90IGxvYWRpbmcgYXQgYWxsIC0+IFNFTUkgU1VDQ0VTU1xuXG4gICAgICBpZiAoIXRoaXMuc2VydmljZXMuYmFja2VuZENvbm5lY3Rvci5iYWNrZW5kKSByZXR1cm4gdHJ1ZTsgLy8gZmFpbGVkIGxvYWRpbmcgbnMgLSBidXQgYXQgbGVhc3QgZmFsbGJhY2sgaXMgbm90IHBlbmRpbmcgLT4gU0VNSSBTVUNDRVNTXG5cbiAgICAgIGlmIChsb2FkTm90UGVuZGluZyhsbmcsIG5zKSAmJiAoIWZhbGxiYWNrTG5nIHx8IGxvYWROb3RQZW5kaW5nKGxhc3RMbmcsIG5zKSkpIHJldHVybiB0cnVlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJsb2FkTmFtZXNwYWNlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkTmFtZXNwYWNlcyhucywgY2FsbGJhY2spIHtcbiAgICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgICB2YXIgZGVmZXJyZWQgPSBkZWZlcigpO1xuXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5ucykge1xuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbnMgPT09ICdzdHJpbmcnKSBucyA9IFtuc107XG4gICAgICBucy5mb3JFYWNoKGZ1bmN0aW9uIChuKSB7XG4gICAgICAgIGlmIChfdGhpczcub3B0aW9ucy5ucy5pbmRleE9mKG4pIDwgMCkgX3RoaXM3Lm9wdGlvbnMubnMucHVzaChuKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5sb2FkUmVzb3VyY2VzKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKGVycik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBkZWZlcnJlZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibG9hZExhbmd1YWdlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkTGFuZ3VhZ2VzKGxuZ3MsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgZGVmZXJyZWQgPSBkZWZlcigpO1xuICAgICAgaWYgKHR5cGVvZiBsbmdzID09PSAnc3RyaW5nJykgbG5ncyA9IFtsbmdzXTtcbiAgICAgIHZhciBwcmVsb2FkZWQgPSB0aGlzLm9wdGlvbnMucHJlbG9hZCB8fCBbXTtcbiAgICAgIHZhciBuZXdMbmdzID0gbG5ncy5maWx0ZXIoZnVuY3Rpb24gKGxuZykge1xuICAgICAgICByZXR1cm4gcHJlbG9hZGVkLmluZGV4T2YobG5nKSA8IDA7XG4gICAgICB9KTsgLy8gRXhpdCBlYXJseSBpZiBhbGwgZ2l2ZW4gbGFuZ3VhZ2VzIGFyZSBhbHJlYWR5IHByZWxvYWRlZFxuXG4gICAgICBpZiAoIW5ld0xuZ3MubGVuZ3RoKSB7XG4gICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm9wdGlvbnMucHJlbG9hZCA9IHByZWxvYWRlZC5jb25jYXQobmV3TG5ncyk7XG4gICAgICB0aGlzLmxvYWRSZXNvdXJjZXMoZnVuY3Rpb24gKGVycikge1xuICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soZXJyKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGRlZmVycmVkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJkaXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlyKGxuZykge1xuICAgICAgaWYgKCFsbmcpIGxuZyA9IHRoaXMubGFuZ3VhZ2VzICYmIHRoaXMubGFuZ3VhZ2VzLmxlbmd0aCA+IDAgPyB0aGlzLmxhbmd1YWdlc1swXSA6IHRoaXMubGFuZ3VhZ2U7XG4gICAgICBpZiAoIWxuZykgcmV0dXJuICdydGwnO1xuICAgICAgdmFyIHJ0bExuZ3MgPSBbJ2FyJywgJ3NodScsICdzcXInLCAnc3NoJywgJ3hhYScsICd5aGQnLCAneXVkJywgJ2FhbycsICdhYmgnLCAnYWJ2JywgJ2FjbScsICdhY3EnLCAnYWN3JywgJ2FjeCcsICdhY3knLCAnYWRmJywgJ2FkcycsICdhZWInLCAnYWVjJywgJ2FmYicsICdhanAnLCAnYXBjJywgJ2FwZCcsICdhcmInLCAnYXJxJywgJ2FycycsICdhcnknLCAnYXJ6JywgJ2F1eicsICdhdmwnLCAnYXloJywgJ2F5bCcsICdheW4nLCAnYXlwJywgJ2JieicsICdwZ2EnLCAnaGUnLCAnaXcnLCAncHMnLCAncGJ0JywgJ3BidScsICdwc3QnLCAncHJwJywgJ3ByZCcsICd1cicsICd5ZGQnLCAneWRzJywgJ3lpaCcsICdqaScsICd5aScsICdoYm8nLCAnbWVuJywgJ3htbicsICdmYScsICdqcHInLCAncGVvJywgJ3BlcycsICdwcnMnLCAnZHYnLCAnc2FtJ107XG4gICAgICByZXR1cm4gcnRsTG5ncy5pbmRleE9mKHRoaXMuc2VydmljZXMubGFuZ3VhZ2VVdGlscy5nZXRMYW5ndWFnZVBhcnRGcm9tQ29kZShsbmcpKSA+PSAwID8gJ3J0bCcgOiAnbHRyJztcbiAgICB9XG4gICAgLyogZXNsaW50IGNsYXNzLW1ldGhvZHMtdXNlLXRoaXM6IDAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImNyZWF0ZUluc3RhbmNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gbmV3IEkxOG4ob3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjbG9uZUluc3RhbmNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsb25lSW5zdGFuY2UoKSB7XG4gICAgICB2YXIgX3RoaXM4ID0gdGhpcztcblxuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBub29wO1xuXG4gICAgICB2YXIgbWVyZ2VkT3B0aW9ucyA9IF9vYmplY3RTcHJlYWQoe30sIHRoaXMub3B0aW9ucywgb3B0aW9ucywge1xuICAgICAgICBpc0Nsb25lOiB0cnVlXG4gICAgICB9KTtcblxuICAgICAgdmFyIGNsb25lID0gbmV3IEkxOG4obWVyZ2VkT3B0aW9ucyk7XG4gICAgICB2YXIgbWVtYmVyc1RvQ29weSA9IFsnc3RvcmUnLCAnc2VydmljZXMnLCAnbGFuZ3VhZ2UnXTtcbiAgICAgIG1lbWJlcnNUb0NvcHkuZm9yRWFjaChmdW5jdGlvbiAobSkge1xuICAgICAgICBjbG9uZVttXSA9IF90aGlzOFttXTtcbiAgICAgIH0pO1xuICAgICAgY2xvbmUudHJhbnNsYXRvciA9IG5ldyBUcmFuc2xhdG9yKGNsb25lLnNlcnZpY2VzLCBjbG9uZS5vcHRpb25zKTtcbiAgICAgIGNsb25lLnRyYW5zbGF0b3Iub24oJyonLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW40ID4gMSA/IF9sZW40IC0gMSA6IDApLCBfa2V5NCA9IDE7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICAgICAgICBhcmdzW19rZXk0IC0gMV0gPSBhcmd1bWVudHNbX2tleTRdO1xuICAgICAgICB9XG5cbiAgICAgICAgY2xvbmUuZW1pdC5hcHBseShjbG9uZSwgW2V2ZW50XS5jb25jYXQoYXJncykpO1xuICAgICAgfSk7XG4gICAgICBjbG9uZS5pbml0KG1lcmdlZE9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICAgIGNsb25lLnRyYW5zbGF0b3Iub3B0aW9ucyA9IGNsb25lLm9wdGlvbnM7IC8vIHN5bmMgb3B0aW9uc1xuXG4gICAgICByZXR1cm4gY2xvbmU7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEkxOG47XG59KEV2ZW50RW1pdHRlcik7XG5cbnZhciBpMThuZXh0ID0gbmV3IEkxOG4oKTtcblxuZXhwb3J0IGRlZmF1bHQgaTE4bmV4dDtcbiJdLCJzb3VyY2VSb290IjoiIn0=