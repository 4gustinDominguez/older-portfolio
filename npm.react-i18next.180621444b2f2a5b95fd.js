(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{31:function(e,n,t){"use strict";t(30);var r=t(17),o=t.n(r),i=(t(45),t(0)),a=t.n(i),c=(t(104),t(105)),s=t.n(c),u=t(106),f=t.n(u);function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(t,!0).forEach((function(n){o()(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(t).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var d,g,b={bindI18n:"languageChanged",bindI18nStore:"",transEmptyNodeValue:"",transSupportBasicHtmlNodes:!0,transKeepBasicHtmlNodesFor:["br","strong","i","p"],useSuspense:!0},v=a.a.createContext();function y(){return g}function O(){return b}var h=function(){function e(){s()(this,e),this.usedNamespaces={}}return f()(e,[{key:"addUsedNamespaces",value:function(e){var n=this;e.forEach((function(e){n.usedNamespaces[e]||(n.usedNamespaces[e]=!0)}))}},{key:"getUsedNamespaces",value:function(){return Object.keys(this.usedNamespaces)}}]),e}();function w(){return d}var m={type:"3rdParty",init:function(e){!function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};b=l({},b,{},e)}(e.options.react),function(e){d=e}(e)}};function j(){if(console&&console.warn){for(var e,n=arguments.length,t=new Array(n),r=0;r<n;r++)t[r]=arguments[r];"string"==typeof t[0]&&(t[0]="react-i18next:: ".concat(t[0])),(e=console).warn.apply(e,t)}}var N={};function P(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];"string"==typeof n[0]&&N[n[0]]||("string"==typeof n[0]&&(N[n[0]]=new Date),j.apply(void 0,n))}function S(e,n,t){e.loadNamespaces(n,(function(){if(e.isInitialized)t();else{e.on("initialized",(function n(){setTimeout((function(){e.off("initialized",n)}),0),t()}))}}))}var k=t(38),C=t.n(k);function E(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function D(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.i18n,r=Object(i.useContext)(v),a=y()&&r||{},c=a.i18n,s=a.defaultNS,u=t||c||w();if(u&&!u.reportNamespaces&&(u.reportNamespaces=new h),!u){P("You will need pass in an i18next instance by using initReactI18next");var f=[function(e){return e},{},!1];return f.t=function(e){return e},f.i18n={},f.ready=!1,f}var p=function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?E(t,!0).forEach((function(n){o()(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):E(t).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({},O(),{},u.options.react,{},n),l=p.useSuspense,d=e||s||u.options&&u.options.defaultNS;d="string"==typeof d?[d]:d||["translation"],u.reportNamespaces.addUsedNamespaces&&u.reportNamespaces.addUsedNamespaces(d);var g=(u.isInitialized||u.initializedStoreOnce)&&d.every((function(e){return function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(!n.languages||!n.languages.length)return P("i18n.languages were undefined or empty",n.languages),!0;var r=n.languages[0],o=!!n.options&&n.options.fallbackLng,i=n.languages[n.languages.length-1];if("cimode"===r.toLowerCase())return!0;var a=function(e,t){var r=n.services.backendConnector.state["".concat(e,"|").concat(t)];return-1===r||2===r};return!(t.bindI18n&&t.bindI18n.indexOf("languageChanging")>-1&&n.services.backendConnector.backend&&n.isLanguageChangingTo&&!a(n.isLanguageChangingTo,e))&&(!!n.hasResourceBundle(r,e)||(!n.services.backendConnector.backend||!(!a(r,e)||o&&!a(i,e))))}(e,u,p)}));function b(){return{t:u.getFixedT(null,"fallback"===p.nsMode?d:d[0])}}var m=Object(i.useState)(b()),j=C()(m,2),N=j[0],k=j[1];Object(i.useEffect)((function(){var e=!0,n=p.bindI18n,t=p.bindI18nStore;function r(){e&&k(b())}return g||l||S(u,d,(function(){e&&k(b())})),n&&u&&u.on(n,r),t&&u&&u.store.on(t,r),function(){e=!1,n&&u&&n.split(" ").forEach((function(e){return u.off(e,r)})),t&&u&&t.split(" ").forEach((function(e){return u.store.off(e,r)}))}}),[d.join()]);var D=[N.t,u,g];if(D.t=N.t,D.i18n=u,D.ready=g,g)return D;if(!g&&!l)return D;throw new Promise((function(e){S(u,d,(function(){k(b()),e()}))}))}function I(e){var n=e.i18n,t=e.defaultNS,r=e.children;return g=!0,a.a.createElement(v.Provider,{value:{i18n:n,defaultNS:t}},r)}t.d(n,"c",(function(){return D})),t.d(n,"a",(function(){return I})),t.d(n,"b",(function(){return m}))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,