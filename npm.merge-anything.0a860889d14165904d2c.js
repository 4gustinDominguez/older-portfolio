(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{119:function(e,n,r){"use strict";var t=r(21);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */function c(){for(var e=0,n=0,r=arguments.length;n<r;n++)e+=arguments[n].length;var t=Array(e),c=0;for(n=0;n<r;n++)for(var o=arguments[n],b=0,u=o.length;b<u;b++,c++)t[c]=o[b];return t}function o(e,n,r,t){var c=t.propertyIsEnumerable(n)?"enumerable":"nonenumerable";"enumerable"===c&&(e[n]=r),"nonenumerable"===c&&Object.defineProperty(e,n,{value:r,enumerable:!1,writable:!0,configurable:!0})}function b(e,n,r){if(!Object(t.b)(n))return r&&Object(t.a)(r)&&r.forEach((function(r){n=r(e,n)})),n;var u={};Object(t.b)(e)&&(u=c(Object.getOwnPropertyNames(e),Object.getOwnPropertySymbols(e)).reduce((function(r,c){var b=e[c];return(!Object(t.c)(c)&&!Object.getOwnPropertyNames(n).includes(c)||Object(t.c)(c)&&!Object.getOwnPropertySymbols(n).includes(c))&&o(r,c,b,e),r}),{}));return c(Object.getOwnPropertyNames(n),Object.getOwnPropertySymbols(n)).reduce((function(c,u){var a=n[u],i=Object(t.b)(e)?e[u]:void 0;return r&&Object(t.a)(r)&&r.forEach((function(e){a=e(i,a)})),void 0!==i&&Object(t.b)(a)&&(a=b(i,a,r)),o(c,u,a,n),c}),u)}n.a=function(e){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var c=null,o=e;return Object(t.b)(e)&&e.extensions&&1===Object.keys(e).length&&(o={},c=e.extensions),n.reduce((function(e,n){return b(e,n,c)}),o)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,