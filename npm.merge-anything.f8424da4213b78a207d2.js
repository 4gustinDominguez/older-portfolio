(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{118:function(e,n,r){"use strict";var t=r(21);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */function c(){for(var e=0,n=0,r=arguments.length;n<r;n++)e+=arguments[n].length;var t=Array(e),c=0;for(n=0;n<r;n++)for(var o=arguments[n],b=0,u=o.length;b<u;b++,c++)t[c]=o[b];return t}function o(e,n,r,t){var c=t.propertyIsEnumerable(n)?"enumerable":"nonenumerable";"enumerable"===c&&(e[n]=r),"nonenumerable"===c&&Object.defineProperty(e,n,{value:r,enumerable:!1,writable:!0,configurable:!0})}n.a=function(e){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var b=null,u=e;return Object(t.b)(e)&&e.extensions&&1===Object.keys(e).length&&(u={},b=e.extensions),n.reduce((function(e,n){return function e(n,r,b){if(!Object(t.b)(r))return b&&Object(t.a)(b)&&b.forEach((function(e){r=e(n,r)})),r;var u={};return Object(t.b)(n)&&(u=c(Object.getOwnPropertyNames(n),Object.getOwnPropertySymbols(n)).reduce((function(e,c){var b=n[c];return(!Object(t.c)(c)&&!Object.getOwnPropertyNames(r).includes(c)||Object(t.c)(c)&&!Object.getOwnPropertySymbols(r).includes(c))&&o(e,c,b,n),e}),{})),c(Object.getOwnPropertyNames(r),Object.getOwnPropertySymbols(r)).reduce((function(c,u){var a=r[u],i=Object(t.b)(n)?n[u]:void 0;return b&&Object(t.a)(b)&&b.forEach((function(e){a=e(i,a)})),void 0!==i&&Object(t.b)(a)&&(a=e(i,a,b)),o(c,u,a,r),c}),u)}(e,n,b)}),u)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,